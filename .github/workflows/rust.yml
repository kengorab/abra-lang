name: Build & Test

on:
  push:
    branches:
      - master
  pull_request:

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout source
      uses: actions/checkout@v2
    - name: Cache Cargo
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    - name: Cache LLVM
      id: cache-llvm
      uses: actions/cache@v3
      with:
        path: ./llvm
        key: llvm-11.1.0
    - name: Cache QBE
      id: cache-qbe
      uses: actions/cache@v3
      with:
        path: ./qbe
        key: qbe-1.2
    - uses: jetli/wasm-pack-action@v0.3.0
      with:
        version: 'v0.9.0'
    - uses: actions/setup-python@v2
      with:
        python-version: '3.x'
    - name: Install LLVM (11.1.0)
      run: |
        mkdir -p llvm
        curl -L "https://github.com/llvm/llvm-project/releases/download/llvmorg-11.1.0/clang+llvm-11.1.0-x86_64-linux-gnu-ubuntu-20.10.tar.xz" > llvm.tar.xz
        tar x --xz -C llvm --strip-components=1 -f llvm.tar.xz
      if: steps.cache-llvm.outputs.cache-hit != 'true'
    - name: Setup LLVM
      run: |
        sudo apt-get update
        sudo apt-get install -y libtinfo6
        echo "PATH=$(pwd)/llvm/bin:$PATH" >> $GITHUB_ENV
        echo "LLVM_CONFIG=$(pwd)/llvm/bin/llvm-config" >> $GITHUB_ENV
    - name: Install QBE
      run: |
        mkdir -p qbe
        cd qbe
        wget https://c9x.me/compile/release/qbe-1.2.tar.xz
        tar -xf qbe-1.2.tar.xz
        cd qbe-1.2
        make
      if: steps.cache-qbe.outputs.cache-hit != 'true'
    - name: Setup QBE
      run: |
        ls -la ./qbe
        ls -la ./qbe/qbe-1.2
        echo "PATH=$(pwd)/qbe/qbe-1.2:$PATH" >> $GITHUB_ENV
        which qbe
    - name: Build rust
      run: cargo build
    - name: Install ext dependencies (for C compilation)
      run: ./configure-libgc.sh
    - name: Run rust tests
      run: ls -la selfhost/test/typechecker && TEST_TMP_DIR=${{ runner.temp }} cargo test --verbose
    - name: Build rust (release mode)
      run: cargo build --release
    - name: Run abra tests
      run: target/release/abra test ./abra_core/abra_test
    - name: Run mal tests
      run: |
        cd abra_mal
        ./test.sh src
    - name: Build & run wasm tests
      run: |
        cd abra_wasm && WASM_PACK_TARGET=nodejs ./build.sh && cd ..
        cd abra_wasm/js-tests
        npm install
        npm test
