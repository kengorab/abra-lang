name: Release

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'

jobs:
  create-gh-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v4
      - name: Create pre-release release
        run: gh release create ${{ github.ref_name }} -p
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  build-and-release:
    needs:
      - create-gh-release
    strategy:
      matrix:
        platform:
          - os: ubuntu-latest
            suffix: linux
          - os: macos-14
            suffix: darwin-arm64
    runs-on: ${{ matrix.platform.os }}
    steps:
      - name: Checkout source
        uses: actions/checkout@v4
      - name: Install QBE
        run: |
          mkdir -p qbe
          cd qbe
          wget https://c9x.me/compile/release/qbe-1.2.tar.xz
          tar -xf qbe-1.2.tar.xz
          cd qbe-1.2
          make
        if: steps.cache-qbe.outputs.cache-hit != 'true'
      - name: Setup QBE
        run: |
          echo "PATH=$(pwd)/qbe/qbe-1.2:$PATH" >> $GITHUB_ENV
      - name: Install libgc dependencies (macos only)
        if: matrix.platform.suffix == 'darwin-arm64'
        run: brew install autoconf automake libtool
      - name: Install ext dependencies
        run: ./projects/compiler/scripts/configure-libgc.sh
      - name: Install abra
        run: |
          mkdir abra-installation
          wget https://github.com/kengorab/abra-lang/releases/latest/download/abra-${{ matrix.platform.suffix }}.tar.gz
          tar -xzf abra-${{ matrix.platform.suffix }}.tar.gz -C abra-installation
          echo "PATH=$(pwd)/abra-installation:$PATH" >> $GITHUB_ENV
          echo "ABRA_HOME=`realpath $(pwd)/abra-installation/std`" >> $GITHUB_ENV
      - name: Build package
        run: |
          cd selfhost
          ./gen-pkg/gen.sh ${{ matrix.platform.suffix }} ${{ github.ref_name }}
      - name: Upload to release
        run: gh release upload ${{ github.ref_name }} selfhost/scripts/abra-${{ matrix.platform.suffix }}.tar.gz
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  mark-release-as-latest:
    needs:
      - build-and-release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v4
      - name: Mark release as latest
        run: gh release edit ${{ github.ref_name }} --prerelease=false --latest
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
