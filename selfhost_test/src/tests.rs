use crate::test_utils::TestRunner;

#[test]
fn lexer_tests() {
    TestRunner::lexer_test_runner()
        // Ints
        .add_test_vs_file("lexer/ints.abra", "lexer/ints.out.json")
        .add_test_vs_file("lexer/ints_error_leading_zero.abra", "lexer/ints_error_leading_zero.out")
        .add_test_vs_file("lexer/ints_error_invalid_hex_first.abra", "lexer/ints_error_invalid_hex_first.out")
        .add_test_vs_file("lexer/ints_error_invalid_hex_eof.abra", "lexer/ints_error_invalid_hex_eof.out")
        .add_test_vs_file("lexer/ints_error_invalid_binary_first.abra", "lexer/ints_error_invalid_binary_first.out")
        .add_test_vs_file("lexer/ints_error_invalid_binary_eof.abra", "lexer/ints_error_invalid_binary_eof.out")
        // Floats
        .add_test_vs_file("lexer/floats.abra", "lexer/floats.out.json")
        .add_test_vs_file("lexer/floats_error_extra_period.abra", "lexer/floats_error_extra_period.out")
        // Strings
        .add_test_vs_file("lexer/strings.abra", "lexer/strings.out.json")
        .add_test_vs_file("lexer/strings_error_unterminated_newline.abra", "lexer/strings_error_unterminated_newline.out")
        .add_test_vs_file("lexer/strings_error_unterminated_eof.abra", "lexer/strings_error_unterminated_eof.out")
        .add_test_vs_file("lexer/strings_error_unsupported_escape_sequence.abra", "lexer/strings_error_unsupported_escape_sequence.out")
        .add_test_vs_file("lexer/strings_error_invalid_unicode_seq_length.abra", "lexer/strings_error_invalid_unicode_seq_length.out")
        .add_test_vs_file("lexer/strings_error_invalid_unicode_seq_eof.abra", "lexer/strings_error_invalid_unicode_seq_eof.out")
        .add_test_vs_file("lexer/strings_error_invalid_unicode_seq_char.abra", "lexer/strings_error_invalid_unicode_seq_char.out")
        .add_test_vs_file("lexer/strings_interpolation.1.abra", "lexer/strings_interpolation.1.out.json")
        .add_test_vs_file("lexer/strings_interpolation.2.abra", "lexer/strings_interpolation.2.out.json")
        .add_test_vs_file("lexer/strings_interpolation_error_unclosed_brace.abra", "lexer/strings_interpolation_error_unclosed_brace.out")

        .add_test_vs_file("lexer/keywords.abra", "lexer/keywords.out.json")
        // Symbols
        .add_test_vs_file("lexer/symbols.abra", "lexer/symbols.out.json")
        .add_test_vs_file("lexer/symbols_error_ampersand_eof.abra", "lexer/symbols_error_ampersand_eof.out")
        .add_test_vs_file("lexer/symbols_error_ampersand_other.abra", "lexer/symbols_error_ampersand_other.out")
        .add_test_vs_file("lexer/symbols_error_hash_eof.abra", "lexer/symbols_error_hash_eof.out")
        .add_test_vs_file("lexer/symbols_error_hash_other.abra", "lexer/symbols_error_hash_other.out")
        // Comments
        .add_test_vs_file("lexer/comments_single_line.abra", "lexer/comments_single_line.out.json")
        .add_test_vs_file("lexer/comments_multiline.abra", "lexer/comments_multiline.out.json")
        .add_test_vs_file("lexer/comments_error_multiline_unclosed.abra", "lexer/comments_error_multiline_unclosed.out")
        .run_tests();
}

#[test]
fn parser_tests() {
    TestRunner::parser_test_runner()
        // Literals
        .add_test_vs_file("parser/literals.abra", "parser/literals.out.json")
        .add_test_vs_file("parser/strings_interpolation.abra", "parser/strings_interpolation.out.json")
        .add_test_vs_file("parser/strings_interpolation_error_invalid_expression.1.abra", "parser/strings_interpolation_error_invalid_expression.1.out")
        .add_test_vs_file("parser/strings_interpolation_error_invalid_expression.2.abra", "parser/strings_interpolation_error_invalid_expression.2.out")

        // Binary
        .add_test_vs_file("parser/binary.abra", "parser/binary.out.json")
        .add_test_vs_file("parser/binary_error_eof.abra", "parser/binary_error_eof.out")
        // Unary
        .add_test_vs_file("parser/unary.abra", "parser/unary.out.json")
        .add_test_vs_file("parser/unary_error_eof.abra", "parser/unary_error_eof.out")
        // Grouped
        .add_test_vs_file("parser/grouped.abra", "parser/grouped.out.json")
        .add_test_vs_file("parser/grouped_error_eof.abra", "parser/grouped_error_eof.out")
        .add_test_vs_file("parser/grouped_error_wrong_closing.abra", "parser/grouped_error_wrong_closing.out")
        // Identifiers
        .add_test_vs_file("parser/identifiers.abra", "parser/identifiers.out.json")
        .add_test_vs_file("parser/invocation_transform_OptionSome.abra", "parser/invocation_transform_OptionSome.out.json")
        // Accessors
        .add_test_vs_file("parser/accessor.abra", "parser/accessor.out.json")
        .add_test_vs_file("parser/accessor_error_eof.abra", "parser/accessor_error_eof.out")
        .add_test_vs_file("parser/accessor_error_self.abra", "parser/accessor_error_self.out")
        .add_test_vs_file("parser/accessor_error_None.abra", "parser/accessor_error_None.out")
        // Invocation
        .add_test_vs_file("parser/invocation.abra", "parser/invocation.out.json")
        .add_test_vs_file("parser/invocation_error_eof.abra", "parser/invocation_error_eof.out")
        .add_test_vs_file("parser/invocation_error_no_comma.abra", "parser/invocation_error_no_comma.out")
        .add_test_vs_file("parser/invocation_error_no_rparen.abra", "parser/invocation_error_no_rparen.out")
        .add_test_vs_file("parser/invocation_error_empty_typeargs.abra", "parser/invocation_error_empty_typeargs.out")
        .add_test_vs_file("parser/invocation_error_invalid_typearg.abra", "parser/invocation_error_invalid_typearg.out")
        .add_test_vs_file("parser/invocation_error_typeargs_eof.abra", "parser/invocation_error_typeargs_eof.out")
        .add_test_vs_file("parser/invocation_error_typeargs_no_lparen.abra", "parser/invocation_error_typeargs_no_lparen.out")
        // Array
        .add_test_vs_file("parser/array.abra", "parser/array.out.json")
        .add_test_vs_file("parser/array_error_eof.abra", "parser/array_error_eof.out")
        .add_test_vs_file("parser/array_error_no_comma.abra", "parser/array_error_no_comma.out")
        .add_test_vs_file("parser/array_error_no_rbrack.abra", "parser/array_error_no_rbrack.out")
        // Set
        .add_test_vs_file("parser/set.abra", "parser/set.out.json")
        .add_test_vs_file("parser/set_error_eof.abra", "parser/set_error_eof.out")
        .add_test_vs_file("parser/set_error_no_comma.abra", "parser/set_error_no_comma.out")
        .add_test_vs_file("parser/set_error_no_rbrace.abra", "parser/set_error_no_rbrace.out")
        // Map
        .add_test_vs_file("parser/map.abra", "parser/map.out.json")
        .add_test_vs_file("parser/map_error_bad_key.abra", "parser/map_error_bad_key.out")
        .add_test_vs_file("parser/map_error_no_colon.abra", "parser/map_error_no_colon.out")
        .add_test_vs_file("parser/map_error_no_colon_eof.abra", "parser/map_error_no_colon_eof.out")
        .add_test_vs_file("parser/map_error_no_comma.abra", "parser/map_error_no_comma.out")
        .add_test_vs_file("parser/map_error_no_rbrace.abra", "parser/map_error_no_rbrace.out")
        .add_test_vs_file("parser/map_error_no_value.abra", "parser/map_error_no_value.out")
        .add_test_vs_file("parser/map_error_no_value_eof.abra", "parser/map_error_no_value_eof.out")
        // Tuples
        .add_test_vs_file("parser/tuples.abra", "parser/tuples.out.json")
        .add_test_vs_file("parser/tuples_error_eof.abra", "parser/tuples_error_eof.out")
        .add_test_vs_file("parser/tuples_error_no_comma.abra", "parser/tuples_error_no_comma.out")
        .add_test_vs_file("parser/tuples_error_no_rparen.abra", "parser/tuples_error_no_rparen.out")
        // Lambdas
        .add_test_vs_file("parser/lambdas.abra", "parser/lambdas.out.json")
        .add_test_vs_file("parser/lambdas_error_bad_arg.abra", "parser/lambdas_error_bad_arg.out")
        .add_test_vs_file("parser/lambdas_error_badparam_None.abra", "parser/lambdas_error_badparam_None.out")
        .add_test_vs_file("parser/lambdas_error_badparam_nonident.abra", "parser/lambdas_error_badparam_nonident.out")
        .add_test_vs_file("parser/lambdas_error_badparam_self.abra", "parser/lambdas_error_badparam_self.out")
        .add_test_vs_file("parser/lambdas_error_noargs_no_arrow.abra", "parser/lambdas_error_noargs_no_arrow.out")
        .add_test_vs_file("parser/lambdas_error_statement_body.abra", "parser/lambdas_error_statement_body.out")
        // Indexing
        .add_test_vs_file("parser/indexing.abra", "parser/indexing.out.json")
        .add_test_vs_file("parser/indexing_error_eof.abra", "parser/indexing_error_eof.out")
        .add_test_vs_file("parser/indexing_error_no_rbrack.abra", "parser/indexing_error_no_rbrack.out")
        // Assignment
        .add_test_vs_file("parser/assignment.abra", "parser/assignment.out.json")
        .add_test_vs_file("parser/assignment_error_as_expr.abra", "parser/assignment_error_as_expr.out")
        .add_test_vs_file("parser/assignment_error_assign_to_range.abra", "parser/assignment_error_assign_to_range.out")
        .add_test_vs_file("parser/assignment_error_assignment_precedence.abra", "parser/assignment_error_assignment_precedence.out")
        .add_test_vs_file("parser/assignment_error_illegal_target.abra", "parser/assignment_error_illegal_target.out")
        // If
        .add_test_vs_file("parser/if.abra", "parser/if.out.json")
        .add_test_vs_file("parser/if_error_no_closing_pipe.abra", "parser/if_error_no_closing_pipe.out")
        .add_test_vs_file("parser/if_error_no_then_block.abra", "parser/if_error_no_then_block.out")
        // Match
        .add_test_vs_file("parser/match.abra", "parser/match.out.json")
        .add_test_vs_file("parser/match_error_case_bad_binding.abra", "parser/match_error_case_bad_binding.out")
        .add_test_vs_file("parser/match_error_case_bad_path.abra", "parser/match_error_case_bad_path.out")
        .add_test_vs_file("parser/match_error_case_bad_token.abra", "parser/match_error_case_bad_token.out")
        .add_test_vs_file("parser/match_error_case_expr.abra", "parser/match_error_case_expr.out")
        .add_test_vs_file("parser/match_error_case_no_case.abra", "parser/match_error_case_no_case.out")
        .add_test_vs_file("parser/match_error_no_expr.abra", "parser/match_error_no_expr.out")
        .add_test_vs_file("parser/match_error_no_lbrace.abra", "parser/match_error_no_lbrace.out")
        .add_test_vs_file("parser/match_error_destructuring_case_empty_args.abra", "parser/match_error_destructuring_case_empty_args.out")
        // Decorators
        .add_test_vs_file("parser/decorator_error_bad_ident.abra", "parser/decorator_error_bad_ident.out")
        .add_test_vs_file("parser/decorator_error_before_expr.abra", "parser/decorator_error_before_expr.out")
        .add_test_vs_file("parser/decorator_error_before_invalid_stmt.abra", "parser/decorator_error_before_invalid_stmt.out")
        .add_test_vs_file("parser/decorator_error_non_constant_arg.abra", "parser/decorator_error_non_constant_arg.out")
        .add_test_vs_file("parser/decorator.abra", "parser/decorator.out.json")

        // Imports
        .add_test_vs_file("parser/import.abra", "parser/import.out.json")
        .add_test_vs_file("parser/import_error_alias_bad_alias.abra", "parser/import_error_alias_bad_alias.out")
        .add_test_vs_file("parser/import_error_alias_bad_module.abra", "parser/import_error_alias_bad_module.out")
        .add_test_vs_file("parser/import_error_alias_no_alias_eof.abra", "parser/import_error_alias_no_alias_eof.out")
        .add_test_vs_file("parser/import_error_alias_no_as.abra", "parser/import_error_alias_no_as.out")
        .add_test_vs_file("parser/import_error_alias_no_module.abra", "parser/import_error_alias_no_module.out")
        .add_test_vs_file("parser/import_error_forbidden.abra", "parser/import_error_forbidden.out")
        .add_test_vs_file("parser/import_error_list_2nd_nonident.abra", "parser/import_error_list_2nd_nonident.out")
        .add_test_vs_file("parser/import_error_list_2nd_underscore.abra", "parser/import_error_list_2nd_underscore.out")
        .add_test_vs_file("parser/import_error_list_bad_module.abra", "parser/import_error_list_bad_module.out")
        .add_test_vs_file("parser/import_error_list_first_nonident.abra", "parser/import_error_list_first_nonident.out")
        .add_test_vs_file("parser/import_error_list_no_comma.abra", "parser/import_error_list_no_comma.out")
        .add_test_vs_file("parser/import_error_list_no_from.abra", "parser/import_error_list_no_from.out")
        .add_test_vs_file("parser/import_error_list_no_module_eof.abra", "parser/import_error_list_no_module_eof.out")
        // Exports
        .add_test_vs_file("parser/export.abra", "parser/export.out.json")
        .add_test_vs_file("parser/export_error_before_expr.abra", "parser/export_error_before_expr.out")
        .add_test_vs_file("parser/export_error_before_invalid_statement.abra", "parser/export_error_before_invalid_statement.out")

        // While
        .add_test_vs_file("parser/while.abra", "parser/while.out.json")
        .add_test_vs_file("parser/while_error_as_expr.abra", "parser/while_error_as_expr.out")
        // For
        .add_test_vs_file("parser/for.abra", "parser/for.out.json")
        .add_test_vs_file("parser/for_error_no_in.abra", "parser/for_error_no_in.out")
        .add_test_vs_file("parser/for_error_no_iterator.abra", "parser/for_error_no_iterator.out")

        // Type identifiers
        .add_test_vs_file("parser/typeidentifiers.abra", "parser/typeidentifiers.out.json")
        .add_test_vs_file("parser/typeidentifiers_error_empty_typeargs.abra", "parser/typeidentifiers_error_empty_typeargs.out")
        .add_test_vs_file("parser/typeidentifiers_error_empty_tuple.abra", "parser/typeidentifiers_error_empty_tuple.out")
        .add_test_vs_file("parser/typeidentifiers_error_misplaced_typeargs.abra", "parser/typeidentifiers_error_misplaced_typeargs.out")
        .add_test_vs_file("parser/typeidentifiers_error_no_base_ident.abra", "parser/typeidentifiers_error_no_base_ident.out")
        .add_test_vs_file("parser/typeidentifiers_error_no_rbrack.abra", "parser/typeidentifiers_error_no_rbrack.out")
        // Binding declaration
        .add_test_vs_file("parser/bindingdecl.abra", "parser/bindingdecl.out.json")
        .add_test_vs_file("parser/bindingdecl_error_bad_expr.abra", "parser/bindingdecl_error_bad_expr.out")
        .add_test_vs_file("parser/bindingdecl_error_bad_ident.abra", "parser/bindingdecl_error_bad_ident.out")
        .add_test_vs_file("parser/bindingdecl_error_no_expr.abra", "parser/bindingdecl_error_no_expr.out")
        .add_test_vs_file("parser/bindingdecl_error_no_ident.abra", "parser/bindingdecl_error_no_ident.out")
        // Function declaration
        .add_test_vs_file("parser/functiondecl.abra", "parser/functiondecl.out.json")
        .add_test_vs_file("parser/functiondecl_error_bad_name.abra", "parser/functiondecl_error_bad_name.out")
        .add_test_vs_file("parser/functiondecl_error_no_parens.abra", "parser/functiondecl_error_no_parens.out")
        .add_test_vs_file("parser/functiondecl_error_empty_typeparams.abra", "parser/functiondecl_error_empty_typeparams.out")
        .add_test_vs_file("parser/functiondecl_error_typeparam_invalid.abra", "parser/functiondecl_error_typeparam_invalid.out")
        .add_test_vs_file("parser/functiondecl_error_no_body.abra", "parser/functiondecl_error_no_body.out")
        .add_test_vs_file("parser/functiondecl_error_self_default_value.abra", "parser/functiondecl_error_self_default_value.out")
        .add_test_vs_file("parser/functiondecl_error_self_type_annotation.abra", "parser/functiondecl_error_self_type_annotation.out")
        .add_test_vs_file("parser/functiondecl_error_self_variadic.abra", "parser/functiondecl_error_self_variadic.out")
        // Type declaration
        .add_test_vs_file("parser/typedecl.abra", "parser/typedecl.out.json")
        .add_test_vs_file("parser/typedecl_error_exporting_method.abra", "parser/typedecl_error_exporting_method.out")
        .add_test_vs_file("parser/typedecl_error_field_after_method.abra", "parser/typedecl_error_field_after_method.out")
        .add_test_vs_file("parser/typedecl_error_illegal_body_part.abra", "parser/typedecl_error_illegal_body_part.out")
        // Enum declaration
        .add_test_vs_file("parser/enumdecl.abra", "parser/enumdecl.out.json")
        .add_test_vs_file("parser/enumdecl_error_container_no_typeannotation.abra", "parser/enumdecl_error_container_no_typeannotation.out")
        .add_test_vs_file("parser/enumdecl_error_empty_container_variant.abra", "parser/enumdecl_error_empty_container_variant.out")
        // Returns
        .add_test_vs_file("parser/return.abra", "parser/return.out.json")
        .add_test_vs_file("parser/return_error_nonexpr.abra", "parser/return_error_nonexpr.out")

        .run_tests();
}

#[test]
fn typechecker_tests() {
    TestRunner::typechecker_test_runner()
        // Lexer/Parser error handling
        .add_test_vs_file("typechecker/_lexer_error.abra", "typechecker/_lexer_error.out")
        .add_test_vs_file("typechecker/_parser_error.abra", "typechecker/_parser_error.out")
        // Literals
        .add_test_vs_file("typechecker/literals/literals.abra", "typechecker/literals/literals.out.json")
        .add_test_vs_file("typechecker/literals/string_interpolation.abra", "typechecker/literals/string_interpolation.out.json")
        // Unary
        .add_test_vs_file("typechecker/unary/unary.abra", "typechecker/unary/unary.out.json")
        .add_test_vs_file("typechecker/unary/error_minus.1.abra", "typechecker/unary/error_minus.1.out")
        .add_test_vs_file("typechecker/unary/error_minus.2.abra", "typechecker/unary/error_minus.2.out")
        .add_test_vs_file("typechecker/unary/error_neg.1.abra", "typechecker/unary/error_neg.1.out")
        .add_test_vs_file("typechecker/unary/error_neg.2.abra", "typechecker/unary/error_neg.2.out")
        // Binary
        .add_test_vs_file("typechecker/binary/and.abra", "typechecker/binary/and.out.json")
        .add_test_vs_file("typechecker/binary/and_error.1.abra", "typechecker/binary/and_error.1.out")
        .add_test_vs_file("typechecker/binary/and_error.2.abra", "typechecker/binary/and_error.2.out")
        .add_test_vs_file("typechecker/binary/coalesce.1.abra", "typechecker/binary/coalesce.1.out.json")
        .add_test_vs_file("typechecker/binary/coalesce.2.abra", "typechecker/binary/coalesce.2.out.json")
        .add_test_vs_file("typechecker/binary/coalesce_error.1.abra", "typechecker/binary/coalesce_error.1.out")
        .add_test_vs_file("typechecker/binary/coalesce_error.2.abra", "typechecker/binary/coalesce_error.2.out")
        .add_test_vs_file("typechecker/binary/coalesce_error.3.abra", "typechecker/binary/coalesce_error.3.out")
        .add_test_vs_file("typechecker/binary/divide.abra", "typechecker/binary/divide.out.json")
        .add_test_vs_file("typechecker/binary/divide_error.1.abra", "typechecker/binary/divide_error.1.out")
        .add_test_vs_file("typechecker/binary/divide_error.2.abra", "typechecker/binary/divide_error.2.out")
        .add_test_vs_file("typechecker/binary/divide_error.3.abra", "typechecker/binary/divide_error.3.out")
        .add_test_vs_file("typechecker/binary/eq.1.abra", "typechecker/binary/eq.1.out.json")
        .add_test_vs_file("typechecker/binary/eq.2.abra", "typechecker/binary/eq.2.out.json")
        .add_test_vs_file("typechecker/binary/eq_error.1.abra", "typechecker/binary/eq_error.1.out")
        .add_test_vs_file("typechecker/binary/eq_error.2.abra", "typechecker/binary/eq_error.2.out")
        .add_test_vs_file("typechecker/binary/eq_error.3.abra", "typechecker/binary/eq_error.3.out")
        .add_test_vs_file("typechecker/binary/gt.abra", "typechecker/binary/gt.out.json")
        .add_test_vs_file("typechecker/binary/gt_error.1.abra", "typechecker/binary/gt_error.1.out")
        .add_test_vs_file("typechecker/binary/gt_error.2.abra", "typechecker/binary/gt_error.2.out")
        .add_test_vs_file("typechecker/binary/gt_error.3.abra", "typechecker/binary/gt_error.3.out")
        .add_test_vs_file("typechecker/binary/gte.abra", "typechecker/binary/gte.out.json")
        .add_test_vs_file("typechecker/binary/gte_error.1.abra", "typechecker/binary/gte_error.1.out")
        .add_test_vs_file("typechecker/binary/gte_error.2.abra", "typechecker/binary/gte_error.2.out")
        .add_test_vs_file("typechecker/binary/gte_error.3.abra", "typechecker/binary/gte_error.3.out")
        .add_test_vs_file("typechecker/binary/lt.abra", "typechecker/binary/lt.out.json")
        .add_test_vs_file("typechecker/binary/lt_error.1.abra", "typechecker/binary/lt_error.1.out")
        .add_test_vs_file("typechecker/binary/lt_error.2.abra", "typechecker/binary/lt_error.2.out")
        .add_test_vs_file("typechecker/binary/lt_error.3.abra", "typechecker/binary/lt_error.3.out")
        .add_test_vs_file("typechecker/binary/lte.abra", "typechecker/binary/lte.out.json")
        .add_test_vs_file("typechecker/binary/lte_error.1.abra", "typechecker/binary/lte_error.1.out")
        .add_test_vs_file("typechecker/binary/lte_error.2.abra", "typechecker/binary/lte_error.2.out")
        .add_test_vs_file("typechecker/binary/lte_error.3.abra", "typechecker/binary/lte_error.3.out")
        .add_test_vs_file("typechecker/binary/minus.abra", "typechecker/binary/minus.out.json")
        .add_test_vs_file("typechecker/binary/minus_error.1.abra", "typechecker/binary/minus_error.1.out")
        .add_test_vs_file("typechecker/binary/minus_error.2.abra", "typechecker/binary/minus_error.2.out")
        .add_test_vs_file("typechecker/binary/minus_error.3.abra", "typechecker/binary/minus_error.3.out")
        .add_test_vs_file("typechecker/binary/mod.abra", "typechecker/binary/mod.out.json")
        .add_test_vs_file("typechecker/binary/mod_error.1.abra", "typechecker/binary/mod_error.1.out")
        .add_test_vs_file("typechecker/binary/mod_error.2.abra", "typechecker/binary/mod_error.2.out")
        .add_test_vs_file("typechecker/binary/mod_error.3.abra", "typechecker/binary/mod_error.3.out")
        .add_test_vs_file("typechecker/binary/neq.1.abra", "typechecker/binary/neq.1.out.json")
        .add_test_vs_file("typechecker/binary/neq.2.abra", "typechecker/binary/neq.2.out.json")
        .add_test_vs_file("typechecker/binary/neq_error.1.abra", "typechecker/binary/neq_error.1.out")
        .add_test_vs_file("typechecker/binary/neq_error.2.abra", "typechecker/binary/neq_error.2.out")
        .add_test_vs_file("typechecker/binary/or.abra", "typechecker/binary/or.out.json")
        .add_test_vs_file("typechecker/binary/or_error.1.abra", "typechecker/binary/or_error.1.out")
        .add_test_vs_file("typechecker/binary/or_error.2.abra", "typechecker/binary/or_error.2.out")
        .add_test_vs_file("typechecker/binary/plus_error.1.abra", "typechecker/binary/plus_error.1.out")
        .add_test_vs_file("typechecker/binary/plus_error.2.abra", "typechecker/binary/plus_error.2.out")
        .add_test_vs_file("typechecker/binary/plus_error.3.abra", "typechecker/binary/plus_error.3.out")
        .add_test_vs_file("typechecker/binary/plus_numeric.abra", "typechecker/binary/plus_numeric.out.json")
        .add_test_vs_file("typechecker/binary/plus_string_concat.abra", "typechecker/binary/plus_string_concat.out.json")
        .add_test_vs_file("typechecker/binary/pow.abra", "typechecker/binary/pow.out.json")
        .add_test_vs_file("typechecker/binary/pow_error.1.abra", "typechecker/binary/pow_error.1.out")
        .add_test_vs_file("typechecker/binary/pow_error.2.abra", "typechecker/binary/pow_error.2.out")
        .add_test_vs_file("typechecker/binary/pow_error.3.abra", "typechecker/binary/pow_error.3.out")
        .add_test_vs_file("typechecker/binary/shl.abra", "typechecker/binary/shl.out.json")
        .add_test_vs_file("typechecker/binary/shl_error.1.abra", "typechecker/binary/shl_error.1.out")
        .add_test_vs_file("typechecker/binary/shl_error.2.abra", "typechecker/binary/shl_error.2.out")
        .add_test_vs_file("typechecker/binary/shl_error.3.abra", "typechecker/binary/shl_error.3.out")
        .add_test_vs_file("typechecker/binary/shl_error.4.abra", "typechecker/binary/shl_error.4.out")
        .add_test_vs_file("typechecker/binary/shr.abra", "typechecker/binary/shr.out.json")
        .add_test_vs_file("typechecker/binary/shr_error.1.abra", "typechecker/binary/shr_error.1.out")
        .add_test_vs_file("typechecker/binary/shr_error.2.abra", "typechecker/binary/shr_error.2.out")
        .add_test_vs_file("typechecker/binary/shr_error.3.abra", "typechecker/binary/shr_error.3.out")
        .add_test_vs_file("typechecker/binary/shr_error.4.abra", "typechecker/binary/shr_error.4.out")
        .add_test_vs_file("typechecker/binary/times.abra", "typechecker/binary/times.out.json")
        .add_test_vs_file("typechecker/binary/times_error.1.abra", "typechecker/binary/times_error.1.out")
        .add_test_vs_file("typechecker/binary/times_error.2.abra", "typechecker/binary/times_error.2.out")
        .add_test_vs_file("typechecker/binary/times_error.3.abra", "typechecker/binary/times_error.3.out")
        .add_test_vs_file("typechecker/binary/and_eq.abra", "typechecker/binary/and_eq.out.json")
        .add_test_vs_file("typechecker/binary/and_eq_error.1.abra", "typechecker/binary/and_eq_error.1.out")
        .add_test_vs_file("typechecker/binary/and_eq_error.2.abra", "typechecker/binary/and_eq_error.2.out")
        // .add_test_vs_txt("typechecker/binary/coalesce_eq.1.abra", "typechecker/binary/coalesce_eq.1.out.json")
        // .add_test_vs_txt("typechecker/binary/coalesce_eq_error.1.abra", "typechecker/binary/coalesce_eq_error.1.out")
        // .add_test_vs_txt("typechecker/binary/coalesce_eq_error.2.abra", "typechecker/binary/coalesce_eq_error.2.out")
        .add_test_vs_file("typechecker/binary/divide_eq.abra", "typechecker/binary/divide_eq.out.json")
        .add_test_vs_file("typechecker/binary/divide_eq_error.1.abra", "typechecker/binary/divide_eq_error.1.out")
        .add_test_vs_file("typechecker/binary/divide_eq_error.2.abra", "typechecker/binary/divide_eq_error.2.out")
        .add_test_vs_file("typechecker/binary/divide_eq_error.3.abra", "typechecker/binary/divide_eq_error.3.out")
        .add_test_vs_file("typechecker/binary/minus_eq.abra", "typechecker/binary/minus_eq.out.json")
        .add_test_vs_file("typechecker/binary/minus_eq_error.1.abra", "typechecker/binary/minus_eq_error.1.out")
        .add_test_vs_file("typechecker/binary/minus_eq_error.2.abra", "typechecker/binary/minus_eq_error.2.out")
        .add_test_vs_file("typechecker/binary/mod_eq.abra", "typechecker/binary/mod_eq.out.json")
        .add_test_vs_file("typechecker/binary/mod_eq_error.1.abra", "typechecker/binary/mod_eq_error.1.out")
        .add_test_vs_file("typechecker/binary/mod_eq_error.2.abra", "typechecker/binary/mod_eq_error.2.out")
        .add_test_vs_file("typechecker/binary/or_eq.abra", "typechecker/binary/or_eq.out.json")
        .add_test_vs_file("typechecker/binary/or_eq_error.1.abra", "typechecker/binary/or_eq_error.1.out")
        .add_test_vs_file("typechecker/binary/or_eq_error.2.abra", "typechecker/binary/or_eq_error.2.out")
        .add_test_vs_file("typechecker/binary/plus_eq.abra", "typechecker/binary/plus_eq.out.json")
        .add_test_vs_file("typechecker/binary/plus_eq_error.1.abra", "typechecker/binary/plus_eq_error.1.out")
        .add_test_vs_file("typechecker/binary/plus_eq_error.2.abra", "typechecker/binary/plus_eq_error.2.out")
        .add_test_vs_file("typechecker/binary/times_eq.abra", "typechecker/binary/times_eq.out.json")
        .add_test_vs_file("typechecker/binary/times_eq_error.1.abra", "typechecker/binary/times_eq_error.1.out")
        .add_test_vs_file("typechecker/binary/times_eq_error.2.abra", "typechecker/binary/times_eq_error.2.out")

        // Identifier
        .add_test_vs_file("typechecker/identifier/identifier.abra", "typechecker/identifier/identifier.out.json")
        .add_test_vs_file("typechecker/identifier/identifier_transform_OptionNone.abra", "typechecker/identifier/identifier_transform_OptionNone.out.json")
        .add_test_vs_file("typechecker/identifier/error_discard.abra", "typechecker/identifier/error_discard.out")
        .add_test_vs_file("typechecker/identifier/error_type_mismatch.abra", "typechecker/identifier/error_type_mismatch.out")
        .add_test_vs_file("typechecker/identifier/error_type_mismatch_None.abra", "typechecker/identifier/error_type_mismatch_None.out")
        .add_test_vs_file("typechecker/identifier/error_unknown_ident.abra", "typechecker/identifier/error_unknown_ident.out")
        // Array
        .add_test_vs_file("typechecker/array/array.abra", "typechecker/array/array.out.json")
        .add_test_vs_file("typechecker/array/error_bindingdecl_empty.abra", "typechecker/array/error_bindingdecl_empty.out")
        .add_test_vs_file("typechecker/array/error_type_mismatch_bindingdecl.1.abra", "typechecker/array/error_type_mismatch_bindingdecl.1.out")
        .add_test_vs_file("typechecker/array/error_type_mismatch_bindingdecl.2.abra", "typechecker/array/error_type_mismatch_bindingdecl.2.out")
        .add_test_vs_file("typechecker/array/error_type_mismatch_bindingdecl.3.abra", "typechecker/array/error_type_mismatch_bindingdecl.3.out")
        .add_test_vs_file("typechecker/array/error_type_mismatch_item.1.abra", "typechecker/array/error_type_mismatch_item.1.out")
        .add_test_vs_file("typechecker/array/error_type_mismatch_item.2.abra", "typechecker/array/error_type_mismatch_item.2.out")
        .add_test_vs_file("typechecker/array/error_type_mismatch_item.3.abra", "typechecker/array/error_type_mismatch_item.3.out")
        .add_test_vs_file("typechecker/array/error_type_mismatch_item.4.abra", "typechecker/array/error_type_mismatch_item.4.out")
        // Set
        .add_test_vs_file("typechecker/set/set.abra", "typechecker/set/set.out.json")
        .add_test_vs_file("typechecker/set/error_bindingdecl_empty.abra", "typechecker/set/error_bindingdecl_empty.out")
        .add_test_vs_file("typechecker/set/error_type_mismatch_bindingdecl.1.abra", "typechecker/set/error_type_mismatch_bindingdecl.1.out")
        .add_test_vs_file("typechecker/set/error_type_mismatch_bindingdecl.2.abra", "typechecker/set/error_type_mismatch_bindingdecl.2.out")
        .add_test_vs_file("typechecker/set/error_type_mismatch_bindingdecl.3.abra", "typechecker/set/error_type_mismatch_bindingdecl.3.out")
        .add_test_vs_file("typechecker/set/error_type_mismatch_item.1.abra", "typechecker/set/error_type_mismatch_item.1.out")
        .add_test_vs_file("typechecker/set/error_type_mismatch_item.2.abra", "typechecker/set/error_type_mismatch_item.2.out")
        .add_test_vs_file("typechecker/set/error_type_mismatch_item.3.abra", "typechecker/set/error_type_mismatch_item.3.out")
        .add_test_vs_file("typechecker/set/error_type_mismatch_item.4.abra", "typechecker/set/error_type_mismatch_item.4.out")
        // Map
        .add_test_vs_file("typechecker/map/map.abra", "typechecker/map/map.out.json")
        .add_test_vs_file("typechecker/map/error_bindingdecl_empty.abra", "typechecker/map/error_bindingdecl_empty.out")
        .add_test_vs_file("typechecker/map/error_type_mismatch_bindingdecl.1.abra", "typechecker/map/error_type_mismatch_bindingdecl.1.out")
        .add_test_vs_file("typechecker/map/error_type_mismatch_bindingdecl.2.abra", "typechecker/map/error_type_mismatch_bindingdecl.2.out")
        .add_test_vs_file("typechecker/map/error_type_mismatch_bindingdecl.3.abra", "typechecker/map/error_type_mismatch_bindingdecl.3.out")
        .add_test_vs_file("typechecker/map/error_type_mismatch_bindingdecl.4.abra", "typechecker/map/error_type_mismatch_bindingdecl.4.out")
        .add_test_vs_file("typechecker/map/error_type_mismatch_key.1.abra", "typechecker/map/error_type_mismatch_key.1.out")
        .add_test_vs_file("typechecker/map/error_type_mismatch_value.1.abra", "typechecker/map/error_type_mismatch_value.1.out")
        .add_test_vs_file("typechecker/map/error_type_mismatch_value.2.abra", "typechecker/map/error_type_mismatch_value.2.out")
        .add_test_vs_file("typechecker/map/error_unfilled_holes.1.abra", "typechecker/map/error_unfilled_holes.1.out")
        .add_test_vs_file("typechecker/map/error_unfilled_holes.2.abra", "typechecker/map/error_unfilled_holes.2.out")
        // Tuple
        .add_test_vs_file("typechecker/tuple/tuple.abra", "typechecker/tuple/tuple.out.json")
        .add_test_vs_file("typechecker/tuple/error_type_mismatch.1.abra", "typechecker/tuple/error_type_mismatch.1.out")
        .add_test_vs_file("typechecker/tuple/error_type_mismatch.2.abra", "typechecker/tuple/error_type_mismatch.2.out")
        .add_test_vs_file("typechecker/tuple/error_type_mismatch_too_big.1.abra", "typechecker/tuple/error_type_mismatch_too_big.1.out")
        .add_test_vs_file("typechecker/tuple/error_type_mismatch_too_big.2.abra", "typechecker/tuple/error_type_mismatch_too_big.2.out")
        .add_test_vs_file("typechecker/tuple/error_type_mismatch_too_small.1.abra", "typechecker/tuple/error_type_mismatch_too_small.1.out")
        // Indexing
        .add_test_vs_file("typechecker/indexing/error_indexing_array_nullable.abra", "typechecker/indexing/error_indexing_array_nullable.out")
        .add_test_vs_file("typechecker/indexing/error_indexing_string_nullable.abra", "typechecker/indexing/error_indexing_string_nullable.out")
        .add_test_vs_file("typechecker/indexing/error_indexing_tuple_nullable.abra", "typechecker/indexing/error_indexing_tuple_nullable.out")
        .add_test_vs_file("typechecker/indexing/error_indexing_map_nullable.abra", "typechecker/indexing/error_indexing_map_nullable.out")
        .add_test_vs_file("typechecker/indexing/error_unindexable_type.1.abra", "typechecker/indexing/error_unindexable_type.1.out")
        .add_test_vs_file("typechecker/indexing/error_unindexable_type.2.abra", "typechecker/indexing/error_unindexable_type.2.out")
        .add_test_vs_file("typechecker/indexing/array_error_idx_non_int.abra", "typechecker/indexing/array_error_idx_non_int.out")
        .add_test_vs_file("typechecker/indexing/array_error_idx_nullable.abra", "typechecker/indexing/array_error_idx_nullable.out")
        .add_test_vs_file("typechecker/indexing/array_error_range_non_int.1.abra", "typechecker/indexing/array_error_range_non_int.1.out")
        .add_test_vs_file("typechecker/indexing/array_error_range_non_int.2.abra", "typechecker/indexing/array_error_range_non_int.2.out")
        .add_test_vs_file("typechecker/indexing/array_error_range_nullable.1.abra", "typechecker/indexing/array_error_range_nullable.1.out")
        .add_test_vs_file("typechecker/indexing/array_error_range_nullable.2.abra", "typechecker/indexing/array_error_range_nullable.2.out")
        .add_test_vs_file("typechecker/indexing/indexing_array.abra", "typechecker/indexing/indexing_array.out.json")
        .add_test_vs_file("typechecker/indexing/indexing_map.abra", "typechecker/indexing/indexing_map.out.json")
        .add_test_vs_file("typechecker/indexing/indexing_string.abra", "typechecker/indexing/indexing_string.out.json")
        .add_test_vs_file("typechecker/indexing/indexing_tuple.abra", "typechecker/indexing/indexing_tuple.out.json")
        .add_test_vs_file("typechecker/indexing/map_error_key_type_mismatch.abra", "typechecker/indexing/map_error_key_type_mismatch.out")
        .add_test_vs_file("typechecker/indexing/string_error_idx_non_int.abra", "typechecker/indexing/string_error_idx_non_int.out")
        .add_test_vs_file("typechecker/indexing/string_error_idx_nullable.abra", "typechecker/indexing/string_error_idx_nullable.out")
        .add_test_vs_file("typechecker/indexing/string_error_range_non_int.1.abra", "typechecker/indexing/string_error_range_non_int.1.out")
        .add_test_vs_file("typechecker/indexing/string_error_range_non_int.2.abra", "typechecker/indexing/string_error_range_non_int.2.out")
        .add_test_vs_file("typechecker/indexing/string_error_range_nullable.1.abra", "typechecker/indexing/string_error_range_nullable.1.out")
        .add_test_vs_file("typechecker/indexing/string_error_range_nullable.2.abra", "typechecker/indexing/string_error_range_nullable.2.out")
        .add_test_vs_file("typechecker/indexing/tuple_error_hole.abra", "typechecker/indexing/tuple_error_hole.out")
        .add_test_vs_file("typechecker/indexing/tuple_error_negative.abra", "typechecker/indexing/tuple_error_negative.out")
        .add_test_vs_file("typechecker/indexing/tuple_error_non_int_literal.abra", "typechecker/indexing/tuple_error_non_int_literal.out")
        .add_test_vs_file("typechecker/indexing/tuple_error_non_literal.abra", "typechecker/indexing/tuple_error_non_literal.out")
        .add_test_vs_file("typechecker/indexing/tuple_error_out_of_bounds.abra", "typechecker/indexing/tuple_error_out_of_bounds.out")
        .add_test_vs_file("typechecker/indexing/tuple_error_range.abra", "typechecker/indexing/tuple_error_range.out")
        .add_test_vs_file("typechecker/indexing/tuple_error_type_mismatch.abra", "typechecker/indexing/tuple_error_type_mismatch.out")
        // If expressions & statements
        .add_test_vs_file("typechecker/if/error_binding_invalid_destructuring_tuple.abra", "typechecker/if/error_binding_invalid_destructuring_tuple.out")
        .add_test_vs_file("typechecker/if/error_bad_cond_type.abra", "typechecker/if/error_bad_cond_type.out")
        .add_test_vs_file("typechecker/if/error_block_mismatch.1.abra", "typechecker/if/error_block_mismatch.1.out")
        .add_test_vs_file("typechecker/if/error_block_mismatch.2.abra", "typechecker/if/error_block_mismatch.2.out")
        .add_test_vs_file("typechecker/if/error_empty_else_block.abra", "typechecker/if/error_empty_else_block.out")
        .add_test_vs_file("typechecker/if/error_empty_if_block.abra", "typechecker/if/error_empty_if_block.out")
        .add_test_vs_file("typechecker/if/error_mismatch_bindingdecl.1.abra", "typechecker/if/error_mismatch_bindingdecl.1.out")
        .add_test_vs_file("typechecker/if/error_mismatch_bindingdecl.2.abra", "typechecker/if/error_mismatch_bindingdecl.2.out")
        .add_test_vs_file("typechecker/if/error_mismatch_bindingdecl.3.abra", "typechecker/if/error_mismatch_bindingdecl.3.out")
        .add_test_vs_file("typechecker/if/error_no_else_block.abra", "typechecker/if/error_no_else_block.out")
        .add_test_vs_file("typechecker/if/error_unfilled_holes_bindingdecl.1.abra", "typechecker/if/error_unfilled_holes_bindingdecl.1.out")
        .add_test_vs_file("typechecker/if/error_unfilled_holes_bindingdecl.2.abra", "typechecker/if/error_unfilled_holes_bindingdecl.2.out")
        .add_test_vs_file("typechecker/if/error_unfilled_holes_bindingdecl.3.abra", "typechecker/if/error_unfilled_holes_bindingdecl.3.out")
        .add_test_vs_file("typechecker/if/error_unfilled_holes_bindingdecl.4.abra", "typechecker/if/error_unfilled_holes_bindingdecl.4.out")
        .add_test_vs_file("typechecker/if/expr.abra", "typechecker/if/expr.out.json")
        .add_test_vs_file("typechecker/if/stmt.abra", "typechecker/if/stmt.out.json")
        // Match expressions & statements
        .add_test_vs_file("typechecker/match/match_expr.abra", "typechecker/match/match_expr.out.json")
        .add_test_vs_file("typechecker/match/match_stmt.abra", "typechecker/match/match_stmt.out.json")
        .add_test_vs_file("typechecker/match/match_Result.abra", "typechecker/match/match_Result.out.json")
        .add_test_vs_file("typechecker/match/match_expr_terminators.abra", "typechecker/match/match_expr_terminators.out.json")
        .add_test_vs_file("typechecker/match/error_expr_empty_block.abra", "typechecker/match/error_expr_empty_block.out")
        .add_test_vs_file("typechecker/match/error_unfilled_holes.1.abra", "typechecker/match/error_unfilled_holes.1.out")
        .add_test_vs_file("typechecker/match/error_alreadycovered_None.abra", "typechecker/match/error_alreadycovered_None.out")
        .add_test_vs_file("typechecker/match/error_duplicate_literal.abra", "typechecker/match/error_duplicate_literal.out")
        .add_test_vs_file("typechecker/match/error_invalid_else_type.abra", "typechecker/match/error_invalid_else_type.out")
        .add_test_vs_file("typechecker/match/error_nooverlap_None.abra", "typechecker/match/error_nooverlap_None.out")
        .add_test_vs_file("typechecker/match/error_nooverlap_literal.1.abra", "typechecker/match/error_nooverlap_literal.1.out")
        .add_test_vs_file("typechecker/match/error_nooverlap_literal.2.abra", "typechecker/match/error_nooverlap_literal.2.out")
        .add_test_vs_file("typechecker/match/error_alreadycovered_literal_after_type.1.abra", "typechecker/match/error_alreadycovered_literal_after_type.1.out")
        .add_test_vs_file("typechecker/match/error_alreadycovered_literal_after_type.2.abra", "typechecker/match/error_alreadycovered_literal_after_type.2.out")
        .add_test_vs_file("typechecker/match/error_duplicate_Enum_variant.abra", "typechecker/match/error_duplicate_Enum_variant.out")
        .add_test_vs_file("typechecker/match/error_exhaustive_Bool_literal.abra", "typechecker/match/error_exhaustive_Bool_literal.out")
        .add_test_vs_file("typechecker/match/error_exhaustive_Enum_variants.1.abra", "typechecker/match/error_exhaustive_Enum_variants.1.out")
        .add_test_vs_file("typechecker/match/error_exhaustive_Enum_variants.2.abra", "typechecker/match/error_exhaustive_Enum_variants.2.out")
        .add_test_vs_file("typechecker/match/error_exhaustive_after_else.abra", "typechecker/match/error_exhaustive_after_else.out")
        .add_test_vs_file("typechecker/match/error_exhaustive_type.1.abra", "typechecker/match/error_exhaustive_type.1.out")
        .add_test_vs_file("typechecker/match/error_exhaustive_type.2.abra", "typechecker/match/error_exhaustive_type.2.out")
        .add_test_vs_file("typechecker/match/error_nonexhaustive_literal.1.abra", "typechecker/match/error_nonexhaustive_literal.1.out")
        .add_test_vs_file("typechecker/match/error_nonexhaustive_literal.2.abra", "typechecker/match/error_nonexhaustive_literal.2.out")
        .add_test_vs_file("typechecker/match/error_nooverlap_Enum.abra", "typechecker/match/error_nooverlap_Enum.out")
        .add_test_vs_file("typechecker/match/error_nooverlap_Type.abra", "typechecker/match/error_nooverlap_Type.out")
        .add_test_vs_file("typechecker/match/error_destructuring_constant_variant.abra", "typechecker/match/error_destructuring_constant_variant.out")
        .add_test_vs_file("typechecker/match/error_destructuring_type.abra", "typechecker/match/error_destructuring_type.out")
        .add_test_vs_file("typechecker/match/error_destructuring_variant_duplicate_variable.1.abra", "typechecker/match/error_destructuring_variant_duplicate_variable.1.out")
        .add_test_vs_file("typechecker/match/error_destructuring_variant_duplicate_variable.2.abra", "typechecker/match/error_destructuring_variant_duplicate_variable.2.out")
        .add_test_vs_file("typechecker/match/error_destructuring_variant_too_few.abra", "typechecker/match/error_destructuring_variant_too_few.out")
        .add_test_vs_file("typechecker/match/error_destructuring_variant_too_many.abra", "typechecker/match/error_destructuring_variant_too_many.out")
        .add_test_vs_file("typechecker/match/error_forbidden_type_all_branches_never.abra", "typechecker/match/error_forbidden_type_all_branches_never.out")

        // Invocation
        .add_test_vs_file("typechecker/invocation/invocation.1.abra", "typechecker/invocation/invocation.1.out.json")
        .add_test_vs_file("typechecker/invocation/invocation.2.abra", "typechecker/invocation/invocation.2.out.json")
        .add_test_vs_file("typechecker/invocation/invocation.3.abra", "typechecker/invocation/invocation.3.out.json")
        .add_test_vs_file("typechecker/invocation/invocation.4.abra", "typechecker/invocation/invocation.4.out.json")
        .add_test_vs_file("typechecker/invocation/invocation.5.abra", "typechecker/invocation/invocation.5.out.json")
        .add_test_vs_file("typechecker/invocation/error_incorrect_label.abra", "typechecker/invocation/error_incorrect_label.out")
        .add_test_vs_file("typechecker/invocation/error_mixed_label_optional.abra", "typechecker/invocation/error_mixed_label_optional.out")
        .add_test_vs_file("typechecker/invocation/error_optional_param_type_mismatch.abra", "typechecker/invocation/error_optional_param_type_mismatch.out")
        .add_test_vs_file("typechecker/invocation/error_optional_param_unknown.abra", "typechecker/invocation/error_optional_param_unknown.out")
        .add_test_vs_file("typechecker/invocation/error_too_few_args.abra", "typechecker/invocation/error_too_few_args.out")
        .add_test_vs_file("typechecker/invocation/error_too_many_args.abra", "typechecker/invocation/error_too_many_args.out")
        .add_test_vs_file("typechecker/invocation/error_expr_illegal_label.abra", "typechecker/invocation/error_expr_illegal_label.out")
        .add_test_vs_file("typechecker/invocation/error_expr_not_callable.abra", "typechecker/invocation/error_expr_not_callable.out")
        .add_test_vs_file("typechecker/invocation/error_expr_too_few_args.abra", "typechecker/invocation/error_expr_too_few_args.out")
        .add_test_vs_file("typechecker/invocation/error_expr_too_many_args.abra", "typechecker/invocation/error_expr_too_many_args.out")
        .add_test_vs_file("typechecker/invocation/function_as_param.1.abra", "typechecker/invocation/function_as_param.1.out.json")
        .add_test_vs_file("typechecker/invocation/function_as_param.2.abra", "typechecker/invocation/function_as_param.2.out.json")
        .add_test_vs_file("typechecker/invocation/function_as_param.3.abra", "typechecker/invocation/function_as_param.3.out.json")
        .add_test_vs_file("typechecker/invocation/function_as_param_generic.abra", "typechecker/invocation/function_as_param_generic.out.json")
        .add_test_vs_file("typechecker/invocation/function_as_param_error_arity.abra", "typechecker/invocation/function_as_param_error_arity.out")
        .add_test_vs_file("typechecker/invocation/function_value.abra", "typechecker/invocation/function_value.out.json")
        .add_test_vs_file("typechecker/invocation/invocation_generics.1.abra", "typechecker/invocation/invocation_generics.1.out.json")
        .add_test_vs_file("typechecker/invocation/invocation_generics.2.abra", "typechecker/invocation/invocation_generics.2.out.json")
        .add_test_vs_file("typechecker/invocation/invocation_generics.3.abra", "typechecker/invocation/invocation_generics.3.out.json")
        .add_test_vs_file("typechecker/invocation/invocation_generics.4.abra", "typechecker/invocation/invocation_generics.4.out.json")
        .add_test_vs_file("typechecker/invocation/invocation_generics.5.abra", "typechecker/invocation/invocation_generics.5.out.json")
        .add_test_vs_file("typechecker/invocation/generics_error_inferred_from_ret.1.abra", "typechecker/invocation/generics_error_inferred_from_ret.1.out")
        .add_test_vs_file("typechecker/invocation/generics_error_inferred_from_ret.2.abra", "typechecker/invocation/generics_error_inferred_from_ret.2.out")
        .add_test_vs_file("typechecker/invocation/generics_error_type_mismatch.abra", "typechecker/invocation/generics_error_type_mismatch.out")
        .add_test_vs_file("typechecker/invocation/generics_error_unfilled_holes.abra", "typechecker/invocation/generics_error_unfilled_holes.out")
        .add_test_vs_file("typechecker/invocation/generics_given_error_type_mismatch.abra", "typechecker/invocation/generics_given_error_type_mismatch.out")
        .add_test_vs_file("typechecker/invocation/error_field_not_callable.abra", "typechecker/invocation/error_field_not_callable.out")
        .add_test_vs_file("typechecker/invocation/error_instantiation_generics.1.abra", "typechecker/invocation/error_instantiation_generics.1.out")
        .add_test_vs_file("typechecker/invocation/error_instantiation_generics.2.abra", "typechecker/invocation/error_instantiation_generics.2.out")
        .add_test_vs_file("typechecker/invocation/error_instantiation_missing_labels.abra", "typechecker/invocation/error_instantiation_missing_labels.out")
        .add_test_vs_file("typechecker/invocation/error_instantiation_too_few_args.1.abra", "typechecker/invocation/error_instantiation_too_few_args.1.out")
        .add_test_vs_file("typechecker/invocation/error_instantiation_too_few_args.2.abra", "typechecker/invocation/error_instantiation_too_few_args.2.out")
        .add_test_vs_file("typechecker/invocation/error_enum_variant_constant.abra", "typechecker/invocation/error_enum_variant_constant.out")
        .add_test_vs_file("typechecker/invocation/invocation_arbitrary_expr.1.abra", "typechecker/invocation/invocation_arbitrary_expr.1.out.json")
        .add_test_vs_file("typechecker/invocation/invocation_arbitrary_expr.2.abra", "typechecker/invocation/invocation_arbitrary_expr.2.out.json")
        .add_test_vs_file("typechecker/invocation/invocation_field.abra", "typechecker/invocation/invocation_field.out.json")
        .add_test_vs_file("typechecker/invocation/invocation_instantiation.1.abra", "typechecker/invocation/invocation_instantiation.1.out.json")
        .add_test_vs_file("typechecker/invocation/invocation_instantiation_generics.1.abra", "typechecker/invocation/invocation_instantiation_generics.1.out.json")
        .add_test_vs_file("typechecker/invocation/invocation_instantiation_generics.2.abra", "typechecker/invocation/invocation_instantiation_generics.2.out.json")
        .add_test_vs_file("typechecker/invocation/invocation_method.1.abra", "typechecker/invocation/invocation_method.1.out.json")
        .add_test_vs_file("typechecker/invocation/invocation_method.2.abra", "typechecker/invocation/invocation_method.2.out.json")
        .add_test_vs_file("typechecker/invocation/generics_error_method.1.abra", "typechecker/invocation/generics_error_method.1.out")
        .add_test_vs_file("typechecker/invocation/generics_error_method.2.abra", "typechecker/invocation/generics_error_method.2.out")
        .add_test_vs_file("typechecker/invocation/generics_error_field.1.abra", "typechecker/invocation/generics_error_field.1.out")
        .add_test_vs_file("typechecker/invocation/invocation_method_generics.1.abra", "typechecker/invocation/invocation_method_generics.1.out.json")
        .add_test_vs_file("typechecker/invocation/invocation_method_generics.2.abra", "typechecker/invocation/invocation_method_generics.2.out.json")
        .add_test_vs_file("typechecker/invocation/invocation_enum_variant.1.abra", "typechecker/invocation/invocation_enum_variant.1.out.json")
        .add_test_vs_file("typechecker/invocation/invocation_enum_variant.2.abra", "typechecker/invocation/invocation_enum_variant.2.out.json")
        .add_test_vs_file("typechecker/invocation/invocation_enum_variant.3.abra", "typechecker/invocation/invocation_enum_variant.3.out.json")
        .add_test_vs_file("typechecker/invocation/invocation_enum_variant.4.abra", "typechecker/invocation/invocation_enum_variant.4.out.json")
        .add_test_vs_file("typechecker/invocation/invocation_field_generics.1.abra", "typechecker/invocation/invocation_field_generics.1.out.json")
        .add_test_vs_file("typechecker/invocation/error_variadic_generic_type_mismatch.abra", "typechecker/invocation/error_variadic_generic_type_mismatch.out")
        .add_test_vs_file("typechecker/invocation/error_variadic_labeled_generic_type_mismatch.abra", "typechecker/invocation/error_variadic_labeled_generic_type_mismatch.out")
        .add_test_vs_file("typechecker/invocation/error_variadic_labeled_too_many_args.abra", "typechecker/invocation/error_variadic_labeled_too_many_args.out")
        .add_test_vs_file("typechecker/invocation/error_variadic_labeled_type_mismatch.abra", "typechecker/invocation/error_variadic_labeled_type_mismatch.out")
        .add_test_vs_file("typechecker/invocation/error_variadic_type_mismatch.abra", "typechecker/invocation/error_variadic_type_mismatch.out")
        .add_test_vs_file("typechecker/invocation/invocation_variadic.1.abra", "typechecker/invocation/invocation_variadic.1.out.json")
        .add_test_vs_file("typechecker/invocation/invocation_variadic.2.abra", "typechecker/invocation/invocation_variadic.2.out.json")
        // Accessor
        .add_test_vs_file("typechecker/accessor/accessor.1.abra", "typechecker/accessor/accessor.1.out.json")
        .add_test_vs_file("typechecker/accessor/accessor.2.abra", "typechecker/accessor/accessor.2.out.json")
        .add_test_vs_file("typechecker/accessor/accessor.3.abra", "typechecker/accessor/accessor.3.out.json")
        .add_test_vs_file("typechecker/accessor/error_unknown_field.abra", "typechecker/accessor/error_unknown_field.out")
        .add_test_vs_file("typechecker/accessor/error_unknown_field_fn.abra", "typechecker/accessor/error_unknown_field_fn.out")
        .add_test_vs_file("typechecker/accessor/error_unknown_field_opt_known.abra", "typechecker/accessor/error_unknown_field_opt_known.out")
        .add_test_vs_file("typechecker/accessor/error_unknown_field_opt_unknown.abra", "typechecker/accessor/error_unknown_field_opt_unknown.out")
        .add_test_vs_file("typechecker/accessor/error_unknown_field_unit.abra", "typechecker/accessor/error_unknown_field_unit.out")
        .add_test_vs_file("typechecker/accessor/error_unnecessary_optsafe.abra", "typechecker/accessor/error_unnecessary_optsafe.out")
        .add_test_vs_file("typechecker/accessor/error_unknown_field_chain_opt_known.abra", "typechecker/accessor/error_unknown_field_chain_opt_known.out")
        .add_test_vs_file("typechecker/accessor/error_unknown_field_chain_opt_unknown.abra", "typechecker/accessor/error_unknown_field_chain_opt_unknown.out")
        .add_test_vs_file("typechecker/accessor/error_static_member_referenced_by_instance.abra", "typechecker/accessor/error_static_member_referenced_by_instance.out")
        .add_test_vs_file("typechecker/accessor/accessor.4.abra", "typechecker/accessor/accessor.4.out.json")
        .add_test_vs_file("typechecker/accessor/error_unknown_enum_variant.1.abra", "typechecker/accessor/error_unknown_enum_variant.1.out")
        // Lambda
        .add_test_vs_file("typechecker/lambda/lambda.1.abra", "typechecker/lambda/lambda.1.out.json")
        .add_test_vs_file("typechecker/lambda/lambda.2.abra", "typechecker/lambda/lambda.2.out.json")
        .add_test_vs_file("typechecker/lambda/lambda_generic_inference.1.abra", "typechecker/lambda/lambda_generic_inference.1.out.json")
        .add_test_vs_file("typechecker/lambda/lambda_generic_inference.2.abra", "typechecker/lambda/lambda_generic_inference.2.out.json")
        .add_test_vs_file("typechecker/lambda/error_type_mismatch.1.abra", "typechecker/lambda/error_type_mismatch.1.out")
        .add_test_vs_file("typechecker/lambda/error_type_mismatch.2.abra", "typechecker/lambda/error_type_mismatch.2.out")
        .add_test_vs_file("typechecker/lambda/error_type_mismatch.3.abra", "typechecker/lambda/error_type_mismatch.3.out")
        .add_test_vs_file("typechecker/lambda/error_type_mismatch.4.abra", "typechecker/lambda/error_type_mismatch.4.out")
        .add_test_vs_file("typechecker/lambda/error_type_mismatch.5.abra", "typechecker/lambda/error_type_mismatch.5.out")
        .add_test_vs_file("typechecker/lambda/error_unknown_type_for_parameter.1.abra", "typechecker/lambda/error_unknown_type_for_parameter.1.out")
        .add_test_vs_file("typechecker/lambda/error_unknown_type_for_parameter.2.abra", "typechecker/lambda/error_unknown_type_for_parameter.2.out")
        .add_test_vs_file("typechecker/lambda/error_unknown_type_for_parameter.3.abra", "typechecker/lambda/error_unknown_type_for_parameter.3.out")

        // Type identifiers
        .add_test_vs_file("typechecker/typeidentifier/error_typearg_unknown.abra", "typechecker/typeidentifier/error_typearg_unknown.out")
        .add_test_vs_file("typechecker/typeidentifier/error_typeargs_missing.abra", "typechecker/typeidentifier/error_typeargs_missing.out")
        .add_test_vs_file("typechecker/typeidentifier/error_typeargs_too_few.abra", "typechecker/typeidentifier/error_typeargs_too_few.out")
        .add_test_vs_file("typechecker/typeidentifier/error_typeargs_too_many.abra", "typechecker/typeidentifier/error_typeargs_too_many.out")
        .add_test_vs_file("typechecker/typeidentifier/error_typeargs_unexpected.abra", "typechecker/typeidentifier/error_typeargs_unexpected.out")
        .add_test_vs_file("typechecker/typeidentifier/error_unknown_type.abra", "typechecker/typeidentifier/error_unknown_type.out")
        .add_test_vs_file("typechecker/typeidentifier/error_modalias_name_not_type.abra", "typechecker/typeidentifier/error_modalias_name_not_type.out")
        .add_test_vs_file("typechecker/typeidentifier/error_modalias_path_too_long.abra", "typechecker/typeidentifier/error_modalias_path_too_long.out")
        .add_test_vs_file("typechecker/typeidentifier/error_modalias_typeargs_missing.abra", "typechecker/typeidentifier/error_modalias_typeargs_missing.out")
        .add_test_vs_file("typechecker/typeidentifier/error_modalias_typeargs_too_few.abra", "typechecker/typeidentifier/error_modalias_typeargs_too_few.out")
        .add_test_vs_file("typechecker/typeidentifier/error_modalias_typeargs_too_many.abra", "typechecker/typeidentifier/error_modalias_typeargs_too_many.out")
        .add_test_vs_file("typechecker/typeidentifier/error_modalias_typeargs_unexpected.abra", "typechecker/typeidentifier/error_modalias_typeargs_unexpected.out")
        .add_test_vs_file("typechecker/typeidentifier/error_modalias_unknown_module.abra", "typechecker/typeidentifier/error_modalias_unknown_module.out")
        .add_test_vs_file("typechecker/typeidentifier/error_modalias_unknown_type.abra", "typechecker/typeidentifier/error_modalias_unknown_type.out")

        // Assignment
        .add_test_vs_file("typechecker/assignment/assignment_accessor.abra", "typechecker/assignment/assignment_accessor.out.json")
        .add_test_vs_file("typechecker/assignment/assignment_indexing.abra", "typechecker/assignment/assignment_indexing.out.json")
        .add_test_vs_file("typechecker/assignment/assignment_variable.abra", "typechecker/assignment/assignment_variable.out.json")
        .add_test_vs_file("typechecker/assignment/accessor_error_method.1.abra", "typechecker/assignment/accessor_error_method.1.out")
        .add_test_vs_file("typechecker/assignment/accessor_error_method.2.abra", "typechecker/assignment/accessor_error_method.2.out")
        .add_test_vs_file("typechecker/assignment/accessor_error_enum_variant.abra", "typechecker/assignment/accessor_error_enum_variant.out")
        .add_test_vs_file("typechecker/assignment/accessor_error_type_mismatch.1.abra", "typechecker/assignment/accessor_error_type_mismatch.1.out")
        .add_test_vs_file("typechecker/assignment/accessor_error_type_mismatch.2.abra", "typechecker/assignment/accessor_error_type_mismatch.2.out")
        .add_test_vs_file("typechecker/assignment/variable_error_alias_fn.abra", "typechecker/assignment/variable_error_alias_fn.out")
        .add_test_vs_file("typechecker/assignment/indexing_error_type_mismatch.1.abra", "typechecker/assignment/indexing_error_type_mismatch.1.out")
        .add_test_vs_file("typechecker/assignment/indexing_error_type_mismatch.2.abra", "typechecker/assignment/indexing_error_type_mismatch.2.out")
        .add_test_vs_file("typechecker/assignment/variable_error_alias_type.abra", "typechecker/assignment/variable_error_alias_type.out")
        .add_test_vs_file("typechecker/assignment/variable_error_immutable.abra", "typechecker/assignment/variable_error_immutable.out")
        .add_test_vs_file("typechecker/assignment/variable_error_type_mismatch.1.abra", "typechecker/assignment/variable_error_type_mismatch.1.out")
        .add_test_vs_file("typechecker/assignment/variable_error_type_mismatch.2.abra", "typechecker/assignment/variable_error_type_mismatch.2.out")
        .add_test_vs_file("typechecker/assignment/variable_error_unknown.abra", "typechecker/assignment/variable_error_unknown.out")

        // Break
        .add_test_vs_file("typechecker/break/break_as_expr.abra", "typechecker/break/break_as_expr.out.json")
        .add_test_vs_file("typechecker/break/error_location_module.abra", "typechecker/break/error_location_module.out")
        .add_test_vs_file("typechecker/break/error_location_module_func.abra", "typechecker/break/error_location_module_func.out")
        .add_test_vs_file("typechecker/break/error_location_module_if.abra", "typechecker/break/error_location_module_if.out")
        .add_test_vs_file("typechecker/break/error_unreachable_inside_while.abra", "typechecker/break/error_unreachable_inside_while.out")
        .add_test_vs_file("typechecker/break/error_unreachable_inside_for.abra", "typechecker/break/error_unreachable_inside_for.out")
        // Continue
        .add_test_vs_file("typechecker/continue/continue_as_expr.abra", "typechecker/continue/continue_as_expr.out.json")
        .add_test_vs_file("typechecker/continue/error_location_module.abra", "typechecker/continue/error_location_module.out")
        .add_test_vs_file("typechecker/continue/error_location_module_func.abra", "typechecker/continue/error_location_module_func.out")
        .add_test_vs_file("typechecker/continue/error_location_module_if.abra", "typechecker/continue/error_location_module_if.out")
        .add_test_vs_file("typechecker/continue/error_unreachable_inside_while.abra", "typechecker/continue/error_unreachable_inside_while.out")
        .add_test_vs_file("typechecker/continue/error_unreachable_inside_for.abra", "typechecker/continue/error_unreachable_inside_for.out")
        // While
        .add_test_vs_file("typechecker/while/while.1.abra", "typechecker/while/while.1.out.json")
        .add_test_vs_file("typechecker/while/while.2.abra", "typechecker/while/while.2.out.json")
        .add_test_vs_file("typechecker/while/while.3.abra", "typechecker/while/while.3.out.json")
        .add_test_vs_file("typechecker/while/while.4.abra", "typechecker/while/while.4.out.json")
        .add_test_vs_file("typechecker/while/error_bad_cond_type.abra", "typechecker/while/error_bad_cond_type.out")
        .add_test_vs_file("typechecker/while/error_condition_invalid_destructuring_tuple.abra", "typechecker/while/error_condition_invalid_destructuring_tuple.out")

        // For
        .add_test_vs_file("typechecker/for/for.1.abra", "typechecker/for/for.1.out.json")
        .add_test_vs_file("typechecker/for/for.2.abra", "typechecker/for/for.2.out.json")
        .add_test_vs_file("typechecker/for/for.3.abra", "typechecker/for/for.3.out.json")
        .add_test_vs_file("typechecker/for/error_bad_iterator_option_type.abra", "typechecker/for/error_bad_iterator_option_type.out")
        .add_test_vs_file("typechecker/for/error_bad_iterator.abra", "typechecker/for/error_bad_iterator.out")
        .add_test_vs_file("typechecker/for/error_bad_iterator_unfilled_hole.abra", "typechecker/for/error_bad_iterator_unfilled_hole.out")
        .add_test_vs_file("typechecker/for/error_duplicate_ident.abra", "typechecker/for/error_duplicate_ident.out")
        .add_test_vs_file("typechecker/for/error_iteratee_invalid_destructuring_tuple.abra", "typechecker/for/error_iteratee_invalid_destructuring_tuple.out")
        // Binding declaration
        .add_test_vs_file("typechecker/bindingdecl/bindingdecl.abra", "typechecker/bindingdecl/bindingdecl.out.json")
        .add_test_vs_file("typechecker/bindingdecl/bindingdecl_exported.abra", "typechecker/bindingdecl/bindingdecl_exported.out.json")
        .add_test_vs_file("typechecker/bindingdecl/error_bare_var.abra", "typechecker/bindingdecl/error_bare_var.out")
        .add_test_vs_file("typechecker/bindingdecl/error_duplicate_name.abra", "typechecker/bindingdecl/error_duplicate_name.out")
        .add_test_vs_file("typechecker/bindingdecl/error_invalid_destructuring_tuple_non_tuple.1.abra", "typechecker/bindingdecl/error_invalid_destructuring_tuple_non_tuple.1.out")
        .add_test_vs_file("typechecker/bindingdecl/error_invalid_destructuring_tuple_non_tuple.2.abra", "typechecker/bindingdecl/error_invalid_destructuring_tuple_non_tuple.2.out")
        .add_test_vs_file("typechecker/bindingdecl/error_invalid_destructuring_tuple_non_tuple.3.abra", "typechecker/bindingdecl/error_invalid_destructuring_tuple_non_tuple.3.out")
        .add_test_vs_file("typechecker/bindingdecl/error_invalid_destructuring_tuple_too_few.1.abra", "typechecker/bindingdecl/error_invalid_destructuring_tuple_too_few.1.out")
        .add_test_vs_file("typechecker/bindingdecl/error_invalid_destructuring_tuple_too_few.2.abra", "typechecker/bindingdecl/error_invalid_destructuring_tuple_too_few.2.out")
        .add_test_vs_file("typechecker/bindingdecl/error_invalid_destructuring_tuple_too_many.1.abra", "typechecker/bindingdecl/error_invalid_destructuring_tuple_too_many.1.out")
        .add_test_vs_file("typechecker/bindingdecl/error_invalid_destructuring_tuple_too_many.2.abra", "typechecker/bindingdecl/error_invalid_destructuring_tuple_too_many.2.out")
        .add_test_vs_file("typechecker/bindingdecl/error_type_mismatch_val_destructured_tuple.abra", "typechecker/bindingdecl/error_type_mismatch_val_destructured_tuple.out")
        .add_test_vs_file("typechecker/bindingdecl/error_uninitialized_val_destructured_tuple_no_annotation.abra", "typechecker/bindingdecl/error_uninitialized_val_destructured_tuple_no_annotation.out")
        .add_test_vs_file("typechecker/bindingdecl/error_uninitialized_val_destructured_tuple_with_annotation.abra", "typechecker/bindingdecl/error_uninitialized_val_destructured_tuple_with_annotation.out")
        .add_test_vs_file("typechecker/bindingdecl/error_uninitialized_val_no_annotation.abra", "typechecker/bindingdecl/error_uninitialized_val_no_annotation.out")
        .add_test_vs_file("typechecker/bindingdecl/error_uninitialized_val_with_annotation.abra", "typechecker/bindingdecl/error_uninitialized_val_with_annotation.out")
        .add_test_vs_file("typechecker/bindingdecl/error_type_mismatch_val.abra", "typechecker/bindingdecl/error_type_mismatch_val.out")
        .add_test_vs_file("typechecker/bindingdecl/error_type_mismatch_var.abra", "typechecker/bindingdecl/error_type_mismatch_var.out")
        .add_test_vs_file("typechecker/bindingdecl/error_type_mismatch_option.abra", "typechecker/bindingdecl/error_type_mismatch_option.out")
        .add_test_vs_file("typechecker/bindingdecl/error_unfilled_holes.abra", "typechecker/bindingdecl/error_unfilled_holes.out")
        .add_test_vs_file("typechecker/bindingdecl/error_illegal_value_type_enum.abra", "typechecker/bindingdecl/error_illegal_value_type_enum.out")
        .add_test_vs_file("typechecker/bindingdecl/error_illegal_value_type_enum_container_variant.abra", "typechecker/bindingdecl/error_illegal_value_type_enum_container_variant.out")
        .add_test_vs_file("typechecker/bindingdecl/error_illegal_value_type_type.abra", "typechecker/bindingdecl/error_illegal_value_type_type.out")
        .add_test_vs_file("typechecker/bindingdecl/error_export_bad_scope.abra", "typechecker/bindingdecl/error_export_bad_scope.out")
        // Function declaration
        .add_test_vs_file("typechecker/funcdecl/funcdecl.1.abra", "typechecker/funcdecl/funcdecl.1.out.json")
        .add_test_vs_file("typechecker/funcdecl/funcdecl.2.abra", "typechecker/funcdecl/funcdecl.2.out.json")
        .add_test_vs_file("typechecker/funcdecl/funcdecl.3.abra", "typechecker/funcdecl/funcdecl.3.out.json")
        .add_test_vs_file("typechecker/funcdecl/funcdecl.4.abra", "typechecker/funcdecl/funcdecl.4.out.json")
        .add_test_vs_file("typechecker/funcdecl/funcdecl.5.abra", "typechecker/funcdecl/funcdecl.5.out.json")
        .add_test_vs_file("typechecker/funcdecl/funcdecl.6.abra", "typechecker/funcdecl/funcdecl.6.out.json")
        .add_test_vs_file("typechecker/funcdecl/funcdecl.7.abra", "typechecker/funcdecl/funcdecl.7.out.json")
        .add_test_vs_file("typechecker/funcdecl/funcdecl_exported.abra", "typechecker/funcdecl/funcdecl_exported.out.json")
        .add_test_vs_file("typechecker/funcdecl/funcdecl_generics.abra", "typechecker/funcdecl/funcdecl_generics.out.json")
        .add_test_vs_file("typechecker/funcdecl/error_duplicate_func.abra", "typechecker/funcdecl/error_duplicate_func.out")
        .add_test_vs_file("typechecker/funcdecl/error_duplicate_param.abra", "typechecker/funcdecl/error_duplicate_param.out")
        .add_test_vs_file("typechecker/funcdecl/error_duplicate_variable.abra", "typechecker/funcdecl/error_duplicate_variable.out")
        .add_test_vs_file("typechecker/funcdecl/error_invalid_param_type.abra", "typechecker/funcdecl/error_invalid_param_type.out")
        .add_test_vs_file("typechecker/funcdecl/error_invalid_req_param_position.abra", "typechecker/funcdecl/error_invalid_req_param_position.out")
        .add_test_vs_file("typechecker/funcdecl/error_invalid_return_type.abra", "typechecker/funcdecl/error_invalid_return_type.out")
        .add_test_vs_file("typechecker/funcdecl/error_invalid_vararg_position.abra", "typechecker/funcdecl/error_invalid_vararg_position.out")
        .add_test_vs_file("typechecker/funcdecl/error_invalid_vararg_type.abra", "typechecker/funcdecl/error_invalid_vararg_type.out")
        .add_test_vs_file("typechecker/funcdecl/error_param_unfilled_holes.1.abra", "typechecker/funcdecl/error_param_unfilled_holes.1.out")
        .add_test_vs_file("typechecker/funcdecl/error_param_unfilled_holes.2.abra", "typechecker/funcdecl/error_param_unfilled_holes.2.out")
        .add_test_vs_file("typechecker/funcdecl/error_type_mismatch_param_default_value.1.abra", "typechecker/funcdecl/error_type_mismatch_param_default_value.1.out")
        .add_test_vs_file("typechecker/funcdecl/error_type_mismatch_param_default_value.2.abra", "typechecker/funcdecl/error_type_mismatch_param_default_value.2.out")
        .add_test_vs_file("typechecker/funcdecl/error_type_mismatch_param_default_value.3.abra", "typechecker/funcdecl/error_type_mismatch_param_default_value.3.out")
        .add_test_vs_file("typechecker/funcdecl/error_type_mismatch_param_default_value.4.abra", "typechecker/funcdecl/error_type_mismatch_param_default_value.4.out")
        .add_test_vs_file("typechecker/funcdecl/error_alias_type_mismatch.abra", "typechecker/funcdecl/error_alias_type_mismatch.out")
        .add_test_vs_file("typechecker/funcdecl/error_invalid_vararg_type_option.abra", "typechecker/funcdecl/error_invalid_vararg_type_option.out")
        .add_test_vs_file("typechecker/funcdecl/error_param_default_value_ident.abra", "typechecker/funcdecl/error_param_default_value_ident.out")
        .add_test_vs_file("typechecker/funcdecl/error_return_type_mismatch.abra", "typechecker/funcdecl/error_return_type_mismatch.out")
        .add_test_vs_file("typechecker/funcdecl/error_return_type_mismatch_empty.abra", "typechecker/funcdecl/error_return_type_mismatch_empty.out")
        .add_test_vs_file("typechecker/funcdecl/error_return_type_mismatch_stmt.abra", "typechecker/funcdecl/error_return_type_mismatch_stmt.out")
        .add_test_vs_file("typechecker/funcdecl/default_param_value_call.1.abra", "typechecker/funcdecl/default_param_value_call.1.out.json")
        .add_test_vs_file("typechecker/funcdecl/default_param_value_call.2.abra", "typechecker/funcdecl/default_param_value_call.2.out.json")
        .add_test_vs_file("typechecker/funcdecl/default_param_value_call.3.abra", "typechecker/funcdecl/default_param_value_call.3.out.json")
        .add_test_vs_file("typechecker/funcdecl/default_param_value_call.4.abra", "typechecker/funcdecl/default_param_value_call.4.out.json")
        .add_test_vs_file("typechecker/funcdecl/default_param_value_call.5.abra", "typechecker/funcdecl/default_param_value_call.5.out.json")
        .add_test_vs_file("typechecker/funcdecl/default_param_value_call.6.abra", "typechecker/funcdecl/default_param_value_call.6.out.json")
        .add_test_vs_file("typechecker/funcdecl/default_param_value_call.7.abra", "typechecker/funcdecl/default_param_value_call.7.out.json")
        .add_test_vs_file("typechecker/funcdecl/default_param_value_call.8.abra", "typechecker/funcdecl/default_param_value_call.8.out.json")
        .add_test_vs_file("typechecker/funcdecl/default_param_value_call.9.abra", "typechecker/funcdecl/default_param_value_call.9.out.json")
        .add_test_vs_file("typechecker/funcdecl/default_param_value_accessor.abra", "typechecker/funcdecl/default_param_value_accessor.out.json")
        .add_test_vs_file("typechecker/funcdecl/error_self_standalone.abra", "typechecker/funcdecl/error_self_standalone.out")
        .add_test_vs_file("typechecker/funcdecl/error_generics_param_type_mismatch.abra", "typechecker/funcdecl/error_generics_param_type_mismatch.out")
        .add_test_vs_file("typechecker/funcdecl/error_generics_return_type_mismatch.abra", "typechecker/funcdecl/error_generics_return_type_mismatch.out")
        .add_test_vs_file("typechecker/funcdecl/error_export_bad_scope.abra", "typechecker/funcdecl/error_export_bad_scope.out")

        // Type declaration
        .add_test_vs_file("typechecker/typedecl/typedecl_exported.abra", "typechecker/typedecl/typedecl_exported.out.json")
        .add_test_vs_file("typechecker/typedecl/typedecl.1.abra", "typechecker/typedecl/typedecl.1.out.json")
        .add_test_vs_file("typechecker/typedecl/typedecl.2.abra", "typechecker/typedecl/typedecl.2.out.json")
        .add_test_vs_file("typechecker/typedecl/error_duplicate_field.abra", "typechecker/typedecl/error_duplicate_field.out")
        .add_test_vs_file("typechecker/typedecl/error_method_bad_self_position.abra", "typechecker/typedecl/error_method_bad_self_position.out")
        .add_test_vs_file("typechecker/typedecl/error_field_initializer_type_mismatch.abra", "typechecker/typedecl/error_field_initializer_type_mismatch.out")
        .add_test_vs_file("typechecker/typedecl/error_invalid_eq_signature.1.abra", "typechecker/typedecl/error_invalid_eq_signature.1.out")
        .add_test_vs_file("typechecker/typedecl/error_invalid_eq_signature.2.abra", "typechecker/typedecl/error_invalid_eq_signature.2.out")
        .add_test_vs_file("typechecker/typedecl/error_invalid_hash_signature.abra", "typechecker/typedecl/error_invalid_hash_signature.out")
        .add_test_vs_file("typechecker/typedecl/error_invalid_tostring_signature.abra", "typechecker/typedecl/error_invalid_tostring_signature.out")
        .add_test_vs_file("typechecker/typedecl/error_duplicate_type_func.abra", "typechecker/typedecl/error_duplicate_type_func.out")
        .add_test_vs_file("typechecker/typedecl/error_duplicate_type_type.abra", "typechecker/typedecl/error_duplicate_type_type.out")
        .add_test_vs_file("typechecker/typedecl/error_duplicate_type_enum.abra", "typechecker/typedecl/error_duplicate_type_enum.out")
        // Enum declaration
        .add_test_vs_file("typechecker/enumdecl/enumdecl_exported.abra", "typechecker/enumdecl/enumdecl_exported.out.json")
        .add_test_vs_file("typechecker/enumdecl/enumdecl.1.abra", "typechecker/enumdecl/enumdecl.1.out.json")
        .add_test_vs_file("typechecker/enumdecl/enumdecl_Result_shorthand.abra", "typechecker/enumdecl/enumdecl_Result_shorthand.out.json")
        .add_test_vs_file("typechecker/enumdecl/error_duplicate_enum_enum.abra", "typechecker/enumdecl/error_duplicate_enum_enum.out")
        .add_test_vs_file("typechecker/enumdecl/error_duplicate_enum_func.abra", "typechecker/enumdecl/error_duplicate_enum_func.out")
        .add_test_vs_file("typechecker/enumdecl/error_duplicate_enum_type.abra", "typechecker/enumdecl/error_duplicate_enum_type.out")
        .add_test_vs_file("typechecker/enumdecl/error_duplicate_variant.abra", "typechecker/enumdecl/error_duplicate_variant.out")
        .add_test_vs_file("typechecker/enumdecl/error_duplicate_variant_field.abra", "typechecker/enumdecl/error_duplicate_variant_field.out")
        .add_test_vs_file("typechecker/enumdecl/error_invalid_eq_signature.1.abra", "typechecker/enumdecl/error_invalid_eq_signature.1.out")
        .add_test_vs_file("typechecker/enumdecl/error_invalid_eq_signature.2.abra", "typechecker/enumdecl/error_invalid_eq_signature.2.out")
        .add_test_vs_file("typechecker/enumdecl/error_invalid_hash_signature.abra", "typechecker/enumdecl/error_invalid_hash_signature.out")
        .add_test_vs_file("typechecker/enumdecl/error_invalid_tostring_signature.abra", "typechecker/enumdecl/error_invalid_tostring_signature.out")
        .add_test_vs_file("typechecker/enumdecl/error_method_bad_self_position.abra", "typechecker/enumdecl/error_method_bad_self_position.out")
        .add_test_vs_file("typechecker/enumdecl/error_variant_field_initializer_type_mismatch.abra", "typechecker/enumdecl/error_variant_field_initializer_type_mismatch.out")

        // Returns
        .add_test_vs_file("typechecker/return/return.1.abra", "typechecker/return/return.1.out.json")
        .add_test_vs_file("typechecker/return/return.2.abra", "typechecker/return/return.2.out.json")
        .add_test_vs_file("typechecker/return/return.3.abra", "typechecker/return/return.3.out.json")
        .add_test_vs_file("typechecker/return/as_expr_error_never.abra", "typechecker/return/as_expr_error_never.out")
        .add_test_vs_file("typechecker/return/error_location.abra", "typechecker/return/error_location.out")
        .add_test_vs_file("typechecker/return/error_type_mismatch.abra", "typechecker/return/error_type_mismatch.out")
        .add_test_vs_file("typechecker/return/error_type_mismatch_unit.abra", "typechecker/return/error_type_mismatch_unit.out")
        .add_test_vs_file("typechecker/return/error_unreachable_stmt_plain.abra", "typechecker/return/error_unreachable_stmt_plain.out")
        .add_test_vs_file("typechecker/return/error_unreachable_stmt_if_inside.abra", "typechecker/return/error_unreachable_stmt_if_inside.out")
        .add_test_vs_file("typechecker/return/error_unreachable_stmt_if_outside.abra", "typechecker/return/error_unreachable_stmt_if_outside.out")
        .add_test_vs_file("typechecker/return/error_unreachable_stmt_match_inside.abra", "typechecker/return/error_unreachable_stmt_match_inside.out")
        .add_test_vs_file("typechecker/return/error_unreachable_stmt_match_outside.abra", "typechecker/return/error_unreachable_stmt_match_outside.out")
        .add_test_vs_file("typechecker/return/error_unreachable_stmt_while_inside.1.abra", "typechecker/return/error_unreachable_stmt_while_inside.1.out")
        .add_test_vs_file("typechecker/return/error_unreachable_stmt_while_inside.2.abra", "typechecker/return/error_unreachable_stmt_while_inside.2.out")
        .add_test_vs_file("typechecker/return/error_unreachable_stmt_while_outside.1.abra", "typechecker/return/error_unreachable_stmt_while_outside.1.out")
        .add_test_vs_file("typechecker/return/error_unreachable_stmt_while_outside.2.abra", "typechecker/return/error_unreachable_stmt_while_outside.2.out")
        .add_test_vs_file("typechecker/return/error_unreachable_stmt_for_inside.1.abra", "typechecker/return/error_unreachable_stmt_for_inside.1.out")
        .add_test_vs_file("typechecker/return/error_unreachable_stmt_for_inside.2.abra", "typechecker/return/error_unreachable_stmt_for_inside.2.out")
        .add_test_vs_file("typechecker/return/error_unreachable_stmt_for_outside.1.abra", "typechecker/return/error_unreachable_stmt_for_outside.1.out")
        .add_test_vs_file("typechecker/return/error_unreachable_stmt_for_outside.2.abra", "typechecker/return/error_unreachable_stmt_for_outside.2.out")

        // Imports
        .add_test_vs_file("typechecker/import/import.1.abra", "typechecker/import/import.1.out.json")
        .add_test_vs_file("typechecker/import/import.2.abra", "typechecker/import/import.2.out.json")
        .add_test_vs_file("typechecker/import/error_assignment_to_aliased_imported_variable.abra", "typechecker/import/error_assignment_to_aliased_imported_variable.out")
        .add_test_vs_file("typechecker/import/error_assignment_to_imported_variable.abra", "typechecker/import/error_assignment_to_imported_variable.out")

        .add_test_vs_file("typechecker/import/error_no_file_exists.abra", "typechecker/import/error_no_file_exists.out")
        .add_test_vs_file("typechecker/import/error_nonrelative_not_found.abra", "typechecker/import/error_nonrelative_not_found.out")
        .add_test_vs_file("typechecker/import/error_circular_dependency.1/mod.1.abra", "typechecker/import/error_circular_dependency.1/mod.1.out")
        .add_test_vs_file("typechecker/import/error_circular_dependency.2/mod.1.abra", "typechecker/import/error_circular_dependency.2/mod.1.out")
        .add_test_vs_file("typechecker/import/error_duplicate_import_name.1.abra", "typechecker/import/error_duplicate_import_name.1.out")
        .add_test_vs_file("typechecker/import/error_duplicate_import_name.2.abra", "typechecker/import/error_duplicate_import_name.2.out")
        .add_test_vs_file("typechecker/import/error_duplicate_variable_name.1.abra", "typechecker/import/error_duplicate_variable_name.1.out")
        .add_test_vs_file("typechecker/import/error_duplicate_variable_name.2.abra", "typechecker/import/error_duplicate_variable_name.2.out")
        .add_test_vs_file("typechecker/import/error_duplicate_func_name.1.abra", "typechecker/import/error_duplicate_func_name.1.out")
        .add_test_vs_file("typechecker/import/error_duplicate_func_name.2.abra", "typechecker/import/error_duplicate_func_name.2.out")
        .add_test_vs_file("typechecker/import/error_imported_value_type_mismatch.abra", "typechecker/import/error_imported_value_type_mismatch.out")
        .add_test_vs_file("typechecker/import/error_no_exported_value.abra", "typechecker/import/error_no_exported_value.out")
        .add_test_vs_file("typechecker/import/error_duplicate_enum_name.1.abra", "typechecker/import/error_duplicate_enum_name.1.out")
        .add_test_vs_file("typechecker/import/error_duplicate_enum_name.2.abra", "typechecker/import/error_duplicate_enum_name.2.out")
        .add_test_vs_file("typechecker/import/error_duplicate_enum_name.3.abra", "typechecker/import/error_duplicate_enum_name.3.out")
        .add_test_vs_file("typechecker/import/error_duplicate_enum_name.4.abra", "typechecker/import/error_duplicate_enum_name.4.out")
        .add_test_vs_file("typechecker/import/error_duplicate_func_name.3.abra", "typechecker/import/error_duplicate_func_name.3.out")
        .add_test_vs_file("typechecker/import/error_duplicate_func_name.4.abra", "typechecker/import/error_duplicate_func_name.4.out")
        .add_test_vs_file("typechecker/import/error_duplicate_import_name.3.abra", "typechecker/import/error_duplicate_import_name.3.out")
        .add_test_vs_file("typechecker/import/error_duplicate_import_name.4.abra", "typechecker/import/error_duplicate_import_name.4.out")
        .add_test_vs_file("typechecker/import/error_duplicate_type_name.1.abra", "typechecker/import/error_duplicate_type_name.1.out")
        .add_test_vs_file("typechecker/import/error_duplicate_type_name.2.abra", "typechecker/import/error_duplicate_type_name.2.out")
        .add_test_vs_file("typechecker/import/error_duplicate_type_name.3.abra", "typechecker/import/error_duplicate_type_name.3.out")
        .add_test_vs_file("typechecker/import/error_duplicate_type_name.4.abra", "typechecker/import/error_duplicate_type_name.4.out")
        .add_test_vs_file("typechecker/import/error_duplicate_variable_name.3.abra", "typechecker/import/error_duplicate_variable_name.3.out")
        .add_test_vs_file("typechecker/import/error_duplicate_variable_name.4.abra", "typechecker/import/error_duplicate_variable_name.4.out")
        .add_test_vs_file("typechecker/import/error_imported_type_mismatch.1.abra", "typechecker/import/error_imported_type_mismatch.1.out")
        .add_test_vs_file("typechecker/import/import_type_identifier.1.abra", "typechecker/import/import_type_identifier.1.out.json")
        .add_test_vs_file("typechecker/import/import_type_identifier.2.abra", "typechecker/import/import_type_identifier.2.out.json")
        .add_test_vs_file("typechecker/import/error_alias_duplicate_name.abra", "typechecker/import/error_alias_duplicate_name.out")
        .add_test_vs_file("typechecker/import/error_alias_questiondot_access.abra", "typechecker/import/error_alias_questiondot_access.out")
        .add_test_vs_file("typechecker/import/error_alias_unknown_import.abra", "typechecker/import/error_alias_unknown_import.out")

        .run_tests();
}

#[test]
fn compiler_tests() {
    let mut test_runner = TestRunner::compiler_test_runner()
        .add_test("compiler/ints.abra")
        .add_test("compiler/floats.abra")
        .add_test("compiler/bools.abra")
        .add_test("compiler/strings.abra")
        .add_test("compiler/arrays.abra")
        .add_test("compiler/functions.abra")
        .add_test("compiler/optionals.abra")
        .add_test("compiler/ifs.abra")
        .add_test("compiler/loops.abra")
        .add_test("compiler/types.abra")
        .add_test("compiler/enums.abra")
        .add_test("compiler/tuples.abra")
        .add_test("compiler/maps.abra")
        .add_test("compiler/sets.abra")
        .add_test("compiler/match.abra")
        .add_test_with_args_and_env("compiler/process.abra", &["-f", "bar", "--baz", "qux"], &[("FOO", "bar")]);

    test_runner = if cfg!(target_os = "linux") {
        test_runner.add_test("compiler/process_linux.abra")
    } else if cfg!(target_os = "macos") {
        test_runner.add_test("compiler/process_macos.abra")
    } else {
        unreachable!("unsupported operating system {}", std::env::consts::OS)
    };

    test_runner.run_tests();
}