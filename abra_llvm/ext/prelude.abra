predefined internal type String
predefined internal type Array<T>
predefined internal type Set<T>
predefined internal type Map<K, V>

internal type Int {
  internal func abs(self): Int
  internal func asBase(self, base: Int): String
  internal func isEven(self): Bool
  internal func isOdd(self): Bool
  internal func isBetween(self, lower: Int, upper: Int, inclusive = false): Bool
}

internal type Float {
  internal func floor(self): Int
  internal func ceil(self): Int
  internal func round(self): Int
  internal func withPrecision(self, precision: Int): Float
  internal func abs(self): Float
}

internal type Bool { /* internal */ }

internal type String {
  length: Int

  internal func toLower(self): String
  internal func toUpper(self): String
  internal func padLeft(self, totalSize: Int, padding = ""): String
  internal func trim(self): String
  internal func trimStart(self, pattern = ""): String
  internal func trimEnd(self, pattern = ""): String
  internal func split(self, splitter: String): String[]
  internal func splitAt(self, index: Int): (String, String)
  internal func lines(self): String[]
  internal func chars(self): String[]
  internal func parseInt(self, radix = 10): Int?
  internal func parseFloat(self): Float?
  internal func concat(self, str: Any, *others: Any[]): String
  internal func replaceAll(self, pattern: String, replacement: String): String
}

internal type Array<T> {
  size: Int

  internal func fill<T1>(amount: Int, value: T1): T1[]
  internal func fillBy<T1>(amount: Int, fn: (Int) => T1): T1[]

  internal func isEmpty(self): Bool
  internal func enumerate(self): (T, Int)[]
  internal func push(self, item: T, *others: T[])
  internal func pop(self): T?
  internal func popFront(self): T?
  internal func splitAt(self, index: Int): (T[], T[])
  internal func concat(self, other: T[]): T[]
  internal func map<U>(self, fn: (T) => U): U[]
  internal func filter(self, fn: (T) => Bool): T[]
  internal func reduce<U>(self, initialValue: U, fn: (U, T) => U): U
  internal func forEach(self, fn: (T) => Unit)
  internal func join(self, joiner = ""): String
  internal func contains(self, item: T): Bool
  internal func find<U>(self, fn: (T) => (Bool | U?)): T?
  internal func findIndex<U>(self, fn: (T) => (Bool | U?)): (T, Int)?
  internal func any<U>(self, fn: (T) => (Bool | U?)): Bool
  internal func all<U>(self, fn: (T) => (Bool | U?)): Bool
  internal func none<U>(self, fn: (T) => (Bool | U?)): Bool
  internal func sortBy(self, fn: (T) => Int, reverse = false): T[]
  internal func dedupe(self): T[]
  internal func dedupeBy<U>(self, fn: (T) => U): T[]
  internal func partition<U>(self, fn: (T) => U): Map<U, T[]>
  internal func tally(self): Map<T, Int>
  internal func tallyBy<U>(self, fn: (T) => U): Map<U, Int>
  internal func asSet(self): Set<T>
  internal func getOrDefault(self, key: Int, default: T): T
  internal func getOrElse(self, key: Int, fn: () => T): T
  internal func update(self, key: Int, fn: (T) => T)
  internal func reverse(self): T[]
}

internal type Set<T> {
  size: Int

  internal func isEmpty(self): Bool
  internal func enumerate(self): (T, Int)[]
  internal func contains(self, item: T): Bool
  internal func insert(self, item: T)
  internal func remove(self, item: T)
  internal func map<U>(self, fn: (T) => U): U[]
  internal func filter(self, fn: (T) => Bool): Set<T>
  internal func reduce<U>(self, initialValue: U, fn: (U, T) => U): U
  internal func asArray(self): T[]
  internal func union(self, other: Set<T>): Set<T>
  internal func difference(self, other: Set<T>): Set<T>
  internal func intersection(self, other: Set<T>): Set<T>
}

internal type Map<K, V> {
  size: Int

  internal func fromPairs<T1, T2>(pairs: (T1, T2)[]): Map<T1, T2>

  internal func isEmpty(self): Bool
  internal func enumerate(self): (K, V)[]
  internal func keys(self): Set<K>
  internal func values(self): V[]
  internal func entries(self): Set<(K, V)>
  internal func containsKey(self, key: K): Bool
  internal func mapValues<U>(self, fn: (K, V) => U): Map<K, U>
  internal func getOrDefault(self, key: K, default: V): V
  internal func getOrElse(self, key: K, fn: () => V): V
  internal func update(self, key: K, fn: (V) => V)
  internal func remove(self, key: K): V?
}
