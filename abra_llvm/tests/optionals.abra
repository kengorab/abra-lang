func f1(): Bool?[] = [None, true, false]
/// Expect: [None, true, false]
println(f1())

func f2(): String?[] = if true { ["one", None, "two"] } else []
/// Expect: [one, None, two]
println(f2())

val arr1: Int?[] = [1, None, 2, 3]
/// Expect: [1, None, 2, 3]
println(arr1)

val arr2: Int[]? = [1, 2, 3]
/// Expect: [1, 2, 3]
println(arr2)
val arr3: Int[]? = None
/// Expect: None
println(arr3)

type Foo {
  f: Int
}

val i: Int? = Foo(f: 178).f
/// Expect: 178
println(i)

// Workaround because optionals technically don't have _any_ directly-callable methods
func hash<T>(t: T): Int = t.hash()
// Hashes
(() => {
  val i: Int? = None
  /// Expect: 0
  println(hash(i))

  val x: Int? = 17
  /// Expect: true
  println(hash(x) == (17).hash())
})()

// == operator
(() => {
  // Test with primitive
  val i1: Int? = None
  val i2: Int? = 17
  val i3: Int? = 17
  val i4: Int? = 16

  /// Expect: false
  println(i1 == i2)
  /// Expect: false
  println(i2 == i4)
  /// Expect: true
  println(i2 == i3)

  // Test with object
  val s1: String? = None
  val s2: String? = "str"
  val s3: String? = "str"
  val s4: String? = "hmm"

  /// Expect: false
  println(s1 == s2)
  /// Expect: false
  println(s2 == s4)
  /// Expect: true
  println(s2 == s3)
})()

// Coalescing (?:)
(() => {
  val i1: Int? = None
  /// Expect: 17
  println(i1 ?: 17)

  val i2: Int? = 9
  /// Expect: 9
  println(i2 ?: 17)
})()

val xyz = "abc"
type TestOptChainingMethodInvocation {
  func unitMethod(self) = println("TestOptChainingMethodInvocation#unitMethod")
  func closure(self): Int = xyz.length
}

// Optional-chaining accessor
(() => {
  val arr = ["a", "b", "c", "d"]

  // Getting field of known-non-None value
  /// Expect: 4
  println(arr?.length)
  // Calling method of known-non-None value
  /// Expect: [a, b, c, d]
  println(arr?.toString())

  // Getting field of Option value
  /// Expect: 1
  println(arr[0]?.length)
  /// Expect: None
  println(arr[6]?.length)

  // Calling method of Option value
  /// Expect: false
  println(arr[0]?.isEmpty())
  /// Expect: None
  println(arr[6]?.isEmpty())

  // Calling unit method of Option value
  val t1: TestOptChainingMethodInvocation? = None
  t1?.unitMethod()
  val t2: TestOptChainingMethodInvocation? = TestOptChainingMethodInvocation()
  /// Expect: TestOptChainingMethodInvocation#unitMethod
  t2?.unitMethod()

  // Calling closure method of Option value
  val t3: TestOptChainingMethodInvocation? = None
  /// Expect: None
  println(t3?.closure())
  val t4: TestOptChainingMethodInvocation? = TestOptChainingMethodInvocation()
  /// Expect: 3
  println(t4?.closure())
})()
