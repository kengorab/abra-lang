type Person {
  name: String
  age: Int
}

val p1 = Person(name: "Ken", age: 31)
/// Expect: Ken
println(p1.name)
/// Expect: 31
println(p1.age)

// Test default toString method
/// Expect: Person(name: "Ken", age: 31)
println(p1)
/// Expect: Person(name: "Ken", age: 31)
println(p1.toString())
/// Expect: true
println(p1.hash() == Person(name: "Ken", age: 31).hash())
/// Expect: false
println(p1.hash() == Person(name: "Ken", age: 32).hash())

type Person2 {
  name: String
  age: Int

  func toString(self): String = "custom Person#toString method"
  func hash(self): Int = 0
}

val p2 = Person2(name: "Ken", age: 31)

// Test custom toString method
/// Expect: custom Person#toString method
println(p2)
/// Expect: custom Person#toString method
println(p2.toString())
/// Expect: 0
println(p2.hash())

// Fields with default values
type Foo {
  a: Int = 12
  b: String = ""
  c: Int[] = [1, 2, 3]
}

val f = Foo()
/// Expect: Foo(a: 12, b: "", c: [1, 2, 3])
println(f)
/// Expect: true
println(f.hash() == Foo().hash())

// Methods that capture variables
var capturedInt = 11
type FooWithCaptures {
  i: Int

  func foo(self): Int = self.i + capturedInt
  func foo2(self, a = capturedInt): Int = self.i + a
  func fooStatic(): Int = capturedInt
}

val fooWithCaptures = FooWithCaptures(i: 12)
/// Expect: 23
println(fooWithCaptures.foo())
capturedInt = 17
/// Expect: 29
println(fooWithCaptures.foo())

capturedInt = 17
/// Expect: 29
println(fooWithCaptures.foo2())
capturedInt = 17
/// Expect: 15
println(fooWithCaptures.foo2(3))
/// Expect: 17
println(FooWithCaptures.fooStatic())

capturedInt = 11
func wrapper() {
  val f = FooWithCaptures(i: 12)
  /// Expect: 23
  println(f.foo())
  /// Expect: 11
  println(FooWithCaptures.fooStatic())
}
wrapper()
