// When executed directly, this will perform typechecking and compilation, using qbe[^1] as a
// simple backend. This file assumes it'll be called via the top-level `abra` script in the
// directory above, as that script takes the output ssa file and runs it through qbe, and then
// through clang to produce a binary, and then executes that binary.
// Eventually, that wrapper script will be unnecessary, but there currently isn't a way to shell
// out from within Abra.
//
// This is split out into a separate runnable file so that the test-specific code is never compiled into
// the actual resulting binary; this results in a separate binary being compiled which is only used for
// testing.
//
// [^1] https://c9x.me/compile

import "fs" as fs
import getAbsolutePath from "./utils"
import ModuleLoader, Project, Typechecker, TypedModule from "./typechecker"
import Compiler from "./compiler"

func main() {
  val abraStdRoot = if Process.getEnvVar("ABRA_HOME") |v| v else {
    println("Could not find ABRA_HOME (make sure \$ABRA_HOME environment variable is set)")
    return
  }

  if Process.args()[1] |fileName| {
    val absPathSegs = getAbsolutePath(fileName)
    val filePathAbs = "/" + absPathSegs.join("/")

    val moduleLoader = ModuleLoader(stdRoot: abraStdRoot)
    val project = Project()
    val typechecker = Typechecker(moduleLoader: moduleLoader, project: project)

    val entryMod = match typechecker.typecheckEntrypoint(filePathAbs) {
      Err(e) => {
        println(e.getMessage())
        return
      }
      Ok(mod) => mod
    }

    val builder = match Compiler.compile(project, entryMod) {
      Ok(v) => v
      Err(e) => {
        println(e.getMessage())
        return
      }
    }

    // TODO: right now the code assumes that the output file and directory will exist prior to writing
    // to it. Instead, we should create the directory and file if we need to.
    val cwd = fs.getCurrentWorkingDirectory()
    val ssaOutPath = "$cwd/._abra/_main.ssa"
    val ssaOutFile = match fs.openFile(ssaOutPath, fs.AccessMode.WriteOnly) {
      Ok(v) => v
      Err(e) => {
        println(e)
        return
      }
    }
    builder.writeToFile(ssaOutFile)
  } else {
    println("Missing required argument <file-name>")
  }
}

main()
