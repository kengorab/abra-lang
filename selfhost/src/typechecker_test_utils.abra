import printTokenAsJson, printLabelAsJson, printBindingPatternAsJson from "./test_utils"
import LiteralAstNode, IdentifierKind from "./parser"
import Type, TypeKind, TypedModule, TypedAstNode, TypedAstNodeKind, Variable from "./typechecker"

export type Jsonifier {
  indentLevel: Int = 0

  func printModule(self, mod: TypedModule) {
    println("{")
    self.indentInc()

    self.println("\"id\": ${mod.id},")
    self.println("\"name\": \"${mod.name}\",")
    self.print("\"code\": ")
    self.printNodes(mod.code)
    println()

    self.indentDec()
    self.println("}")
  }

  func printNodes(self, nodes: TypedAstNode[]) {
    println("[")
    self.indentInc()

    for node, idx in nodes {
      self.indent()
      self.printNode(node)
      val comma = if idx != nodes.length - 1 "," else ""
      println(comma)
    }

    self.indentDec()
    self.print("]")
  }

  func printType(self, ty: Type) {
    println("{")
    self.indentInc()

    self.println("\"nullable\": ${ty.nullable},")
    match ty.kind {
      TypeKind.PrimitiveUnit => {
        self.println("\"kind\": \"primitive\",")
        self.println("\"primitive\": \"Unit\"")
      }
      TypeKind.PrimitiveInt => {
        self.println("\"kind\": \"primitive\",")
        self.println("\"primitive\": \"Int\"")
      }
      TypeKind.PrimitiveFloat => {
        self.println("\"kind\": \"primitive\",")
        self.println("\"primitive\": \"Float\"")
      }
      TypeKind.PrimitiveBool => {
        self.println("\"kind\": \"primitive\",")
        self.println("\"primitive\": \"Bool\"")
      }
      TypeKind.PrimitiveString => {
        self.println("\"kind\": \"primitive\",")
        self.println("\"primitive\": \"String\"")
      }
      TypeKind.Instance(struct, generics) => {
        self.println("\"kind\": \"instance\",")
        self.println("\"struct\": { \"moduleId\": ${struct.moduleId}, \"name\": \"${struct.name}\" },")
        self.print("\"typeParams\": ")
        self.array(generics, t => self.printType(t))
        println()
      }
      TypeKind.Hole => self.println("\"kind\": \"hole\"")
    }

    self.indentDec()
    self.print("}")
  }

  func printNode(self, node: TypedAstNode) {
    println("{")
    self.indentInc()

    self.print("\"token\": ")
    printTokenAsJson(node.token, 0, self.indentLevel)
    println(",")

    self.print("\"type\": ")
    self.printType(node.ty)
    println(",")

    self.println("\"node\": {")
    self.indentInc()
    match node.kind {
      TypedAstNodeKind.Literal(value) => {
        self.println("\"kind\": \"literal\",")
        match value {
          LiteralAstNode.Int(value) => self.println("\"value\": $value")
          LiteralAstNode.Float(value) => self.println("\"value\": $value")
          LiteralAstNode.Bool(value) => self.println("\"value\": $value")
          LiteralAstNode.String(value) => self.println("\"value\": \"$value\"")
        }
      }
      TypedAstNodeKind.Unary(op, expr) => {
        self.println("\"kind\": \"unary\",")
        self.println("\"op\": \"$op\",")
        self.print("\"expr\": ")
        self.printNode(expr)
        println()
      }
      // TypedAstNodeKind.Binary => { }
      TypedAstNodeKind.Grouped(inner) => {
        self.println("\"kind\": \"grouped\",")
        self.print("\"expr\": ")
        self.printNode(inner)
        println()
      }
      TypedAstNodeKind.Identifier(kind) => {
        self.println("\"kind\": \"identifier\",")

        val name = match kind {
          IdentifierKind.Named(name) => name
          IdentifierKind.Discard => "_"
          IdentifierKind.None_ => "None"
          IdentifierKind.Self => "self"
        }
        self.print("\"name\": \"$name\"")
        println()
      }
      TypedAstNodeKind.Array(items) => {
        self.println("\"kind\": \"array\",")

        self.print("\"items\": ")
        self.array(items, n => self.printNode(n))
        println()
      }
      TypedAstNodeKind.If(isStatement, condition, ifBlock, elseBlock) => {
        self.println("\"kind\": \"if\",")

        self.println("\"isStatement\": $isStatement,")

        self.print("\"condition\": ")
        self.printNode(condition)
        println(",")

        self.print("\"ifBlock\": ")
        self.array(ifBlock, n => self.printNode(n))
        println(",")

        self.print("\"elseBlock\": ")
        self.array(elseBlock, n => self.printNode(n))
        println()
      }

      // Statements
      TypedAstNodeKind.BindingDeclaration(node) => {
        self.println("\"kind\": \"bindingDeclaration\",")

        self.print("\"pattern\": ")
        printBindingPatternAsJson(node.bindingPattern, 0, self.indentLevel)
        println(",")

        self.print("\"variables\": ")
        self.array(node.variables, v => self.printVariable(v))
        println(",")

        self.print("\"expr\": ")
        self.opt(node.expr, n => self.printNode(n))
      }
    }
    self.indentDec()
    self.println("}")

    self.indentDec()
    self.print("}")
  }

  func printVariable(self, variable: Variable) {
    println("{")
    self.indentInc()

    self.print("\"label\": ")
    printLabelAsJson(variable.label)
    println(",")

    self.println("\"mutable\": ${variable.mutable},")

    self.print("\"type\": ")
    self.printType(variable.ty)
    println()

    self.indentDec()
    self.print("}")
  }

  func indent(self) = print("  ".repeat(self.indentLevel))

  func indentInc(self) = self.indentLevel += 1

  func indentDec(self) = self.indentLevel -= 1

  func print(self, str: String) {
    self.indent()
    print(str)
  }

  func println(self, str: String) {
    self.indent()
    println(str)
  }

  func array<T>(self, arr: T[], fn: (T) => Unit) {
    if arr.isEmpty() {
      print("[]")
    } else {
      println("[")
      self.indentInc()

      for item, idx in arr {
        self.indent()
        fn(item)

        val comma = if idx != arr.length - 1 "," else ""
        println(comma)
      }

      self.indentDec()
      self.print("]")
    }
  }

  func opt<T>(self, v: T?, fn: (T) => Unit) {
    if v |v| {
      fn(v)
      println()
    } else {
      println("null")
    }
  }
}