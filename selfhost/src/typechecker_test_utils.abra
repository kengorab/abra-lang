import LiteralAstNode, IndexingMode from "./parser"
import Type, TypeKind, TypedModule, TypedAstNode, TypedAstNodeKind, Variable, Function, Scope, Struct, Enum, StructOrEnum, AccessorPathSegment, TypedIdentifierKind, TypedInvokee, TypedIndexingNode, TypedAssignmentMode, Field, EnumVariantKind, Export, TypedMatchCaseKind from "./typechecker"
import printTokenAsJson, printLabelAsJson, printBindingPatternAsJson from "./test_utils"

export type Jsonifier {
  indentLevel: Int = 0

  func printModules(self, modules: TypedModule[]) {
    val manyModules = modules.length > 1

    if manyModules {
      println("[")
      self.indentInc()
    }

    for mod, idx in modules {
      self.indent()
      self.printModule(mod)
      if manyModules {
        if idx != modules.length - 1 {
          print(",")
        }
        println()
      }
    }

    if manyModules {
      self.indentDec()
      print("]")
    }

    println()
  }

  func printModule(self, mod: TypedModule) {
    println("{")
    self.indentInc()

    self.println("\"id\": ${mod.id},")
    self.println("\"name\": \"${mod.name}\",")

    if !mod.exports.isEmpty() {
      self.println("\"exports\": [")
      self.indentInc()

      for _e, idx in mod.exports {
        self.println("{")
        self.indentInc()

        // TODO: Destructuring
        val name = _e[0]
        val exp = _e[1]

        match exp {
          Export.Variable => self.println("\"kind\": \"variable\",")
          Export.Function => self.println("\"kind\": \"function\",")
          Export.Type => self.println("\"kind\": \"type\",")
        }
        self.println("\"name\": \"$name\"")

        self.indentDec()
        self.print("}")

        val comma = if idx != mod.exports.size - 1 "," else ""
        println(comma)
      }
      self.indentDec()
      self.println("],")
    }

    self.print("\"code\": ")
    self.printNodes(mod.code)
    println()

    self.indentDec()
    self.print("}")
  }

  func printNodes(self, nodes: TypedAstNode[]) {
    println("[")
    self.indentInc()

    for node, idx in nodes {
      self.indent()
      self.printNode(node)
      val comma = if idx != nodes.length - 1 "," else ""
      println(comma)
    }

    self.indentDec()
    self.print("]")
  }

  func printType(self, ty: Type) {
    println("{")
    self.indentInc()

    // self.println("\"nullable\": ${ty.nullable},")
    match ty.kind {
      TypeKind.Any => {
        self.println("\"kind\": \"primitive\",")
        self.println("\"primitive\": \"Any\"")
      }
      TypeKind.PrimitiveUnit => {
        self.println("\"kind\": \"primitive\",")
        self.println("\"primitive\": \"Unit\"")
      }
      TypeKind.PrimitiveInt => {
        self.println("\"kind\": \"primitive\",")
        self.println("\"primitive\": \"Int\"")
      }
      TypeKind.PrimitiveFloat => {
        self.println("\"kind\": \"primitive\",")
        self.println("\"primitive\": \"Float\"")
      }
      TypeKind.PrimitiveBool => {
        self.println("\"kind\": \"primitive\",")
        self.println("\"primitive\": \"Bool\"")
      }
      TypeKind.PrimitiveString => {
        self.println("\"kind\": \"primitive\",")
        self.println("\"primitive\": \"String\"")
      }
      TypeKind.Never => {
        self.println("\"kind\": \"never\"")
      }
      TypeKind.Generic(name) => {
        self.println("\"kind\": \"generic\",")
        self.println("\"name\": \"$name\"")
      }
      TypeKind.Instance(structOrEnum, generics) => {
        match structOrEnum {
          StructOrEnum.Struct(struct) => {
            self.println("\"kind\": \"instance\",")
            self.println("\"struct\": { \"moduleId\": ${struct.moduleId}, \"name\": \"${struct.label.name}\" },")
          }
          StructOrEnum.Enum(enum_) => {
            self.println("\"kind\": \"enumInstance\",")
            self.println("\"enum\": { \"moduleId\": ${enum_.moduleId}, \"name\": \"${enum_.label.name}\" },")
          }
        }
        self.print("\"typeParams\": ")
        self.array(generics, t => self.printType(t))
        println()
      }
      TypeKind.Tuple(types) => {
        self.println("\"kind\": \"tuple\",")
        self.print("\"types\": ")
        self.array(types, t => self.printType(t))
        println()
      }
      TypeKind.Func(params, ret) => {
        self.println("\"kind\": \"function\",")
        self.print("\"parameters\": ")
        self.array(params, p => {
          println("{")
          self.indentInc()

          self.println("\"required\": ${p[1]},")

          self.print("\"type\": ")
          self.printType(p[0])
          println()

          self.indentDec()
          self.print("}")
        })
        println(",")
        self.print("\"returnType\": ")
        self.printType(ret)
        println()
      }
      TypeKind.Type(structOrEnum) => {
        match structOrEnum {
          StructOrEnum.Struct(struct) => {
            self.println("\"kind\": \"struct\",")
            self.print("\"struct\": ")
            self.printStruct(struct: struct, abridged: true)
          }
          StructOrEnum.Enum(enum_) => {
            self.println("\"kind\": \"enum\",")
            self.print("\"enum\": ")
            self.printEnum(enum_: enum_, abridged: true)
          }
        }
        println()
      }
      TypeKind.Hole => self.println("\"kind\": \"hole\"")
    }

    self.indentDec()
    self.print("}")
  }

  func printStruct(self, struct: Struct, abridged: Bool) {
    if abridged {
      print("{ \"moduleId\": ${struct.moduleId}, \"name\": \"${struct.label.name}\" }")
      return
    }

    println("{")
    self.indentInc()

    self.println("\"moduleId\": ${struct.moduleId},")

    self.print("\"name\": ")
    printLabelAsJson(struct.label)
    println(",")

    self.print("\"typeParams\": ")
    self.array(struct.typeParams, p => print("\"$p\""))
    println(",")

    self.print("\"fields\": ")
    self.array(struct.fields, f => self.printField(f))
    println(",")

    self.print("\"instanceMethods\": ")
    self.array(struct.instanceMethods, m => self.printFunc(m))
    println(",")

    self.print("\"staticMethods\": ")
    self.array(struct.staticMethods, m => self.printFunc(m))
    println()

    self.indentDec()
    self.print("}")
  }

  func printField(self, field: Field) {
    println("{")
    self.indentInc()

    self.print("\"name\": ")
    printLabelAsJson(field.name)
    println(",")

    self.print("\"type\": ")
    self.printType(field.ty)
    println(",")

    self.print("\"initializer\": ")
    self.opt(field.initializer, n => self.printNode(n))
    println()

    self.indentDec()
    self.print("}")
  }

  func printEnum(self, enum_: Enum, abridged: Bool) {
    if abridged {
      print("{ \"moduleId\": ${enum_.moduleId}, \"name\": \"${enum_.label.name}\" }")
      return
    }

    println("{")
    self.indentInc()

    self.println("\"moduleId\": ${enum_.moduleId},")

    self.print("\"name\": ")
    printLabelAsJson(enum_.label)
    println(",")

    self.print("\"typeParams\": ")
    self.array(enum_.typeParams, p => print("\"$p\""))
    println(",")

    self.print("\"variants\": ")
    self.array(enum_.variants, v => {
      println("{")
      self.indentInc()

      self.print("\"label\": ")
      printLabelAsJson(v.label)
      println(",")

      match v.kind {
        EnumVariantKind.Constant => {
          self.println("\"kind\": \"constant\"")
        }
        EnumVariantKind.Container(fields) => {
          self.println("\"kind\": \"container\",")
          self.print("\"fields\": ")
          self.array(fields, f => self.printField(f))
          println()
        }
      }

      self.indentDec()
      self.print("}")
    })
    println(",")

    self.print("\"instanceMethods\": ")
    self.array(enum_.instanceMethods, m => self.printFunc(m))
    println(",")

    self.print("\"staticMethods\": ")
    self.array(enum_.staticMethods, m => self.printFunc(m))
    println()

    self.indentDec()
    self.print("}")
  }

  func printNode(self, node: TypedAstNode) {
    println("{")
    self.indentInc()

    self.print("\"token\": ")
    printTokenAsJson(node.token, 0, self.indentLevel)
    println(",")

    self.print("\"type\": ")
    self.printType(node.ty)
    println(",")

    self.print("\"node\": ")
    self.printNodeKind(node.kind)
    println()

    self.indentDec()
    self.print("}")
  }

  func printNodeKind(self, kind: TypedAstNodeKind) {
    println("{")
    self.indentInc()

    match kind {
      TypedAstNodeKind.Literal(value) => {
        self.println("\"kind\": \"literal\",")
        match value {
          LiteralAstNode.Int(value) => self.println("\"value\": $value")
          LiteralAstNode.Float(value) => self.println("\"value\": $value")
          LiteralAstNode.Bool(value) => self.println("\"value\": $value")
          LiteralAstNode.String(value) => self.println("\"value\": \"$value\"")
        }
      }
      TypedAstNodeKind.Unary(op, expr) => {
        self.println("\"kind\": \"unary\",")
        self.println("\"op\": \"$op\",")
        self.print("\"expr\": ")
        self.printNode(expr)
        println()
      }
      TypedAstNodeKind.Binary(left, op, right) => {
        self.println("\"kind\": \"binary\",")
        self.println("\"op\": \"$op\",")
        self.print("\"left\": ")
        self.printNode(left)
        println(",")
        self.print("\"right\": ")
        self.printNode(right)
        println()
      }
      TypedAstNodeKind.Grouped(inner) => {
        self.println("\"kind\": \"grouped\",")
        self.print("\"expr\": ")
        self.printNode(inner)
        println()
      }
      TypedAstNodeKind.Identifier(kind) => {
        self.println("\"kind\": \"identifier\",")

        val name = match kind {
          TypedIdentifierKind.Named(name) => name
          TypedIdentifierKind.Discard => "_"
          TypedIdentifierKind.None_ => "None"
        }
        self.print("\"name\": \"$name\"")
        println()
      }
      TypedAstNodeKind.Accessor(head, middle, tail) => {
        self.println("\"kind\": \"accessor\",")

        self.print("\"head\": ")
        self.printNode(head)
        println(",")

        self.print("\"middle\": ")
        self.array(middle, seg => {
          println("{")
          self.indentInc()

          match seg {
            AccessorPathSegment.EnumVariant(_, enum_, variant) => {
              self.println("\"kind\": \"enumVariant\",")
              self.println("\"name\": \"${enum_.label.name}.${variant.label.name}\"")
            }
            AccessorPathSegment.Method(_, f) => {
              self.println("\"kind\": \"method\",")
              self.println("\"name\": \"${f.label.name}\"")
            }
            AccessorPathSegment.Field(_, f) => {
              self.println("\"kind\": \"field\",")
              self.println("\"name\": \"${f.name.name}\"")
            }
          }

          self.indentDec()
          self.print("}")
        })
        println(",")

        self.println("\"tail\": {")
        self.indentInc()
        match tail {
          AccessorPathSegment.EnumVariant(_, enum_, variant) => {
            self.println("\"kind\": \"enumVariant\",")
            self.println("\"name\": \"${enum_.label.name}.${variant.label.name}\"")
          }
          AccessorPathSegment.Method(_, f) => {
            self.println("\"kind\": \"method\",")
            self.println("\"name\": \"${f.label.name}\"")
          }
          AccessorPathSegment.Field(_, f) => {
            self.println("\"kind\": \"field\",")
            self.println("\"name\": \"${f.name.name}\"")
          }
        }
        self.indentDec()
        self.println("}")
      }
      TypedAstNodeKind.Invocation(invokee, arguments) => {
        self.println("\"kind\": \"invocation\",")

        self.print("\"invokee\": ")
        match invokee {
          TypedInvokee.Struct(struct) => self.printStruct(struct: struct, abridged: true)
          TypedInvokee.Expr(expr) => self.printNode(expr)
          TypedInvokee.EnumVariant(enum_, variant) => print("\"${enum_.label.name}.${variant.label.name}\"")
        }
        println(",")

        self.print("\"arguments\": ")
        self.array(arguments, n => self.opt(n, n => self.printNode(n)))
        println()
      }
      TypedAstNodeKind.Array(items) => {
        self.println("\"kind\": \"array\",")

        self.print("\"items\": ")
        self.array(items, n => self.printNode(n))
        println()
      }
      TypedAstNodeKind.Set(items) => {
        self.println("\"kind\": \"set\",")

        self.print("\"items\": ")
        self.array(items, n => self.printNode(n))
        println()
      }
      TypedAstNodeKind.Map(pairs) => {
        self.println("\"kind\": \"map\",")

        self.print("\"pairs\": ")
        self.array(pairs, p => {
          self.array([p[0], p[1]], n => self.printNode(n))
        })
        println()
      }
      TypedAstNodeKind.Tuple(items) => {
        self.println("\"kind\": \"tuple\",")

        self.print("\"items\": ")
        self.array(items, n => self.printNode(n))
        println()
      }
      TypedAstNodeKind.Indexing(node) => {
        self.println("\"kind\": \"indexing\",")

        self.print("\"node\": ")
        self.printTypedIndexingNode(node)
        println()
      }
      TypedAstNodeKind.Lambda(fn) => {
        self.println("\"kind\": \"lambda\",")
        self.print("\"function\": ")
        self.printFunc(fn)
        println()
      }
      TypedAstNodeKind.Assignment(mode, op, expr) => {
        self.println("\"kind\": \"assignment\",")

        self.print("\"expr\": ")
        self.printNode(expr)
        println(",")

        self.println("\"op\": \"$op\",")

        self.print("\"mode\": ")

        match mode {
          TypedAssignmentMode.Variable(v) => {
            println("{")
            self.indentInc()

            self.println("\"kind\": \"variable\",")
            self.print("\"variable\": ")
            self.printVariable(v)
            println()

            self.indentDec()
            self.print("}")
            println()
          }
          TypedAssignmentMode.Indexing(typedIndexingNode) => {
            println("{")
            self.indentInc()

            self.println("\"kind\": \"indexing\",")
            self.print("\"indexNode\": ")
            self.printTypedIndexingNode(typedIndexingNode)
            println()

            self.indentDec()
            self.print("}")
            println()
          }
          TypedAssignmentMode.Accessor(head, mid, tail) => {
            self.printNodeKind(TypedAstNodeKind.Accessor(head, mid, tail))
            println()
          }
        }
      }
      TypedAstNodeKind.If(isStatement, condition, conditionBindingPattern, ifBlock, elseBlock) => {
        self.println("\"kind\": \"if\",")

        self.println("\"isStatement\": $isStatement,")

        self.print("\"condition\": ")
        self.printNode(condition)
        println(",")

        self.print("\"conditionBindingPattern\": ")
        self.opt(conditionBindingPattern, pair => {
          println("{")
          self.indentInc()

          self.print("\"bindingPattern\": ")
          printBindingPatternAsJson(pair[0], 0, self.indentLevel)
          println(",")

          self.print("\"variables\": ")
          self.array(pair[1], v => self.printVariable(v))
          println()

          self.indentDec()
          self.print("}")
        })
        println(",")

        self.print("\"ifBlock\": ")
        self.array(ifBlock, n => self.printNode(n))
        println(",")

        self.print("\"elseBlock\": ")
        self.array(elseBlock, n => self.printNode(n))
        println()
      }

      TypedAstNodeKind.Match(isStatement, subject, cases) => {
        self.println("\"kind\": \"match\",")

        self.println("\"isStatement\": $isStatement,")

        self.print("\"subject\": ")
        self.printNode(subject)
        println(",")

        self.print("\"cases\": ")
        self.array(cases, case => {
          println("{")
          self.indentInc()

          self.print("\"kind\": ")
          match case.kind {
            TypedMatchCaseKind.Literal(value) => {
              println("{")
              self.indentInc()

              self.println("\"kind\": \"literal\",")
              match value {
                LiteralAstNode.Int(value) => self.println("\"value\": $value")
                LiteralAstNode.Float(value) => self.println("\"value\": $value")
                LiteralAstNode.Bool(value) => self.println("\"value\": $value")
                LiteralAstNode.String(value) => self.println("\"value\": \"$value\"")
              }

              self.indentDec()
              self.print("}")
            }
            TypedMatchCaseKind.None_ => print("\"None\"")
            TypedMatchCaseKind.Else => print("\"else\"")
          }
          println(",")

          self.print("\"binding\": ")
          self.opt(case.binding, v => self.printVariable(v))
          println(",")

          self.print("\"body\": ")
          self.array(case.body, n => self.printNode(n))
          println()

          self.indentDec()
          self.print("}")
        })
        println()
      }

      // Statements
      TypedAstNodeKind.While(condition, conditionBindingPattern, block) => {
        self.println("\"kind\": \"while\",")

        self.print("\"condition\": ")
        self.printNode(condition)
        println(",")

        self.print("\"conditionBindingPattern\": ")
        self.opt(conditionBindingPattern, pair => {
          println("{")
          self.indentInc()

          self.print("\"bindingPattern\": ")
          printBindingPatternAsJson(pair[0], 0, self.indentLevel)
          println(",")

          self.print("\"variables\": ")
          self.array(pair[1], v => self.printVariable(v))
          println()

          self.indentDec()
          self.print("}")
        })
        println(",")

        self.print("\"block\": ")
        self.array(block, n => self.printNode(n))
        println()
      }
      TypedAstNodeKind.For(iterator, itemBindingPattern, indexBinding, block) => {
        self.println("\"kind\": \"for\",")

        self.print("\"iterator\": ")
        self.printNode(iterator)
        println(",")

        self.println("\"itemBindingPattern\": {")
        self.indentInc()
        self.print("\"bindingPattern\": ")
        printBindingPatternAsJson(itemBindingPattern[0], 0, self.indentLevel)
        println(",")
        self.print("\"variables\": ")
        self.array(itemBindingPattern[1], v => self.printVariable(v))
        println()
        self.indentDec()
        self.println("},")

        self.print("\"indexBinding\": ")
        self.opt(indexBinding, v => self.printVariable(v))
        println(",")

        self.print("\"block\": ")
        self.array(block, n => self.printNode(n))
        println()
      }
      TypedAstNodeKind.BindingDeclaration(node) => {
        self.println("\"kind\": \"bindingDeclaration\",")

        self.print("\"pattern\": ")
        printBindingPatternAsJson(node.bindingPattern, 0, self.indentLevel)
        println(",")

        self.print("\"variables\": ")
        self.array(node.variables, v => self.printVariable(v))
        println(",")

        self.print("\"expr\": ")
        self.opt(node.expr, n => self.printNode(n))
        println()
      }
      TypedAstNodeKind.FunctionDeclaration(fn) => {
        self.println("\"kind\": \"functionDeclaration\",")
        self.print("\"function\": ")
        self.printFunc(fn)
        println()
      }
      TypedAstNodeKind.TypeDeclaration(struct) => {
        self.println("\"kind\": \"typeDeclaration\",")
        self.print("\"struct\": ")
        self.printStruct(struct: struct, abridged: false)
        println()
      }
      TypedAstNodeKind.EnumDeclaration(enum_) => {
        self.println("\"kind\": \"enumDeclaration\",")
        self.print("\"enum\": ")
        self.printEnum(enum_: enum_, abridged: false)
        println()
      }
      TypedAstNodeKind.Break => {
        self.println("\"kind\": \"break\"")
      }
      TypedAstNodeKind.Continue => {
        self.println("\"kind\": \"continue\"")
      }
      TypedAstNodeKind.Return(expr) => {
        self.println("\"kind\": \"return\",")
        self.print("\"expr\": ")
        self.opt(expr, n => self.printNode(n))
        println()
      }
      TypedAstNodeKind.Placeholder => {
        self.println("ERROR: There should never be a Placeholder node emitted")
      }
    }

    self.indentDec()
    self.print("}")
  }

  func printVariable(self, variable: Variable) {
    println("{")
    self.indentInc()

    self.print("\"label\": ")
    printLabelAsJson(variable.label)
    println(",")

    self.println("\"mutable\": ${variable.mutable},")

    self.print("\"type\": ")
    self.printType(variable.ty)
    println()

    self.indentDec()
    self.print("}")
  }

  func printFunc(self, function: Function) {
    println("{")
    self.indentInc()

    self.print("\"label\": ")
    printLabelAsJson(function.label)
    println(",")

    self.print("\"scope\": ")
    self.printScope(function.scope)
    println(",")

    if function.isGenerated {
      self.println("\"isGenerated\": ${function.isGenerated},")
    }

    self.println("\"kind\": \"${function.kind}\",")

    self.print("\"typeParameters\": ")
    self.array(function.typeParams, typeParam => {
      println("{")
      self.indentInc()

      self.print("\"label\": ")
      printLabelAsJson(typeParam[1])
      println(",")

      self.print("\"type\": ")
      self.printType(typeParam[0])
      println()

      self.indentDec()
      self.print("}")
    })
    println(",")

    self.print("\"parameters\": ")
    self.array(function.params, param => {
      println("{")
      self.indentInc()

      self.print("\"label\": ")
      printLabelAsJson(param.label)
      println(",")

      self.print("\"type\": ")
      self.printType(param.ty)
      println(",")

      self.print("\"defaultValue\": ")
      self.opt(param.defaultValue, v => self.printNode(v))
      println(",")

      self.println("\"isVariadic\": ${param.isVariadic}")

      self.indentDec()
      self.print("}")
    })
    println(",")

    self.print("\"returnType\": ")
    self.printType(function.returnType)
    println(",")

    self.print("\"body\": ")
    self.array(function.body, n => self.printNode(n))
    println()

    self.indentDec()
    self.print("}")
  }

  func printScope(self, scope: Scope) {
    println("{")
    self.indentInc()

    self.println("\"name\": \"${scope.name}\",")

    self.print("\"variables\": ")
    self.array(scope.variables, v => self.printVariable(v))
    println(",")

    self.print("\"functions\": ")
    self.array(scope.functions, f => self.printFunc(f))
    println(",")

    self.print("\"types\": ")
    self.array(scope.types, t => self.printType(t))
    println()

    self.indentDec()
    self.print("}")
  }

  func printTypedIndexingNode(self, node: TypedIndexingNode) {
    println("{")
    self.indentInc()

    match node {
      TypedIndexingNode.ArrayLike(expr, indexingMode) => {
        self.println("\"kind\": \"arraylike\",")
        self.print("\"expr\": ")
        self.printNode(expr)
        println(",")

        match indexingMode {
          IndexingMode.Single(idxNode) => {
            self.print("\"index\": ")
            self.printNode(idxNode)
            println()
          }
          IndexingMode.Range(startNode, endNode) => {
            self.print("\"startIndex\": ")
            if startNode |n| self.printNode(n) else print("null")
            println(",")
            self.print("\"endIndex\": ")
            if endNode |n| self.printNode(n) else print("null")
            println()
          }
        }
      }
      TypedIndexingNode.Map(expr, idx) => {
        self.println("\"kind\": \"map\",")
        self.print("\"expr\": ")
        self.printNode(expr)
        println(",")
        self.print("\"index\": ")
        self.printNode(idx)
        println()
      }
      TypedIndexingNode.Tuple(expr, idx) => {
        self.println("\"kind\": \"tuple\",")
        self.println("\"index\": $idx,")
        self.print("\"expr\": ")
        self.printNode(expr)
        println()
      }
    }

    self.indentDec()
    self.print("}")
  }

  func indent(self) = print("  ".repeat(self.indentLevel))

  func indentInc(self) = self.indentLevel += 1

  func indentDec(self) = self.indentLevel -= 1

  func print(self, str: String) {
    self.indent()
    print(str)
  }

  func println(self, str: String) {
    self.indent()
    println(str)
  }

  func array<T>(self, arr: T[], fn: (T) => Unit) {
    if arr.isEmpty() {
      print("[]")
    } else {
      println("[")
      self.indentInc()

      for item, idx in arr {
        self.indent()
        fn(item)

        val comma = if idx != arr.length - 1 "," else ""
        println(comma)
      }

      self.indentDec()
      self.print("]")
    }
  }

  func opt<T>(self, v: T?, fn: (T) => Unit) {
    if v |v| {
      fn(v)
    } else {
      print("null")
    }
  }
}