import File from "fs"

export type ModuleBuilder {
  _data: QbeData[] = []
  _globalStrs: Map<String, Value> = {}
  _functions: QbeFunction[] = []
  _functionsByName: Map<String, QbeFunction> = {}

  func writeToFile(self, file: File) {
    for data, idx in self._data {
      data.encode(file)
      file.writeln()
    }
    if !self._data.isEmpty() { file.writeln() }

    for fn, idx in self._functions {
      fn.encode(file)
      if idx != self._functions.length - 1 { file.writeln()}
    }
  }

  func getFunction(self, name: String): QbeFunction? = self._functionsByName[name]

  func buildFunction(self, name: String, returnType: QbeType?, exported = false): QbeFunction {
    if self._functionsByName[name] |fn| return fn

    val start = Label(name: "start", offset: Some(0))
    val block = Block(name: name, body: [], labelsByLine: { (0): [start] }, _usedLabels: #{start}, _labelNames: { "start": 1 }, comments: {}, numLocals: 0)

    val fn = QbeFunction(exported: exported, name: name, returnType: returnType, _parameters: [], block: block, variadicIdx: None, _comments: [])
    self._functions.push(fn)
    self._functionsByName[name] = fn
    fn
  }

  func buildGlobalString(self, string: String, name: String? = None): Value {
    if self._globalStrs[string] |ptr| return ptr

    val dataName = name ?: "_${self._data.length}"
    val data = QbeData(name: dataName, align: None, kind: QbeDataKind.String(string))
    self._data.push(data)
    val ptr = Value.Global(dataName, QbeType.Pointer)
    self._globalStrs[string] = ptr

    ptr
  }
}

type QbeData {
  name: String
  align: Int? = None
  kind: QbeDataKind

  func encode(self, file: File) {
    file.write("data $")
    file.write(self.name)
    file.write(" =")
    if self.align |align| {
      file.write(" align ")
      file.write(align.toString())
    }
    file.write(" { ")
    self.kind.encode(file)
    file.write(" }")
  }
}

enum QbeDataKind {
  Zeros(size: Int)
  String(str: String)
  // others

  func encode(self, file: File) {
    match self {
      QbeDataKind.Zeros(size) => {
        file.write("z $size")
      }
      QbeDataKind.String(str) => {
        file.write("b \"$str\", b 0")
      }
    }
  }
}

export type Label {
  name: String
  offset: Int? = None
}

export type Block {
  name: String
  body: Instruction[] = []
  labelsByLine: Map<Int, Label[]> = {}
  _usedLabels: Set<Label> = #{}
  _labelNames: Map<String, Int> = {}
  comments: Map<Int, Set<String>> = {}
  numLocals: Int = 0

  func encode(self, file: File) {
    for instr, idx in self.body {
      if self.labelsByLine[idx] |labels| {
        for label in labels {
          file.writeln("@${label.name}")
        }
      }

      if self.comments[idx] |comments| {
        for comment in comments {
          file.writeln("  # $comment")
        }
      }

      file.write("  ")
      instr.encode(file)
    }
  }

  func append(self, instr: Instruction) {
    self.body.push(instr)
  }

  func verify(self): Result<Int, String> {
    val errors: String[] = []
    for label in self._usedLabels {
      if !label.offset {
        errors.push("Unregistered label @${label.name}")
      }
    }

    if errors.isEmpty() return Ok(0)

    val fmt = errors.map(e => "  - $e").join("\n")
    Err("Block ${self.name} failed verification:\n $fmt")
  }

  func _nextLocal(self): String {
    val name = "_${self.numLocals}"
    self.numLocals += 1
    name
  }

  func _addComment(self, comment: String, line = self.body.length) {
    if self.comments[line] |comments| comments.insert(comment)
    else self.comments[line] = #{comment}
  }

  func addComment(self, comment: String) = self._addComment(comment)

  // todo: ew
  func addCommentBefore(self, comment: String, numBack = 1) = self._addComment(comment, if self.body.length - numBack < 0 { 0 } else { self.body.length - numBack })

  func addLabel(self, name: String): Label {
    if self._labelNames[name] |count| {
      val l = Label(name: "${name}_$count")
      self._labelNames[name] = count + 1
      l
    } else {
      self._labelNames[name] = 1
      Label(name: name)
    }
  }

  func registerLabel(self, label: Label): Result<Label, String> {
    if label.offset |offset| return Err("Label ${label.name} already registered with offset $offset")

    val offset = self.body.length
    label.offset = Some(offset)
    if self.labelsByLine[offset] |labels| labels.push(label) else self.labelsByLine[offset] = [label]

    Ok(label)
  }

  // instruction builders

  func buildAdd(self, left: Value, right: Value, dst: String? = None): Result<Value, String> {
    val lty = left.ty()
    val rty = right.ty()
    val resTy = if lty.repr() != rty.repr() return Err("incompatible types for 'add' instruction: ${lty.repr()}, ${rty.repr()} ($left, $right)") else lty

    val dest = dst ?: self._nextLocal()
    val local = Value.Ident(dest, resTy)

    self.append(Instruction.Add(dst: Dest(name: local.repr(), ty: resTy), l: left, r: right))

    Ok(local)
  }

  func buildSub(self, left: Value, right: Value, dst: String? = None): Result<Value, String> {
    val lty = left.ty()
    val rty = right.ty()
    val resTy = if lty.repr() != rty.repr() return Err("incompatible types for 'sub' instruction: ${lty.repr()}, ${rty.repr()} ($left, $right)") else lty

    val dest = dst ?: self._nextLocal()
    val local = Value.Ident(dest, resTy)

    self.append(Instruction.Sub(dst: Dest(name: local.repr(), ty: resTy), l: left, r: right))

    Ok(local)
  }

  func buildMul(self, left: Value, right: Value, dst: String? = None): Result<Value, String> {
    val lty = left.ty()
    val rty = right.ty()
    val resTy = if lty.repr() != rty.repr() return Err("incompatible types for 'mul' instruction: ${lty.repr()}, ${rty.repr()} ($left, $right)") else lty

    val dest = dst ?: self._nextLocal()
    val local = Value.Ident(dest, resTy)

    self.append(Instruction.Mul(dst: Dest(name: local.repr(), ty: resTy), l: left, r: right))

    Ok(local)
  }

  func buildAndW(self, left: Value, right: Value, dst: String? = None): Result<Value, String> {
    val lty = left.ty()
    val rty = right.ty()
    val resTy = if lty.repr() != rty.repr() return Err("incompatible types for 'andw' instruction: ${lty.repr()}, ${rty.repr()} ($left, $right)") else lty

    val dest = dst ?: self._nextLocal()
    val local = Value.Ident(dest, resTy)

    self.append(Instruction.AndW(dst: Dest(name: local.repr(), ty: resTy), l: left, r: right))

    Ok(local)
  }

  func buildAlloc4(self, size: Int, dst: String? = None): Value {
    val dest = dst ?: self._nextLocal()
    val local = Value.Ident(dest, QbeType.Pointer)

    self.append(Instruction.Alloc4(dst: Dest(name: local.repr(), ty: QbeType.Pointer), size: size))

    local
  }

  func buildAlloc8(self, size: Int, dst: String? = None): Value {
    val dest = dst ?: self._nextLocal()
    val local = Value.Ident(dest, QbeType.Pointer)

    self.append(Instruction.Alloc8(dst: Dest(name: local.repr(), ty: QbeType.Pointer), size: size))

    local
  }

  func buildCompareEq(self, left: Value, right: Value, dst: String? = None): Result<Value, String> {
    val lty = left.ty()
    val rty = right.ty()
    val resTy = if lty.repr() != rty.repr() return Err("incompatible types for 'ceqw' instruction: ${lty.repr()}, ${rty.repr()} ($left, $right)") else lty

    val dest =  dst ?: self._nextLocal()
    val local = Value.Ident(dest, resTy)

    self.append(Instruction.CompareEq(dst: Dest(name: local.repr(), ty: resTy), l: left, r: right))

    Ok(local)
  }

  func buildCompareNeq(self, left: Value, right: Value, dst: String? = None): Result<Value, String> {
    val lty = left.ty()
    val rty = right.ty()
    val resTy = if lty.repr() != rty.repr() return Err("incompatible types for 'cnew' instruction: ${lty.repr()}, ${rty.repr()} ($left, $right)") else lty

    val dest =  dst ?: self._nextLocal()
    val local = Value.Ident(dest, resTy)

    self.append(Instruction.CompareNeq(dst: Dest(name: local.repr(), ty: resTy), l: left, r: right))

    Ok(local)
  }

  func buildCompareGte(self, left: Value, right: Value, dst: String? = None): Result<Value, String> {
    val lty = left.ty()
    val rty = right.ty()
    val resTy = if lty.repr() != rty.repr() return Err("incompatible types for 'csgel' instruction: ${lty.repr()}, ${rty.repr()} ($left, $right)") else lty

    val dest =  dst ?: self._nextLocal()
    val local = Value.Ident(dest, resTy)

    self.append(Instruction.CompareGte(dst: Dest(name: local.repr(), ty: resTy), l: left, r: right))

    Ok(local)
  }

  func buildLoad(self, ty: QbeType, mem: Value, dst: String? = None): Value {
    match ty {
      QbeType.U8 => self.buildLoadB(mem, dst)
      QbeType.U16 => self.buildLoadW(mem, dst)
      QbeType.U32 => self.buildLoadW(mem, dst)
      QbeType.U64 => self.buildLoadL(mem, dst)
      QbeType.Pointer => self.buildLoadL(mem, dst)
      QbeType.F32 => self.buildLoadS(mem, dst)
      QbeType.F64 => self.buildLoadD(mem, dst)
    }
  }

  func buildLoadB(self, mem: Value, dst: String? = None): Value {
    val dest = dst ?: self._nextLocal()
    val local = Value.Ident(dest, QbeType.U8)

    // TODO: condense these methods into one which automatically switches on the type of `value`
    self.append(Instruction.LoadB(dst: Dest(name: local.repr(), ty: QbeType.U8), mem: mem))

    local
  }

  func buildLoadW(self, mem: Value, dst: String? = None): Value {
    val dest = dst ?: self._nextLocal()
    val local = Value.Ident(dest, QbeType.U32)

    // TODO: condense these methods into one which automatically switches on the type of `value`
    self.append(Instruction.LoadW(dst: Dest(name: local.repr(), ty: QbeType.U32), mem: mem))

    local
  }

  func buildLoadL(self, mem: Value, dst: String? = None): Value {
    val dest = dst ?: self._nextLocal()
    val local = Value.Ident(dest, QbeType.U64)

    self.append(Instruction.LoadL(dst: Dest(name: local.repr(), ty: QbeType.U64), mem: mem))

    local
  }

  func buildLoadS(self, mem: Value, dst: String? = None): Value {
    val dest = dst ?: self._nextLocal()
    val local = Value.Ident(dest, QbeType.F32)

    self.append(Instruction.LoadS(dst: Dest(name: local.repr(), ty: QbeType.F32), mem: mem))

    local
  }

  func buildLoadD(self, mem: Value, dst: String? = None): Value {
    val dest = dst ?: self._nextLocal()
    val local = Value.Ident(dest, QbeType.F64)

    self.append(Instruction.LoadD(dst: Dest(name: local.repr(), ty: QbeType.F64), mem: mem))

    local
  }

  func buildStore(self, ty: QbeType, value: Value, mem: Value) {
    match ty {
      QbeType.U8 => self.buildStoreB(value, mem)
      QbeType.U16 => self.buildStoreW(value, mem)
      QbeType.U32 => self.buildStoreW(value, mem)
      QbeType.U64 => self.buildStoreL(value, mem)
      QbeType.Pointer => self.buildStoreL(value, mem)
      QbeType.F32 => self.buildStoreS(value, mem)
      QbeType.F64 => self.buildStoreD(value, mem)
    }
  }

  func buildStoreB(self, value: Value, mem: Value) {
    // TODO: condense these methods into one which automatically switches on the type of `value`
    self.append(Instruction.StoreB(value: value, mem: mem))
  }

  func buildStoreW(self, value: Value, mem: Value) {
    // TODO: condense these methods into one which automatically switches on the type of `value`
    self.append(Instruction.StoreW(value: value, mem: mem))
  }

  func buildStoreL(self, value: Value, mem: Value) {
    self.append(Instruction.StoreL(value: value, mem: mem))
  }

  func buildStoreS(self, value: Value, mem: Value) {
    self.append(Instruction.StoreS(value: value, mem: mem))
  }

  func buildStoreD(self, value: Value, mem: Value) {
    self.append(Instruction.StoreD(value: value, mem: mem))
  }

  func buildCall(self, fnValue: QbeFunction, arguments: Value[], dst: String? = None): Result<Value, String> {
    val dest = dst ?: self._nextLocal()
    val fnReturnType = if fnValue.returnType |ty| ty else {
      return Err("function value '${fnValue.name}' has no return type; cannot store result into destination '%$dest'")
    }

    val local = Value.Ident(dest, fnReturnType)

    val fnName = "\$${fnValue.name}"
    if fnValue.variadicIdx |idx| {
      self.append(Instruction.CallVarargs(dst: Some(Dest(name: local.repr(), ty: fnReturnType)), fn: fnName, varargsIdx: idx, args: arguments))
    } else {
      self.append(Instruction.Call(dst: Some(Dest(name: local.repr(), ty: fnReturnType)), fn: fnName, args: arguments))
    }

    Ok(local)
  }

  func buildCallRaw(self, fnName: String, returnType: QbeType, arguments: Value[], dst: String? = None): Result<Value, String> {
    val dest = dst ?: self._nextLocal()
    val local = Value.Ident(dest, returnType)

    self.append(Instruction.Call(dst: Some(Dest(name: local.repr(), ty: returnType)), fn: "\$$fnName", args: arguments))

    Ok(local)
  }

  func buildVoidCall(self, fnValue: QbeFunction, arguments: Value[]) {
    val fnName = "\$${fnValue.name}"
    if fnValue.variadicIdx |idx| {
      self.append(Instruction.CallVarargs(dst: None, fn: fnName, varargsIdx: idx, args: arguments))
    } else {
      self.append(Instruction.Call(dst: None, fn: fnName, args: arguments))
    }
  }

  func buildVoidCallRaw(self, fnName: String, arguments: Value[]) {
    self.append(Instruction.Call(dst: None, fn: "\$$fnName", args: arguments))
  }

  func buildPhi(self, cases: (Label, Value)[], dst: String? = None): Result<Value, String> {
    var ty = if cases[0] |_c| _c[1].ty() else return Err("phi requires at least 1 label")
    for case in cases {
      if ty != case[1].ty() return Err("phi case type mismatch: @${case[0].name} (type: ${case[1].ty()}) doesn't match previous (type: $ty)")

      self._usedLabels.insert(case[0])
    }

    val dest = dst ?: self._nextLocal()
    val local = Value.Ident(dest, ty)

    self.append(Instruction.Phi(dst: Dest(name: local.repr(), ty: ty), cases: cases))

    Ok(local)
  }

  func buildJmp(self, label: Label) {
    self._usedLabels.insert(label)
    self.append(Instruction.Jmp(label))
  }

  func buildJnz(self, cond: Value, ifNonZero: Label, ifZero: Label) {
    self._usedLabels.insert(ifNonZero)
    self._usedLabels.insert(ifZero)
    self.append(Instruction.Jnz(cond, ifNonZero, ifZero))
  }

  func buildReturn(self, value: Value? = None) {
    self.append(Instruction.Return(value))
  }
}

export enum QbeType {
  U8      // 'b'
  U16     // 'h'
  U32     // 'w'
  U64     // 'l'
  Pointer // 'l'
  F32     // 's'
  F64     // 'd'

  func size(self): Int {
    match self {
      QbeType.U8 => 1
      QbeType.U16 => 2
      QbeType.U32 => 4
      QbeType.U64 => 8
      QbeType.Pointer => 8
      QbeType.F32 => 4
      QbeType.F64 => 8
    }
  }

  func repr(self): String {
    match self {
      QbeType.U8 => "b"
      QbeType.U16 => "h"
      QbeType.U32 => "w"
      QbeType.U64 => "l"
      QbeType.Pointer => "l"
      QbeType.F32 => "s"
      QbeType.F64 => "d"
    }
  }

  func zeroValue(self): Value {
    match self {
      QbeType.U8 => Value.Int32(0)
      QbeType.U16 => Value.Int32(0)
      QbeType.U32 => Value.Int32(0)
      QbeType.U64 => Value.Int(0)
      QbeType.Pointer => Value.Int(0)
      QbeType.F32 => Value.Float(0.0)
      QbeType.F64 => Value.Float(0.0)
    }
  }

  func encode(self, file: File) {
    file.write(self.repr())
  }
}

export type QbeFunction {
  exported: Bool = false
  name: String
  block: Block,
  returnType: QbeType? = None
  _parameters: (String, QbeType)[] = []
  variadicIdx: Int? = None
  _comments: String[] = []

  func spec(name: String, returnType: QbeType? = None, parameters: (String, QbeType)[] = [], variadicIdx: Int? = None): QbeFunction {
    QbeFunction(name: name, block: Block(name: name), returnType: returnType, _parameters: parameters, variadicIdx: variadicIdx)
  }

  func encode(self, file: File) {
    for comment in self._comments {
      file.writeln("# $comment")
    }
    if self.exported file.write("export ")
    file.write("function ")
    self.returnType?.encode(file)
    file.write(" \$${self.name}")
    file.write("(")
    for param, idx in self._parameters {
      param[1].encode(file)
      file.write(" %${param[0]}")
      if idx != self._parameters.length - 1 {
        file.write(", ")
      }
    }
    file.write(")")
    file.writeln(" {")

    self.block.encode(file)

    file.writeln("}")
  }

  func addComment(self, comment: String) {
    self._comments.push(comment)
  }

  func addCommentMultiline(self, comment: String[]) {
    for line in comment self._comments.push(line)
  }

  func addParameter(self, name: String, ty: QbeType): Value {
    self._parameters.push((name, ty))
    Value.Ident(name, ty)
  }
}

export enum Value {
  Ident(name: String, ty: QbeType)
  Global(name: String, ty: QbeType)
  Int32(value: Int)
  Int(value: Int)
  Float(value: Float)

  func encode(self, file: File) {
    match self {
      Value.Ident(name, _) => file.write("%$name")
      Value.Global(name, _) => file.write("\$$name")
      Value.Int32(value) => file.write(value.toString())
      Value.Int(value) => file.write(value.toString())
      Value.Float(value) => file.write("d_$value")
    }
  }

  func ty(self): QbeType = match self {
      Value.Ident(_, ty) => ty
      Value.Global(_, ty) => ty
      Value.Int32 => QbeType.U32
      Value.Int => QbeType.U64
      Value.Float => QbeType.F64
  }

  func repr(self): String {
    match self {
      Value.Ident(name, _) => "%$name"
      Value.Global(name, _) => "\$$name"
      Value.Int32(v) => v.toString()
      Value.Int(v) => v.toString()
      Value.Float(v) => v.toString()
    }
  }
}

export type Dest {
  name: String
  ty: QbeType

  func encode(self, file: File) {
    file.write(self.name)
    file.write(" =")
    self.ty.encode(file)
  }
}

enum Instruction {
  Add(dst: Dest, l: Value, r: Value)
  Sub(dst: Dest, l: Value, r: Value)
  Mul(dst: Dest, l: Value, r: Value)

  AndW(dst: Dest, l: Value, r: Value)

  Alloc4(dst: Dest, size: Int)
  Alloc8(dst: Dest, size: Int)

  CompareEq(dst: Dest, l: Value, r: Value)
  CompareNeq(dst: Dest, l: Value, r: Value)
  CompareGte(dst: Dest, l: Value, r: Value)

  LoadB(dst: Dest, mem: Value)
  LoadW(dst: Dest, mem: Value)
  LoadL(dst: Dest, mem: Value)
  LoadS(dst: Dest, mem: Value)
  LoadD(dst: Dest, mem: Value)
  StoreB(value: Value, mem: Value)
  StoreW(value: Value, mem: Value)
  StoreL(value: Value, mem: Value)
  StoreS(value: Value, mem: Value)
  StoreD(value: Value, mem: Value)

  Call(dst: Dest?, fn: String, args: Value[])
  CallVarargs(dst: Dest?, fn: String, varargsIdx: Int, args: Value[])

  Phi(dst: Dest, cases: (Label, Value)[])

  Jmp(label: Label)
  Jnz(cond: Value, ifNonZero: Label, ifZero: Label)
  Return(value: Value?)

  func encode(self, file: File) {
    match self {
      Instruction.Add(dst, l, r) => {
        dst.encode(file)
        file.write(" add ")
        l.encode(file)
        file.write(", ")
        r.encode(file)
        file.writeln()
      }
      Instruction.Sub(dst, l, r) => {
        dst.encode(file)
        file.write(" sub ")
        l.encode(file)
        file.write(", ")
        r.encode(file)
        file.writeln()
      }
      Instruction.Mul(dst, l, r) => {
        dst.encode(file)
        file.write(" mul ")
        l.encode(file)
        file.write(", ")
        r.encode(file)
        file.writeln()
      }
      Instruction.AndW(dst, l, r) => {
        dst.encode(file)
        file.write(" and ")
        l.encode(file)
        file.write(", ")
        r.encode(file)
        file.writeln()
      }
      Instruction.Alloc4(dst, size) => {
        dst.encode(file)
        file.write(" alloc4 ")
        file.writeln(size.toString())
      }
      Instruction.Alloc8(dst, size) => {
        dst.encode(file)
        file.write(" alloc8 ")
        file.writeln(size.toString())
      }
      Instruction.CompareEq(dst, l, r) => {
        dst.encode(file)
        file.write(" ceqw ")
        l.encode(file)
        file.write(", ")
        r.encode(file)
        file.writeln()
      }
      Instruction.CompareNeq(dst, l, r) => {
        dst.encode(file)
        file.write(" cnew ")
        l.encode(file)
        file.write(", ")
        r.encode(file)
        file.writeln()
      }
      Instruction.CompareGte(dst, l, r) => {
        dst.encode(file)
        file.write(" csgel ")
        l.encode(file)
        file.write(", ")
        r.encode(file)
        file.writeln()
      }
      Instruction.LoadB(dst, m) => {
        dst.encode(file)
        file.write(" loadb ")
        m.encode(file)
        file.writeln()
      }
      Instruction.LoadW(dst, m) => {
        dst.encode(file)
        file.write(" loadw ")
        m.encode(file)
        file.writeln()
      }
      Instruction.LoadL(dst, m) => {
        dst.encode(file)
        file.write(" loadl ")
        m.encode(file)
        file.writeln()
      }
      Instruction.LoadS(dst, m) => {
        dst.encode(file)
        file.write(" loads ")
        m.encode(file)
        file.writeln()
      }
      Instruction.LoadD(dst, m) => {
        dst.encode(file)
        file.write(" loadd ")
        m.encode(file)
        file.writeln()
      }
      Instruction.StoreB(v, m) => {
        file.write("storeb ")
        v.encode(file)
        file.write(", ")
        m.encode(file)
        file.writeln()
      }
      Instruction.StoreW(v, m) => {
        file.write("storew ")
        v.encode(file)
        file.write(", ")
        m.encode(file)
        file.writeln()
      }
      Instruction.StoreL(v, m) => {
        file.write("storel ")
        v.encode(file)
        file.write(", ")
        m.encode(file)
        file.writeln()
      }
      Instruction.StoreS(v, m) => {
        file.write("stores ")
        v.encode(file)
        file.write(", ")
        m.encode(file)
        file.writeln()
      }
      Instruction.StoreD(v, m) => {
        file.write("stored ")
        v.encode(file)
        file.write(", ")
        m.encode(file)
        file.writeln()
      }
      Instruction.Call(dst, fnName, args) => {
        if dst |dst| {
          dst.encode(file)
          file.write(" ")
        }
        file.write("call ")
        file.write(fnName)
        file.write("(")
        for arg, idx in args {
          arg.ty().encode(file)
          file.write(" ")
          arg.encode(file)
          if idx != args.length - 1 file.write(", ")
        }
        file.writeln(")")
      }
      Instruction.CallVarargs(dst, fnName, varargsIdx, args) => {
        if dst |dst| {
          dst.encode(file)
          file.write(" ")
        }
        file.write("call ")
        file.write(fnName)
        file.write("(")
        for arg, idx in args {
          if idx == varargsIdx {
            file.write("..., ")
          }
          arg.ty().encode(file)
          file.write(" ")
          arg.encode(file)
          if idx != args.length - 1 file.write(", ")
        }
        file.writeln(")")
      }
      Instruction.Phi(dst, cases) => {
        dst.encode(file)
        file.write(" phi ")
        for case, idx in cases {
          file.write("@${case[0].name} ")
          case[1].encode(file)

          if idx != cases.length - 1 {
            file.write(", ")
          }
        }
        file.writeln()
      }
      Instruction.Jmp(label) => {
        file.writeln("jmp @${label.name}")
      }
      Instruction.Jnz(cond, ifNonZero, ifZero) => {
        file.write("jnz ")
        cond.encode(file)
        file.writeln(", @${ifNonZero.name}, @${ifZero.name}")
      }
      Instruction.Return(value) => {
        file.write("ret ")
        value?.encode(file)
        file.writeln()
      }
    }
  }
}