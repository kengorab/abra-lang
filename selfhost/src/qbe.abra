import File from "fs"

export type ModuleBuilder {
  _statements: QbeStatement[] = []

  func writeToFile(self, file: File) {
    for stmt, idx in self._statements {
      stmt.encode(file)
      if idx != self._statements.length - 1 { file.writeln()}
    }
  }

  func buildFunction(self, name: String, returnType: QbeType?, exported = false): QbeFunction {
    val block = Block(body: [], labels: { (0): ["start"] })

    val fn = QbeFunction(exported: exported, name: name, returnType: returnType, block: block, meta: [])
    self._statements.push(QbeStatement.Func(fn))
    fn
  }
}

enum QbeStatement {
  Func(function: QbeFunction)

  func encode(self, file: File) {
    match self {
      QbeStatement.Func(f) => f.encode(file)
    }
  }
}

export type Block {
  body: Instruction[] = []
  labels: Map<Int, String[]> = {}

  func encode(self, file: File) {
    for instr, idx in self.body {
      if self.labels[idx] |labels| {
        for label in labels {
          file.writeln("@$label")
        }
      }
      file.write("  ")
      instr.encode(file)
    }
  }

  func append(self, instr: Instruction) {
    self.body.push(instr)
  }
}

export enum QbeType {
  U8      // 'b'
  U16     // 'h'
  U32     // 'w'
  U64     // 'l'
  Pointer // 'l'
  F32     // 's'
  F64     // 'd'
  Aggregate(spec: AggregateType)

  func encode(self, file: File) {
    val s = match self {
      QbeType.U8 => "b"
      QbeType.U16 => "h"
      QbeType.U32 => "w"
      QbeType.U64 => "l"
      QbeType.Pointer => "l"
      QbeType.F32 => "s"
      QbeType.F64 => "d"
      QbeType.Aggregate(spec) => ":${spec.name}"
    }
    file.write(s)
  }
}

type TypeField {
  name: String
  ty: QbeType
}

type AggregateType {
  name: String
  fields: TypeField[]
}

export type QbeFunction {
  exported: Bool = false
  name: String
  returnType: QbeType? = None
  block: Block
  meta: String[] = []

  func encode(self, file: File) {
    for meta in self.meta {
      file.writeln("# $meta")
    }
    if self.exported file.write("export ")
    file.write("function ")
    self.returnType?.encode(file)
    file.write(" \$${self.name}")
    file.write("()") // todo: parameters
    file.writeln(" {")

    self.block.encode(file)

    file.writeln("}")
  }
}

export enum Value {
  Ident(name: String, ty: QbeType)
  Global(name: String, ty: QbeType)
  Int(value: Int)
  Float(value: Float)

  func encode(self, file: File) {
    match self {
      Value.Ident(name, _) => file.write("%$name")
      Value.Global(name, _) => file.write("\$$name")
      Value.Int(value) => file.write(value.toString())
      Value.Float(value) => file.write("d_$value")
    }
  }

  func ty(self): QbeType = match self {
      Value.Ident(_, ty) => ty
      Value.Global(_, ty) => ty
      Value.Int => QbeType.U64
      Value.Float => QbeType.F64
  }
}

export type Dest {
  name: String
  ty: QbeType

  func encode(self, file: File) {
    file.write(self.name)
    file.write(" =")
    self.ty.encode(file)
  }
}

export enum Instruction {
  Add(dst: Dest, l: Value, r: Value)

  Call(dst: Dest?, fn: String, args: Value[])
  Return(value: Value?)

  func encode(self, file: File) {
    match self {
      Instruction.Add(dst, l, r) => {
        dst.encode(file)
        file.write(" add ")
        l.encode(file)
        file.write(", ")
        r.encode(file)
        file.writeln()
      }
      Instruction.Call(dst, fnName, args) => {
        if dst |dst| {
          dst.encode(file)
          file.write(" ")
        }
        file.write("call ")
        file.write(fnName)
        file.write("(")
        for arg, idx in args {
          arg.ty().encode(file)
          file.write(" ")
          arg.encode(file)
          if idx != args.length - 1 file.write(", ")
        }
        file.writeln(")")
      }
      Instruction.Return(value) => {
        file.write("ret ")
        value?.encode(file)
        file.writeln()
      }
    }
  }
}