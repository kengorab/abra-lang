import File from "fs"

export type ModuleBuilder {
  _data: QbeData[] = []
  _globalStrs: Map<String, Value> = {}
  _functions: QbeFunction[] = []
  _functionsByName: Map<String, QbeFunction> = {}

  func writeToFile(self, file: File) {
    for data, idx in self._data {
      data.encode(file)
      file.writeln()
    }
    if !self._data.isEmpty() { file.writeln() }

    for fn, idx in self._functions {
      fn.encode(file)
      if idx != self._functions.length - 1 { file.writeln()}
    }
  }

  func getFunction(self, name: String): QbeFunction? = self._functionsByName[name]

  func buildFunction(self, name: String, returnType: QbeType?, exported = false): QbeFunction {
    if self._functionsByName[name] |fn| return fn

    val start = Label(name: "start", offset: Some(0))
    val block = Block(name: name, body: [], labelsByLine: { (0): [start] }, _usedLabels: #{start}, comments: {}, numLocals: 0)

    val fn = QbeFunction(exported: exported, name: name, returnType: returnType, _parameters: [], block: block, variadicIdx: None, _comments: [])
    self._functions.push(fn)
    self._functionsByName[name] = fn
    fn
  }

  func buildGlobalString(self, string: String, name: String? = None): Value {
    if self._globalStrs[string] |ptr| return ptr

    val dataName = name ?: "_${self._data.length}"
    val data = QbeData(name: dataName, align: None, kind: QbeDataKind.String(string))
    self._data.push(data)
    val ptr = Value.Global(dataName, QbeType.Pointer)
    self._globalStrs[string] = ptr

    ptr
  }
}

type QbeData {
  name: String
  align: Int? = None
  kind: QbeDataKind

  func encode(self, file: File) {
    file.write("data $")
    file.write(self.name)
    file.write(" =")
    if self.align |align| {
      file.write(" align ")
      file.write(align.toString())
    }
    file.write(" { ")
    self.kind.encode(file)
    file.write(" }")
  }
}

enum QbeDataKind {
  Zeros(size: Int)
  String(str: String)
  // others

  func encode(self, file: File) {
    match self {
      QbeDataKind.Zeros(size) => {
        file.write("z $size")
      }
      QbeDataKind.String(str) => {
        file.write("b \"$str\", b 0")
      }
    }
  }
}

type Label {
  name: String
  offset: Int? = None
}

export type Block {
  name: String
  body: Instruction[] = []
  labelsByLine: Map<Int, Label[]> = {}
  _usedLabels: Set<Label> = #{}
  comments: Map<Int, String[]> = {}
  numLocals: Int = 0

  func encode(self, file: File) {
    for instr, idx in self.body {
      if self.labelsByLine[idx] |labels| {
        for label in labels {
          file.writeln("@${label.name}")
        }
      }

      if self.comments[idx] |comments| {
        for comment in comments {
          file.writeln("  # $comment")
        }
      }

      file.write("  ")
      instr.encode(file)
    }
  }

  func append(self, instr: Instruction) {
    self.body.push(instr)
  }

  func verify(self): Result<Int, String> {
    val errors: String[] = []
    for label in self._usedLabels {
      if !label.offset {
        errors.push("Unregistered label @${label.name}")
      }
    }

    if errors.isEmpty() return Ok(0)

    val fmt = errors.map(e => "  - $e").join("\n")
    Err("Block ${self.name} failed verification:\n $fmt")
  }

  func _nextLocal(self): String {
    val name = "_${self.numLocals}"
    self.numLocals += 1
    name
  }

  func _addComment(self, comment: String, line = self.body.length) {
    if self.comments[line] |comments| comments.push(comment)
    else self.comments[line] = [comment]
  }

  func addComment(self, comment: String) = self._addComment(comment)

  // todo: ew
  func addCommentBefore(self, comment: String, numBack = 1) = self._addComment(comment, if self.body.length - numBack < 0 { 0 } else { self.body.length - numBack })

  func addLabel(self, name: String): Label = Label(name: name)

  func registerLabel(self, label: Label): Result<Label, String> {
    if label.offset |offset| return Err("Label ${label.name} already registered with offset $offset")

    val offset = self.body.length
    label.offset = Some(offset)
    if self.labelsByLine[offset] |labels| labels.push(label) else self.labelsByLine[offset] = [label]

    Ok(label)
  }

  // instruction builders

  func buildAdd(self, left: Value, right: Value, dst = self._nextLocal()): Result<Value, String> {
    val lty = left.ty()
    val rty = right.ty()

    val resTy = if lty.repr() != rty.repr() return Err("incompatible types for 'add' instruction: ${lty.repr()}, ${rty.repr()} ($left, $right)") else lty

    val local = Value.Ident(dst, resTy)
    val dstName = "%$dst"
    self.append(Instruction.Add(dst: Dest(name: dstName, ty: resTy), l: left, r: right))

    Ok(local)
  }

  func buildMul(self, left: Value, right: Value, dst = self._nextLocal()): Result<Value, String> {
    val lty = left.ty()
    val rty = right.ty()

    val resTy = if lty.repr() != rty.repr() return Err("incompatible types for 'mul' instruction: ${lty.repr()}, ${rty.repr()} ($left, $right)") else lty

    val local = Value.Ident(dst, resTy)
    val dstName = "%$dst"
    self.append(Instruction.Mul(dst: Dest(name: dstName, ty: resTy), l: left, r: right))

    Ok(local)
  }

  func buildLoadL(self, mem: Value, dst = self._nextLocal()): Value {
    val dstName = "%$dst"
    self.append(Instruction.LoadL(dst: Dest(name: dstName, ty: QbeType.U64), mem: mem))

    Value.Ident(dst, QbeType.U64)
  }

  func buildStoreL(self, value: Value, mem: Value) {
    self.append(Instruction.StoreL(value: value, mem: mem))
  }

  func buildCall(self, fnValue: QbeFunction, arguments: Value[], dst = self._nextLocal()): Result<Value, String> {
    val dstName = "%$dst"
    val fnReturnType = if fnValue.returnType |ty| ty else {
      return Err("function value '${fnValue.name}' has no return type; cannot store result into destination '$dstName'")
    }

    val fnName = "\$${fnValue.name}"
    val local = Value.Ident(dst, fnReturnType)
    if fnValue.variadicIdx |idx| {
      self.append(Instruction.CallVarargs(dst: Some(Dest(name: dstName, ty: fnReturnType)), fn: fnName, varargsIdx: idx, args: arguments))
    } else {
      self.append(Instruction.Call(dst: Some(Dest(name: dstName, ty: fnReturnType)), fn: fnName, args: arguments))
    }

    Ok(local)
  }

  func buildVoidCall(self, fnValue: QbeFunction, arguments: Value[]) {
    val fnName = "\$${fnValue.name}"
    if fnValue.variadicIdx |idx| {
      self.append(Instruction.CallVarargs(dst: None, fn: fnName, varargsIdx: idx, args: arguments))
    } else {
      self.append(Instruction.Call(dst: None, fn: fnName, args: arguments))
    }
  }

  func buildJnz(self, cond: Value, ifNonZero: Label, ifZero: Label) {
    self._usedLabels.insert(ifNonZero)
    self._usedLabels.insert(ifZero)
    self.append(Instruction.Jnz(cond, ifNonZero, ifZero))
  }

  func buildReturn(self, value: Value? = None) {
    self.append(Instruction.Return(value))
  }
}

export enum QbeType {
  U8      // 'b'
  U16     // 'h'
  U32     // 'w'
  U64     // 'l'
  Pointer // 'l'
  F32     // 's'
  F64     // 'd'

  func size(self): Int {
    match self {
      QbeType.U8 => 1
      QbeType.U16 => 2
      QbeType.U32 => 4
      QbeType.U64 => 8
      QbeType.Pointer => 8
      QbeType.F32 => 4
      QbeType.F64 => 8
    }
  }

  func repr(self): String {
    match self {
      QbeType.U8 => "b"
      QbeType.U16 => "h"
      QbeType.U32 => "w"
      QbeType.U64 => "l"
      QbeType.Pointer => "l"
      QbeType.F32 => "s"
      QbeType.F64 => "d"
    }
  }

  func encode(self, file: File) {
    file.write(self.repr())
  }
}

export type QbeFunction {
  exported: Bool = false
  name: String
  block: Block,
  returnType: QbeType? = None
  _parameters: (String, QbeType)[] = []
  variadicIdx: Int? = None
  _comments: String[] = []

  func spec(name: String, returnType: QbeType? = None, parameters: (String, QbeType)[] = [], variadicIdx: Int? = None): QbeFunction {
    QbeFunction(name: name, block: Block(name: name), returnType: returnType, _parameters: parameters, variadicIdx: variadicIdx)
  }

  func encode(self, file: File) {
    for comment in self._comments {
      file.writeln("# $comment")
    }
    if self.exported file.write("export ")
    file.write("function ")
    self.returnType?.encode(file)
    file.write(" \$${self.name}")
    file.write("(")
    for param, idx in self._parameters {
      param[1].encode(file)
      file.write(" %${param[0]}")
      if idx != self._parameters.length - 1 {
        file.write(", ")
      }
    }
    file.write(")")
    file.writeln(" {")

    self.block.encode(file)

    file.writeln("}")
  }

  func addComment(self, comment: String) {
    self._comments.push(comment)
  }

  func addCommentMultiline(self, comment: String[]) {
    for line in comment self._comments.push(line)
  }

  func addParameter(self, name: String, ty: QbeType): Value {
    self._parameters.push((name, ty))
    Value.Ident(name, ty)
  }
}

export enum Value {
  Ident(name: String, ty: QbeType)
  Global(name: String, ty: QbeType)
  Int32(value: Int)
  Int(value: Int)
  Float(value: Float)

  func encode(self, file: File) {
    match self {
      Value.Ident(name, _) => file.write("%$name")
      Value.Global(name, _) => file.write("\$$name")
      Value.Int32(value) => file.write(value.toString())
      Value.Int(value) => file.write(value.toString())
      Value.Float(value) => file.write("d_$value")
    }
  }

  func ty(self): QbeType = match self {
      Value.Ident(_, ty) => ty
      Value.Global(_, ty) => ty
      Value.Int32 => QbeType.U32
      Value.Int => QbeType.U64
      Value.Float => QbeType.F64
  }

  func ifIdent(self, fn: (String, QbeType) => Unit) {
    match self {
      Value.Ident(name, ty) => fn("%$name", ty)
      _ => {}
    }
  }
}

export type Dest {
  name: String
  ty: QbeType

  func encode(self, file: File) {
    file.write(self.name)
    file.write(" =")
    self.ty.encode(file)
  }
}

enum Instruction {
  Add(dst: Dest, l: Value, r: Value)
  Mul(dst: Dest, l: Value, r: Value)

  LoadL(dst: Dest, mem: Value)
  StoreL(value: Value, mem: Value)

  Call(dst: Dest?, fn: String, args: Value[])
  CallVarargs(dst: Dest?, fn: String, varargsIdx: Int, args: Value[])

  Jnz(cond: Value, ifNonZero: Label, ifZero: Label)
  Return(value: Value?)

  func encode(self, file: File) {
    match self {
      Instruction.Add(dst, l, r) => {
        dst.encode(file)
        file.write(" add ")
        l.encode(file)
        file.write(", ")
        r.encode(file)
        file.writeln()
      }
      Instruction.Mul(dst, l, r) => {
        dst.encode(file)
        file.write(" mul ")
        l.encode(file)
        file.write(", ")
        r.encode(file)
        file.writeln()
      }
      Instruction.LoadL(dst, m) => {
        dst.encode(file)
        file.write(" loadl ")
        m.encode(file)
        file.writeln()
      }
      Instruction.StoreL(v, m) => {
        file.write("storel ")
        v.encode(file)
        file.write(", ")
        m.encode(file)
        file.writeln()
      }
      Instruction.Call(dst, fnName, args) => {
        if dst |dst| {
          dst.encode(file)
          file.write(" ")
        }
        file.write("call ")
        file.write(fnName)
        file.write("(")
        for arg, idx in args {
          arg.ty().encode(file)
          file.write(" ")
          arg.encode(file)
          if idx != args.length - 1 file.write(", ")
        }
        file.writeln(")")
      }
      Instruction.CallVarargs(dst, fnName, varargsIdx, args) => {
        if dst |dst| {
          dst.encode(file)
          file.write(" ")
        }
        file.write("call ")
        file.write(fnName)
        file.write("(")
        for arg, idx in args {
          if idx == varargsIdx {
            file.write("..., ")
          }
          arg.ty().encode(file)
          file.write(" ")
          arg.encode(file)
          if idx != args.length - 1 file.write(", ")
        }
        file.writeln(")")
      }
      Instruction.Jnz(cond, ifNonZero, ifZero) => {
        file.write("jnz ")
        cond.encode(file)
        file.writeln(", @${ifNonZero.name}, @${ifZero.name}")
      }
      Instruction.Return(value) => {
        file.write("ret ")
        value?.encode(file)
        file.writeln()
      }
    }
  }
}