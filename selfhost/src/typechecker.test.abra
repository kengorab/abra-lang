// When executed directly, this will perform typechecking, starting at the module at the given path
// and recursively loading and typechecking imported modules. When typechecking is complete, the
// Project will be filled in with TypedModules, each of which contain a typed AST and other useful
// data.
// This is split out into a separate runnable file so that the test-specific code is never compiled into
// the actual resulting binary; this results in a separate binary being compiled which is only used for
// testing.

import getAbsolutePath from "./utils"
import ModuleLoader, Project, Typechecker, TypedModule from "./typechecker"
import Jsonifier from "./typechecker_test_utils"

func verifyStdModule(modulesSortedById: TypedModule[], expectedId: Int, name: String): Bool {
  if modulesSortedById[expectedId] |m| {
    if !m.name.endsWith("std/$name.abra") {
      println("Error: $name module misconfigured")
      return false
    }
  } else {
    println("Error: no $name module defined!")
    return false
  }

  true
}

func main() {
  val abraStdRoot = if Process.getEnvVar("ABRA_HOME") |v| v else {
    println("Could not find ABRA_HOME (make sure \$ABRA_HOME environment variable is set)")
    return
  }

  if Process.args()[1] |fileName| {
    val absPathSegs = getAbsolutePath(fileName)
    val filePathAbs = "/" + absPathSegs.join("/")

    val moduleLoader = ModuleLoader(stdRoot: abraStdRoot)
    val project = Project()
    val typechecker = Typechecker(moduleLoader: moduleLoader, project: project)

    match typechecker.typecheckEntrypoint(filePathAbs) {
      Ok => {
        val allModules = project.modules.values().sortBy(m => m.id)

        if !verifyStdModule(allModules, 0, "_intrinsics") return
        if !verifyStdModule(allModules, 1, "libc") return
        if !verifyStdModule(allModules, 2, "prelude") return

        val userModules = allModules[3:]
        val json = Jsonifier()
        json.printModules(userModules)
      }
      Err(e) => println(e.getMessage())
    }
  } else {
    println("Missing required argument <file-name>")
  }
}

main()
