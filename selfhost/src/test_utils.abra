import Token, TokenKind from "./lexer"
import ParsedModule, AstNode, AstNodeKind, LiteralAstNode, IdentifierKind from "./parser"

export func printTokenAsJson(token: Token, indentLevelStart: Int, currentIndentLevel: Int) {
  val startIndent = "  ".repeat(indentLevelStart)
  val fieldsIndent = "  ".repeat(currentIndentLevel + 1)
  val endIndent = "  ".repeat(currentIndentLevel)

  println("$startIndent{\n$fieldsIndent\"position\": [${token.position.line}, ${token.position.col}],")
  print("$fieldsIndent\"kind\": ")
  printTokenKindAsJson(kind: token.kind, indentLevelStart: 0, currentIndentLevel: currentIndentLevel + 1)
  print("$endIndent}")
}

func printTokenKindAsJson(kind: TokenKind, indentLevelStart: Int, currentIndentLevel: Int) {
  val startIndent = "  ".repeat(indentLevelStart)
  val fieldsIndent = "  ".repeat(currentIndentLevel + 1)
  val endIndent = "  ".repeat(currentIndentLevel)

  println("$startIndent{")
  match kind {
    TokenKind.Int(value) => {
      println("$fieldsIndent\"name\": \"Int\",")
      println("$fieldsIndent\"value\": $value")
    }
    TokenKind.Float(value) => {
      println("$fieldsIndent\"name\": \"Float\",")
      println("$fieldsIndent\"value\": $value")
    }
    TokenKind.Bool(value) => {
      println("$fieldsIndent\"name\": \"Bool\",")
      println("$fieldsIndent\"value\": $value")
    }
    TokenKind.String(value) => {
      println("$fieldsIndent\"name\": \"String\",")
      println("$fieldsIndent\"value\": \"$value\"")
    }
    TokenKind.StringInterpolation => {
      println("$fieldsIndent\"name\": \"StringInterpolation\",")
      println("$fieldsIndent\"value\": \"not yet implemented\"")
    }
    TokenKind.Ident(name) => {
      println("$fieldsIndent\"name\": \"Ident\",")
      println("$fieldsIndent\"value\": \"$name\"")
    }
    TokenKind.If => println("$fieldsIndent\"name\": \"If\"")
    TokenKind.Else => println("$fieldsIndent\"name\": \"Else\"")
    TokenKind.Val => println("$fieldsIndent\"name\": \"Val\"")
    TokenKind.Var => println("$fieldsIndent\"name\": \"Var\"")
    TokenKind.Func => println("$fieldsIndent\"name\": \"Func\"")
    TokenKind.Self => println("$fieldsIndent\"name\": \"Self\"")
    TokenKind.While => println("$fieldsIndent\"name\": \"While\"")
    TokenKind.Break => println("$fieldsIndent\"name\": \"Break\"")
    TokenKind.Continue => println("$fieldsIndent\"name\": \"Continue\"")
    TokenKind.For => println("$fieldsIndent\"name\": \"For\"")
    TokenKind.In => println("$fieldsIndent\"name\": \"In\"")
    TokenKind.Match => println("$fieldsIndent\"name\": \"Match\"")
    TokenKind.Type => println("$fieldsIndent\"name\": \"Type\"")
    TokenKind.Enum => println("$fieldsIndent\"name\": \"Enum\"")
    TokenKind.Return => println("$fieldsIndent\"name\": \"Return\"")
    TokenKind.Readonly => println("$fieldsIndent\"name\": \"Readonly\"")
    TokenKind.Import => println("$fieldsIndent\"name\": \"Import\"")
    TokenKind.Export => println("$fieldsIndent\"name\": \"Export\"")
    TokenKind.From => println("$fieldsIndent\"name\": \"From\"")
    TokenKind.As => println("$fieldsIndent\"name\": \"As\"")
    TokenKind.Try => println("$fieldsIndent\"name\": \"Try\"")
    TokenKind.None_ => println("$fieldsIndent\"name\": \"None\"")
    TokenKind.Plus => println("$fieldsIndent\"name\": \"Plus\"")
    TokenKind.PlusEq => println("$fieldsIndent\"name\": \"PlusEq\"")
    TokenKind.Minus => println("$fieldsIndent\"name\": \"Minus\"")
    TokenKind.MinusEq => println("$fieldsIndent\"name\": \"MinusEq\"")
    TokenKind.Star => println("$fieldsIndent\"name\": \"Star\"")
    TokenKind.StarEq => println("$fieldsIndent\"name\": \"StarEq\"")
    TokenKind.StarStar => println("$fieldsIndent\"name\": \"StarStar\"")
    TokenKind.Slash => println("$fieldsIndent\"name\": \"Slash\"")
    TokenKind.SlashEq => println("$fieldsIndent\"name\": \"SlashEq\"")
    TokenKind.Percent => println("$fieldsIndent\"name\": \"Percent\"")
    TokenKind.PercentEq => println("$fieldsIndent\"name\": \"PercentEq\"")
    TokenKind.LT => println("$fieldsIndent\"name\": \"LT\"")
    TokenKind.LTE => println("$fieldsIndent\"name\": \"LTE\"")
    TokenKind.GT => println("$fieldsIndent\"name\": \"GT\"")
    TokenKind.GTE => println("$fieldsIndent\"name\": \"GTE\"")
    TokenKind.Bang => println("$fieldsIndent\"name\": \"Bang\"")
    TokenKind.Eq => println("$fieldsIndent\"name\": \"Assign\"")
    TokenKind.EqEq => println("$fieldsIndent\"name\": \"Eq\"")
    TokenKind.Neq => println("$fieldsIndent\"name\": \"Neq\"")
    TokenKind.Arrow => println("$fieldsIndent\"name\": \"Arrow\"")
    TokenKind.Dot => println("$fieldsIndent\"name\": \"Dot\"")
    TokenKind.Or => println("$fieldsIndent\"name\": \"Or\"")
    TokenKind.OrEq => println("$fieldsIndent\"name\": \"OrEq\"")
    TokenKind.And => println("$fieldsIndent\"name\": \"And\"")
    TokenKind.AndEq => println("$fieldsIndent\"name\": \"AndEq\"")
    TokenKind.Caret => println("$fieldsIndent\"name\": \"Caret\"")
    TokenKind.LParen => println("$fieldsIndent\"name\": \"LParen\"")
    TokenKind.RParen => println("$fieldsIndent\"name\": \"RParen\"")
    TokenKind.LBrack => println("$fieldsIndent\"name\": \"LBrack\"")
    TokenKind.RBrack => println("$fieldsIndent\"name\": \"RBrack\"")
    TokenKind.LBrace => println("$fieldsIndent\"name\": \"LBrace\"")
    TokenKind.RBrace => println("$fieldsIndent\"name\": \"RBrace\"")
    TokenKind.Pipe => println("$fieldsIndent\"name\": \"Pipe\"")
    TokenKind.Comma => println("$fieldsIndent\"name\": \"Comma\"")
    TokenKind.Colon => println("$fieldsIndent\"name\": \"Colon\"")
    TokenKind.Question => println("$fieldsIndent\"name\": \"Question\"")
    TokenKind.Elvis => println("$fieldsIndent\"name\": \"Elvis\"")
    TokenKind.ElvisEq => println("$fieldsIndent\"name\": \"ElvisEq\"")
    TokenKind.QuestionDot => println("$fieldsIndent\"name\": \"QuestionDot\"")
    TokenKind.HashBrace => println("$fieldsIndent\"name\": \"LBraceHash\"")
    TokenKind.At => println("$fieldsIndent\"name\": \"At\"")
  }
  println("$endIndent}")
}

export func printParsedModuleAsJson(module: ParsedModule) {
  println("{\n  \"nodes\": [")
  for node, idx in module.nodes {
    printAstNodeAsJson(node, 2, 2)
    val comma = if idx != module.nodes.length - 1 "," else ""
    println(comma)
  }
  println("  ]")
  println("}")
}

func printAstNodeAsJson(node: AstNode, indentLevelStart: Int, currentIndentLevel: Int) {
  val startIndent = "  ".repeat(indentLevelStart)
  val fieldsIndent = "  ".repeat(currentIndentLevel + 1)
  val endIndent = "  ".repeat(currentIndentLevel)

  print("$startIndent{\n$fieldsIndent\"token\": ")
  printTokenAsJson(token: node.token, indentLevelStart: 0, currentIndentLevel: currentIndentLevel + 1)
  print(",\n$fieldsIndent\"kind\": ")
  printAstNodeKindAsJson(kind: node.kind, indentLevelStart: 0, currentIndentLevel: currentIndentLevel + 1)
  print("$endIndent}")
}

func printAstNodeKindAsJson(kind: AstNodeKind, indentLevelStart: Int, currentIndentLevel: Int) {
  val startIndent = "  ".repeat(indentLevelStart)
  val fieldsIndent = "  ".repeat(currentIndentLevel + 1)
  val endIndent = "  ".repeat(currentIndentLevel)

  println("$startIndent{")
  match kind {
    AstNodeKind.Literal(literal) => {
      val pair = match literal {
        LiteralAstNode.Int(value) => ("int", value.toString())
        LiteralAstNode.Float(value) => ("float", value.toString())
        LiteralAstNode.Bool(value) => ("bool", value.toString())
        LiteralAstNode.String(value) => ("string", "\"$value\"")
      }

      println("$fieldsIndent\"name\": \"literal\",")
      println("$fieldsIndent\"type\": \"${pair[0]}\",")
      println("$fieldsIndent\"value\": ${pair[1]}")
    }
    AstNodeKind.Unary(unaryNode) => {
      println("$fieldsIndent\"name\": \"unary\",")
      println("$fieldsIndent\"op\": \"${unaryNode.op}\",")
      print("$fieldsIndent\"expr\": ")
      printAstNodeAsJson(unaryNode.expr, 0, currentIndentLevel + 1)
      println()
    }
    AstNodeKind.Binary(binaryNode) => {
      println("$fieldsIndent\"name\": \"binary\",")
      println("$fieldsIndent\"op\": \"${binaryNode.op}\",")
      print("$fieldsIndent\"left\": ")
      printAstNodeAsJson(binaryNode.left, 0, currentIndentLevel + 1)
      print(",\n$fieldsIndent\"right\": ")
      printAstNodeAsJson(binaryNode.right, 0, currentIndentLevel + 1)
      println()
    }
    AstNodeKind.Grouped(inner) => {
      println("$fieldsIndent\"name\": \"grouped\",")
      print("$fieldsIndent\"inner\": ")
      printAstNodeAsJson(inner, 0, currentIndentLevel + 1)
      println()
    }
    AstNodeKind.Identifier(kind) => {
      println("$fieldsIndent\"name\": \"identifier\",")
      print("$fieldsIndent\"ident\": ")
      match kind {
        IdentifierKind.Named(name) => println("\"$name\"")
        IdentifierKind.None_ => println("\"None\"")
        IdentifierKind.Self => println("\"self\"")
        IdentifierKind.Discard => println("\"_\"")
      }
    }
  }
  println("$endIndent}")
}
