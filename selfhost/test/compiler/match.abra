// Basic test (catch-all case)
(() => {
  /// Expect: here
  match "abc" {
    _ => println("here")
  }

  // v2 syntax
  /// Expect: here
  match "abc" {
    else => println("here")
  }
})()

// Testing constant cases
(() => {
  /// Expect: case 1: 1
  /// Expect: case 2: 2
  /// Expect: case 3: 34
  /// Expect: case 3: 567
  for i in [1, 2, 34, 567] {
    match i {
      1 v => println("case 1:", v)
      2 v => println("case 2:", v)
      _ v => println("case 3:", v)
    }
  }

  /// Expect: case 1: 1.1
  /// Expect: case 2: 2.2
  /// Expect: case 3: 3.4
  /// Expect: case 3: 5.67
  for f in [1.1, 2.2, 3.4, 5.67] {
    match f {
      1.1 v => println("case 1:", v)
      2.2 v => println("case 2:", v)
      _ v => println("case 3:", v)
    }
  }

  /// Expect: case 1: true
  /// Expect: case 2: false
  for b in [true, false] {
    match b {
      true v => println("case 1:", v)
      false v => println("case 2:", v)
    }
  }

  /// Expect: case 4: hello
  /// Expect: case 3: hi
  /// Expect: case 5: bonjour
  for s in ["hello", "hi", "bonjour"] {
    match s {
      "howdy" v => println("case 1:", v)
      "hola" v => println("case 2:", v)
      "hi" v => println("case 3:", v)
      "hello" v => println("case 4:", v)
      _ v => println("case 5:", v)
    }
  }

  // TODO: remove this, lambda is unhappy to have a for-loop be the last statement for some reason
  /// Expect: done
  println("done")
})()

// Testing option type
(() => {
  val arr = [1, 2, 3, 4]

  /// Expect: found a number
  match arr[1] {
    None => println("nothing here")
    else => println("found a number")
  }
  /// Expect: nothing here
  match arr[14] {
    None => println("nothing here")
    else => println("found a number")
  }

  // With case binding

  /// Expect: found a number: 2
  match arr[1] {
    None v => println("nothing here:", v)
    else v => println("found a number:", v)
  }
  /// Expect: nothing here: Option.None
  match arr[14] {
    None v => println("nothing here:", v)
    else v => println("found a number:", v)
  }

  // With case binding and _no_ `None` case

  /// Expect: value: Option.Some(value: 2)
  match arr[1] {
    else v => println("value:", v)
  }
  /// Expect: value: Option.None
  match arr[14] {
    else v => println("value:", v)
  }

  // With constant cases

  /// Expect: 18
  match arr[1] {
    2 v => println(16 + v)
    1 => println(15)
    None => println(-4)
    else => println(100)
  }
  /// Expect: 18
  match arr[1] {
    None => println(-4)
    2 v => println(16 + v)
    1 => println(15)
    else => println(100)
  }
  /// Expect: 18
  match arr[1] {
    2 v => println(16 + v)
    1 => println(15)
    else => println(100)
  }
  /// Expect: -4
  match arr[5] {
    2 v => println(16 + v)
    1 => println(15)
    None => println(-4)
    else => println(100)
  }
  /// Expect: -4
  match arr[5] {
    None => println(-4)
    2 v => println(16 + v)
    1 => println(15)
    else => println(100)
  }
  /// Expect: 100 Option.None
  match arr[5] {
    2 v => println(16 + v)
    1 => println(15)
    else v => println(100, v)
  }
  /// Expect: 100 Option.Some(value: 4)
  match arr[3] {
    2 v => println(16 + v)
    1 => println(15)
    else v => println(100, v)
  }

//   // With type cases

//   /// Expect: 2000
//   match arr[1] {
//     None => println(-4)
//     Int v => println(v * 1000)
//     2 v => println(16 + v)
//     1 => println(15)
//     _ => println(100)
//   }
//   /// Expect: 18
//   match arr[1] {
//     None => println(-4)
//     2 v => println(16 + v)
//     Int v => println(v * 1000)
//     1 => println(15)
//     _ => println(100)
//   }
})()

// // With enums

// enum Color {
//   Red
//   Blue
//   Green
//   RGB(r: Int, g: Int, b: Int)
// }

// (() => {
//   val colors = [Color.Red, Color.Blue, Color.Green, Color.RGB(r: 1, g: 2, b: 3)]
//   /// Expect: red
//   /// Expect: blue
//   /// Expect: green
//   /// Expect: rgb(1, 2, 3)
//   for color in colors {
//     match color {
//       Color.Red => println("red")
//       Color.Blue => println("blue")
//       Color.Green => println("green")
//       Color.RGB(r, g, b) => println("rgb($r, $g, $b)")
//     }
//   }

//   /// Expect: blue
//   match colors[1] {
//     None => println("none")
//     Color.Red => println("red")
//     Color.Blue => println("blue")
//     Color.Green => println("green")
//     Color.RGB => println("rgb")
//   }
//   /// Expect: blue
//   match colors[1] {
//     Color.Red => println("red")
//     Color.Blue => println("blue")
//     Color.Green => println("green")
//     Color.RGB => println("rgb")
//     None => println("none")
//   }

//   /// Expect: none
//   match colors[5] {
//     None => println("none")
//     Color.Red => println("red")
//     Color.Blue => println("blue")
//     Color.Green => println("green")
//     Color.RGB => println("rgb")
//   }
//   /// Expect: none
//   match colors[5] {
//     Color.Red => println("red")
//     Color.Blue => println("blue")
//     Color.Green => println("green")
//     Color.RGB => println("rgb")
//     None => println("none")
//   }

//   // Updating values of enum variant

//   val c = Color.RGB(r: 1, g: 2, b: 3)
//   match c {
//     Color.RGB(r, g, b) c => {
//       c.b = 100
//     }
//     _ => {}
//   }
//   /// Expect: Color.RGB(r: 1, g: 2, b: 100)
//   println(c)
// })()

// // Testing match as expression
// (() => {
//   val arr = [1, 2, 3, 4]
//   val x = match arr[1] {
//     None => -1
//     _ v => v * 100
//   }
//   /// Expect: 200
//   println(x)

//   val y = match arr[14] {
//     None => -1
//     _ v => v * 100
//   }
//   /// Expect: -1
//   println(y)
// })()

// // Testing match as expression: terminator in block

// func matchCaseHasReturn(input: Int?): Int {
//   val x = match input {
//     None => return -1
//     _ v => v * 100
//   }
//   x + 1
// }
// /// Expect: -1
// println(matchCaseHasReturn(None))
// /// Expect: 401
// println(matchCaseHasReturn(Option.Some(value: 4)))
