enum Color {
  Red
  Green
  Blue
  RGB(r: Int, g: Int, b: Int)

  func hex(self): String {
    if self == Color.Red {
      "0xFF0000"
    } else if self == Color.Green {
      "0x00FF00"
    } else if self == Color.Blue {
      "0x0000FF"
    } else {
      "todo"
    }
  }
}

val r = Color.Red
val g = Color.Green
val b = Color.Blue
val gray = Color.RGB(r: 0xaa, g: 0xaa, b: 0xaa)

// Test default toString method
/// Expect: Color.Red
println(r)
/// Expect: Color.Red
println(Color.Red)
/// Expect: Color.Green
println(g)
/// Expect: Color.Green
println(Color.Green)
/// Expect: Color.Blue
println(b)
/// Expect: Color.Blue
println(Color.Blue)
/// Expect: Color.RGB(r: 170, g: 170, b: 170)
println(gray)
/// Expect: Color.RGB(r: 170, g: 170, b: 170)
println(Color.RGB(r: 0xaa, g: 0xaa, b: 0xaa))

// Test default hash method
/// Expect: true
println(r.hash() == Color.Red.hash())
/// Expect: true
println(g.hash() == Color.Green.hash())
/// Expect: true
println(b.hash() == Color.Blue.hash())
/// Expect: true
println(gray.hash() == Color.RGB(r: 0xaa, g: 0xaa, b: 0xaa).hash())
/// Expect: false
println(r.hash() == Color.Blue.hash())
/// Expect: false
println(r.hash() == Color.Green.hash())
/// Expect: false
println(gray.hash() == Color.Red.hash())

// Test default eq method
/// Expect: true
println(r == Color.Red)
/// Expect: false
println(r == Color.Green)
/// Expect: false
println(r == Color.Blue)
/// Expect: true
println(gray == Color.RGB(r: 0xaa, g: 0xaa, b: 0xaa))
/// Expect: false
println(gray == Color.RGB(r: 0x33, g: 0x33, b: 0x33))
/// Expect: false
println(gray == Color.Green)

// Test calling method
/// Expect: 0xFF0000 0xFF0000
println(Color.Red.hex(), r.hex())
/// Expect: 0x00FF00 0x00FF00
println(Color.Green.hex(), g.hex())
/// Expect: 0x0000FF 0x0000FF
println(Color.Blue.hex(), b.hex())
/// Expect: todo todo
println(Color.RGB(r: 0xaa, g: 0xaa, b: 0xaa).hex(), gray.hex())

enum Color2 {
  Red
  Green
  Blue

  func toString(self): String = "custom Color2#toString implementation"
  func hash(self): Int = 17
  func eq(self, other: Color2): Bool {
    println("[Color2#eq] here")
    false
  }
}

// Test custom toString method
/// Expect: custom Color2#toString implementation
println(Color2.Red.toString())

// Test custom hash method
/// Expect: 17
println(Color2.Green.hash())

// Test custom eq method
/// Expect: [Color2#eq] here
/// Expect: false
println(Color2.Blue == Color2.Blue)

// // Test generic enum

// enum List<T> {
//   Cons(value: T, next: List<T>)
//   Nil

//   // Silly static method
//   func lengthOf<T>(list: List<T>): Int {
//     list.length()
//   }

//   func length(self): Int {
//     var length = 0
//     var node = self
//     while true {
//       match node {
//         List.Cons(_, next) => {
//           length += 1
//           node = next
//         }
//         List.Nil => break
//       }
//     }

//     length
//   }
// }

// val list = List.Cons(value: "a", next: List.Cons(value: "b", next: List.Cons(value: "c", next: List.Nil)))
// /// Expect: 3 3
// println(list.length(), List.lengthOf(list))
