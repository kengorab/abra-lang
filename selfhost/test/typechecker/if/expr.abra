val a = if true 123 else 456
val _: Int = a

val b = if true {
  val x = 1
  [x]
} else {
  []
}
val _: Int[] = b

val c = if true {
  []
} else {
  val x = 1
  [x]
}
val _: Int[] = c

val d = if true {
  None
} else {
  val x = 1
  Some([x])
}
val _: Int[]? = d

val e = if true {
  val x = 1
  Some([x])
} else {
  None
}
val _: Int[]? = e

val f = if true { Some(123) } else { None }
val _: Int? = f

val g = if true { None } else { Some(123) }
val _: Int? = g

val h = if true {
  if false Some(123) else Some(456)
} else {
  None
}
val _: Int? = h

val i = if (if None true else false) 123 else 456
val _: Int = i

val j_: Int? = Some(123)
val j = if j_ |j| { j } else 0
val _: Int = j

type Foo1 { a: Int }
val k = if true Foo1(a: 1) else Foo1(a: 2)
val _: Foo1 = k

enum Foo2 { Bar, Baz }
val l = if true Foo2.Bar else Foo2.Baz
val _: Foo2 = l
