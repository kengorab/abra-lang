var _: Int  // |
[]          // | <- make sure this doesn't get parsed as `var d: Int[]`

var _: Int[][]
var _: Int?
var _: Int??
var _: Int[]?
var _: Int[]?[]

val _: Array<T>
val _: Map<K, V>
val _: Foo<A, B[],>
val _: Foo<A, B?[], Bar<B>>

val _: Foo<A, B?[], Bar<B>>? = None

val _: (Int)[]
val _: (Int)
val _: (A, B[], C?, D<(A, B)>)

val _: (Int) => Int
val _: (Int[], Int?) => Int
val _: ((Int) => Int, Int?) => Int
val _: () => Int
val _: () => (Int) => Int
val _: () => ((Int) => Int) => Int
val _: () => Int[]
val _: (() => Int)[]
val _: () => Int?
val _: (() => Int)?