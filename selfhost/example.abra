//"hello world!"
//65
//3.14
//
//// println("a")

//[1, 2, 3].length
// true

// stdoutWrite("hello")
// println(1 +23)

// Array.withCapacity<Int>(10).isEmpty()
// true
// "hello".length.toString().length.toString().length

//3 * 12
// "ab".foo()

// val a = if true 1 else 2
// val a = [true, false]
// println(a)
// val b = [[1, 2], [3, 4]]
// println(b.toString())
// val s = "a"
// val b = s._buffer
// b.store(44.asByte())
// println(s)

// val floatArr = [0.12, 3.45, 6.0]
// println(floatArr)



// val boolArr = [true, false, true]
// println(boolArr)

// val arr = [1, 2, 3]
// arr.push(4)
// println(arr.length)

val v : Bool? = Some(true)
if v |v_| println(v_) else println("nope")
val x = if v |v_| !v_ else false
println("x:", x)

println("done")

// // Default-valued parameters
// func foo(a: Int, b = bar(a), c = bar(a, b), arr = [a, b, c]): Int = a + b + c + arr.length
// func bar(x: Int, y = 10): Int = x + y
// /// Expect: 31
// println(foo(2))


// type RangeIterator2 {
//   start: Int
//   end: Int
//   stepBy: Int
//   _i: Int = 0

//   func next(self): Int? {
//     val offset = self._i * self.stepBy
//     if self.start + offset >= self.end {
//       None
//     } else {
//       self._i += 1
//       Some(self.start + offset)
//     }
//   }
// }

// val r = RangeIterator2(start: 0, end: 3, stepBy: 1, _i: 0)
// for n in r {
//   println("item:", n)
// }
// if r.next() |n| {
//   println("item exists", n)
// } else {
//   println("nope")
// }
// if r.next() |n| {
//   println("item exists", n)
// } else {
//   println("nope")
// }
// if r.next() |n| {
//   println("item exists", n)
// } else {
//   println("nope")
// }

// if r.next() |n| {
//   println("item exists", n)
// } else {
//   println("nope")
// }
