type Foo {
  func number(self): Int = 123

  func printNumber(self, arr: Int[]) {
    val n = plusOne(() => {
      val num = self.number()
      arr.push(num)
      num
    })
    println("number:", n)
  }
}

func plusOne(fn: () => Int): Int = fn() + 1

val f = Foo()
val arr = [1, 2, 3]
f.printNumber(arr)
println(arr)

// func foo() {
//   var arr = [1, 2, 3]

//   val five = plusOne(() => {
//     arr = [1]
//     arr.push(4)
//     arr.length
//   })
//   println(five)
//   println(arr)
// }

// foo()

// func makeAdder(b: Bool, x: Int): (Int) => Int {
//   i => i + ((if b 1 else -1) * x)
// }
// // func makeAdder(f: Float, x: Int): (Int) => Int {
// //   i => i + (f.floor() * x)
// // }
// val addOne = makeAdder(false, 1)
// /// Expect: 12
// println(addOne(11))

// val bang = "!"
// func bangbang(): String = bang + "!"
// func functionReferencingClosureAsValue() {
//   val fn = bangbang
//   println(fn())
// }
// /// Expect: !!
// functionReferencingClosureAsValue()