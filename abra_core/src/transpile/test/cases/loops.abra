// For loops
// Iterate over array
println("Iterate over array:")
val arr = [1, 2, 3]
for item in arr {       // Without index
  println(item)
}
for item, idx in arr {  // With index
  println((item, idx))
}

// Iterate over set
println("Iterate over set:")
val set = #{1, 2, 3}
for item in set {       // Without index
  println(item)
}
for item, idx in set {  // With index
  println((item, idx))
}

// Iterate over map
println("Iterate over map:")
val map = { a: "one", b: "two", c: "three" }
for key in map {       // Without `value`
  println(key)
}
for k, v in map {      // With `value`
  println((k, v))
}

// Break out of for-loop
println("For-loop break:")
for i in range(0, 10) {
  if i == 2 break
  println(i)
}

// Continue within for-loop
println("For-loop continue:")
for i in range(0, 4) {
  if i == 2 continue
  println(i)
}

// While loops
println("While-loop:")
(() => {
  val arr = [1, 2, 3]
  var i = 0
  while arr[i] {
    println(arr[i])
    i += 1
  }
})()

// Condition binding
println("While-loop with condition binding:")
(() => {
  val arr = [1, 2, 3]
  var i = 0
  while arr[i] |item| {
    println(arr[i], item)
    i += 1
  }
})()

// Break out of while-loop
println("While-loop break:")
while true {
  println("first loop")
  break
}

// Continue within while-loop
println("While-loop continue:")
(() => {
  var i = 0
  while i < 4 {
    if i == 2 {
      i += 1
      continue
    }
    println(i)
    i += 1
  }
})()

/* assert(stdout):
Iterate over array:
1
2
3
(1, 0)
(2, 1)
(3, 2)
Iterate over set:
3
2
1
(3, 0)
(2, 1)
(1, 2)
Iterate over map:
a
c
b
(a, one)
(c, three)
(b, two)
For-loop break:
0
1
For-loop continue:
0
1
3
While-loop:
1
2
3
While-loop with condition binding:
1 1
2 2
3 3
While-loop break:
first loop
While-loop continue:
0
1
3
*/
