func helloWorld() {
  println("hello world")
}
helloWorld()

func returnOne(): Int {
  if true { 1 } else { 2 }
}
println(returnOne())

func defaultArgs(a: String, b = "!"): String = a + b
println(defaultArgs("hello"), defaultArgs("hello", " world"))

func makeMap<K, V>(key: K, value: V): Map<K, V> = { (key): value }
println(makeMap("hello", { targets: ["world"] }))

func withVarargs(a: Int, *b: Int[]) = println(a, b)
withVarargs(1, 2, 3, 4, 5)

func withNamedArguments(prefix: String, suffix = "!"): String = prefix + suffix
println(withNamedArguments(prefix: "hello"), withNamedArguments(suffix: "!!", prefix: "Hello"))

// Test recursion
func fib(n: Int): Int = if n < 2 1 else fib(n - 2) + fib(n - 1)
println(fib(0), fib(1), fib(2), fib(3), fib(4), fib(5), fib(6), fib(7))

// Test (needlessly complex) mutual recursion
func f1(n: Int): String = if n <= 0 "" else f2(n - 1)
func f2(n: Int): String = "." + f1(n)
println(f1(5))

// Nested functions, make sure functions with same name aren't overwritten
func inner2() = println("initial inner2")
func outer() {
  func inner() {
    func inner2() = println("inner2")
    inner2()
    foo() // Make sure function is pre-defined for access here
    println("inner")
  }
  func foo() {}
  inner()
  println("outer")
}
outer()
inner2()

// Closures
func hello1(h: String) {
  func sayHi() = println("hello " + h)
  sayHi()
}
hello1("world")

func hello2(h: String): () => Unit {
  func sayHi() = println("hello " + h)
  sayHi
}
hello2("world")()

func hello3(): (String) => Unit {
  func sayHi(h: String) {
    println("hello " + h)
  }
  sayHi
}
hello3()("world")

// The following 2 don't work yet
//val H = "hello"
//func hello4(h: String) {
//  func sayHi(H: String) = println(H + " " + h)
//  sayHi(H)
//}
//hello4("world")

//func hello5(h: String): () => Unit {
//  func sayHi() = println(H + " " + h)
//  sayHi
//}
//hello5("world")()

func newCounter(start: Int): () => Unit {
  var counter = start
  func inc() {
    counter += 1
    print(counter)
  }
  inc
}
val count = newCounter(0)
count() count() count()
println() // Just a spacer for test readability

func newCountdown(n: Int): () => Unit {
  var count = n
  func rec() {
    print(count)
    val _ = if count > 0 { // If-statements haven't been implemented yet, only if-expressions -__-
      count -= 1
      rec()
      0
    } else {
      println()
      0
    }
  }
  rec
}
val countdown = newCountdown(5)
countdown()

/* assert(stdout):
hello world
1
hello! hello world
{ hello: { targets: [world] } }
1 [2, 3, 4, 5]
hello! Hello!!
1 1 2 3 5 8 13 21
.....
inner2
inner
outer
initial inner2
hello world
hello world
hello world
123
543210
*/
