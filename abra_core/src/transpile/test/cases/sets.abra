println(#{}, #{24}, #{1, 1, 1, 1})

// Test equality operators
println(#{} == #{})
println(#{1, 2, 4} != #{1, 2, 3})

// Fields
println(#{}.size, #{1}.size, #{1, 2, 2, 3, 3, 1}.size)

// Methods
// isEmpty
println(#{}.isEmpty(), #{1, 2, "3"}.isEmpty())

// enumerate
println(
  #{}.enumerate(),
  #{"a"}.enumerate(),
  #{"a", "b", "c"}.enumerate(),
)

// contains
println(#{}.contains("a"), #{"a", "b"}.contains("a"))

// insert
println(
  (() => {
    val set = #{1}
    set.insert(3)
    set
  })(),
  (() => {
    val set = #{1}
    set.insert(3)
    set.insert(3)
    set
  })()
)

// remove
println(
  (() => {
    val set = #{1, 2, 3}
    set.remove(1)
    set
  })(),
  (() => {
    val set = #{1, 2}
    set.remove(1)
    set.remove(2)
    set.remove(3)
    set
  })()
)

// map
println(
  (() => {
    val s: Set<Int> = #{}
    s.map(_ => "asdf")
  })(),
  #{"a", "b"}.map(w => w.length),
)

// filter
println(
  (() => {
    val s: Set<Int> = #{}
    s.filter(_ => true)
  })(),
  #{1, 2, 3, 4, 5}.filter(n => n % 2 == 0),
)

// reduce
println(
  (() => {
    val s: Set<Int> = #{}
    s.reduce(0, (acc, n) => acc + n)
  })(),
  #{1, 2, 3, 4, 5}.reduce(0, (acc, n) => acc + n),
)

// asArray
println(
  #{}.asArray(),
  #{1}.asArray(),
  #{3, 4, 5}.asArray(),
)

// union
println(
  #{}.union(#{}),
  #{1}.union(#{1, 2}),
  (() => {
    val s1 = #{1, 3, 5}
    val s2 = #{2, 4,}
    s1.union(s2)
  })()
)

// difference
println(
  #{}.difference(#{}),
  #{1}.difference(#{1, 2}),
  #{1, 2}.difference(#{2})
)

// intersection
println(
  #{1, 2, 3}.intersection(#{}),
  #{1, 2}.intersection(#{3, 4}),
  #{1}.intersection(#{1, 2})
)

/* assert(stdout):
#{} #{24} #{1}
true
true
0 1 3
true false
[] [(a, 0)] [(a, 0), (c, 1), (b, 2)]
false true
#{3, 1} #{3, 1}
#{3, 2} #{}
[] [1, 1]
#{} #{4, 2}
0 15
[] [1] [5, 4, 3]
#{} #{2, 1} #{5, 4, 3, 2, 1}
#{} #{} #{1}
#{} #{} #{1}
*/
