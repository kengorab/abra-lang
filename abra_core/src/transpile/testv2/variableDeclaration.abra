// Basic declaration (val)

val x = 1
val y = 2
val z = [x, y]
/// Expect: [1, 2]
println(z)

// Basic declaration (var)
//   Note: an uninitialized var will hold value `None`, even though the type is `Bool` (and not `Bool?`). This will be
//   fixed in future versions, but for now we capture the behavior here.
var x_ = 3
var y_: Bool
/// Expect: 3 None
println(x_, y_)

// Destructuring

func tupleBasic() {
  val (a, b, c) = (1, ("a", "b"), 2)
  /// Expect: 1 ("a", "b") 2
  println(a, b, c)
}
tupleBasic()

func tupleNested() {
  val (a_, (b1, b2), c_) = (1, ("a", "b"), 2)
  /// Expect: 1 a b 2
  println(a_, b1, b2, c_)
}
tupleNested()

func arraySplatEnd() {
  val [A, *B] = [(1, 2), (3, 4), (5, 6), (7, 8)]
  /// Expect: (1, 2) [(3, 4), (5, 6), (7, 8)]
  println(A, B)
}
arraySplatEnd()

func arraySplatMiddle() {
  val [A2, *B2, C2] = [(1, 2), (3, 4), (5, 6), (7, 8)]
  /// Expect: (1, 2) [(3, 4), (5, 6)] (7, 8)
  println(A2, B2, C2)
}
arraySplatMiddle()

func arrayComplex() {
  val [A3, *B3, (C3_1, C3_2), D, E, F] = [(1, 2), (3, 4), (5, 6), (7, 8)]
  /// Expect: (1, 2) [] 3 4 (5, 6) (7, 8) None
  println(A3, B3, C3_1, C3_2, D, E, F)
}
arrayComplex()

func stringSplat() {
  val [h, e, *llowor, l, d] = "helloworld"
  /// Expect: h e llowor l d
  println(h, e, llowor, l, d)
}
stringSplat()

func stringSplatEmpty1() {
  val [H, *i, foo] = "hi"
  /// Expect: h  i end
  println(H, i, foo, "end")
}
stringSplatEmpty1()

func stringSplatEmpty2() {
  val [H2, *i2, foo2, bar] = "hi"
  /// Expect: h  i  end
  println(H2, i2, foo2, bar, "end")
}
stringSplatEmpty2()
