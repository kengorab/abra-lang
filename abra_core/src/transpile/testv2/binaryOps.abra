// Arithmetic operations

func arithmeticAdd() {
  val a1 = 1
  val b1 = 2
  /// Expect: 3
  println(a1 + b1)

  val a2 = 1
  val b2 = 2.1
  /// Expect: 3.1
  println(a2 + b2)

  val a3 = 1.1
  val b3 = 2
  /// Expect: 3.1
  println(a3 + b3)

  val a4 = 1.1
  val b4 = 2.1
  /// Expect: 3.2
  println(a4 + b4)
}
arithmeticAdd()

func stringConcat() {
  val s1 = "hello"
  val s2 = "world"
  /// Expect: helloworld
  println(s1 + s2)

  val a = 1
  /// Expect: hello1
  println(s1 + a)

  /// Expect: 1world
  println(a + s2)
}
stringConcat()

func arithmeticSub() {
  val a1 = 2
  val b1 = 1
  /// Expect: 1
  println(a1 - b1)

  val a2 = 2.1
  val b2 = 1
  /// Expect: 1.1
  println(a2 - b2)

  val a3 = 2
  val b3 = 1.1
  /// Expect: 0.9
  println(a3 - b3)

  val a4 = 2.1
  val b4 = 1.1
  /// Expect: 1.0
  println(a4 - b4)
}
arithmeticSub()

func arithmeticMul() {
  val a1 = 2
  val b1 = 2
  /// Expect: 4
  println(a1 * b1)

  val a2 = 2.1
  val b2 = 2
  /// Expect: 4.2
  println(a2 * b2)

  val a3 = 2
  val b3 = 1.1
  /// Expect: 2.2
  println(a3 * b3)

  val a4 = 2.1
  val b4 = 1.1
  /// Expect: 2.31
  println(a4 * b4)
}
arithmeticMul()

func arithmeticDiv() {
  val a1 = 2
  val b1 = 2
  /// Expect: 1.0
  println(a1 / b1)

  val a2 = 2.1
  val b2 = 2
  /// Expect: 1.05
  println(a2 / b2)

  val a3 = 2
  val b3 = 1.1
  /// Expect: 1.818182
  println(a3 / b3)

  val a4 = 2.1
  val b4 = 1.1
  /// Expect: 1.909091
  println(a4 / b4)
}
arithmeticDiv()

func arithmeticMod() {
  val a1 = 7
  val b1 = 5
  /// Expect: 2
  println(a1 % b1)

  val a2 = 5.25
  val b2 = 2.5
  /// Expect: 0.25
  println(a2 % b2)
}
arithmeticMod()

func arithmeticPow() {
  val six = 6
  val twentyFour = 24
  val sixPointOne = 6.1
  val twentyFourPointTwo = 24.2

  /// Expect: 4738381338321616896.0
  println(six ** twentyFour)
  /// Expect: 10115375455797929984.0
  println(sixPointOne ** twentyFourPointTwo)
  /// Expect: 7045568477354638336.0
  println(sixPointOne ** twentyFour)
  /// Expect: 6780477189624366080.0
  println(six ** twentyFourPointTwo)
}
arithmeticPow()

func comparisonOps() {
  /// Expect: true true true true
  println(1 < 6, 1.1 < 6, 1 < 6.1, 1.1 < 6.1)

  /// Expect: true true true true
  println(1 <= 6, 1.1 <= 6, 1 <= 6.1, 1.1 <= 6.1)
  /// Expect: true true true true
  println(6 <= 6, 6.0 <= 6, 6 <= 6.0, 6.0 <= 6.0)

  /// Expect: false false false false
  println(1 > 6, 1.1 > 6, 1 > 6.1, 1.1 > 6.1)

  /// Expect: false false false false
  println(1 >= 6, 1.1 >= 6, 1 >= 6.1, 1.1 >= 6.1)
  /// Expect: true true true true
  println(6 >= 6, 6.0 >= 6, 6 >= 6.0, 6.0 >= 6.0)
}
comparisonOps()

func equalityOps() {
  /// Expect: true true false false false false
  println(123 == 123, 123 == 123.0, 123 == "123", 123 == true, 123 == [1, 2], 123 == ("a", 3))
  /// Expect: true true false false false false
  println(123.0 == 123, 123.0 == 123.0, 123.0 == "123", 123.0 == true, 123.0 == [1, 2], 123.0 == ("a", 3))
  /// Expect: false false true false false false
  println("123" == 123, "123" == 123.0, "123" == "123", "123" == true, "123" == [1, 2], "123" == ("a", 3))
  /// Expect: false false false true false false
  println(true == 123, true == 123.0, true == "123", true == true, true == [1, 2], true == ("a", 3))
  /// Expect: false false false false true false
  println([1, 2] == 123, [1, 2] == 123.0, [1, 2] == "123", [1, 2] == true, [1, 2] == [1, 2], [1, 2] == ("a", 3))
  /// Expect: false false false false false true
  println(("a", 3) == 123, ("a", 3) == 123.0, ("a", 3) == "123", ("a", 3) == true, ("a", 3) == [1, 2], ("a", 3) == ("a", 3))

  // Nested
  /// Expect: false false
  println(
    [[1, 2], [3, 4], [5, 6]] == [[1, 2], [3, -4], [5, 6]],
    ([1, 2], "a", 3) == ([1, 2], "a", -3)
  )
}
equalityOps()
