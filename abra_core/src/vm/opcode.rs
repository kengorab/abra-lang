#[derive(Clone, Display, Debug, PartialEq)]
#[repr(u8)]
pub enum Opcode {
    Constant = 0,
    Nil,
    IConst0,
    IConst1,
    IConst2,
    IConst3,
    IConst4,
    IAdd,
    ISub,
    IMul,
    IDiv,
    FAdd,
    FSub,
    FMul,
    FDiv,
    IMod,
    FMod,
    I2F,
    F2I,
    Invert,
    StrConcat,
    T,
    F,
    Negate,
    LT,
    LTE,
    GT,
    GTE,
    Eq,
    Neq,
    New,
    GetField,
    MapMk,
    MapLoad,
    ArrMk,
    ArrLoad,
    ArrSlc,
    GStore,
    LStore0,
    LStore1,
    LStore2,
    LStore3,
    LStore4,
    LStore,
    UStore0,
    UStore1,
    UStore2,
    UStore3,
    UStore4,
    UStore,
    GLoad,
    LLoad0,
    LLoad1,
    LLoad2,
    LLoad3,
    LLoad4,
    LLoad,
    ULoad0,
    ULoad1,
    ULoad2,
    ULoad3,
    ULoad4,
    ULoad,
    Jump,
    JumpIfF,
    JumpB,
    Invoke,
    ClosureMk,
    CloseUpvalue,
    CloseUpvalueAndPop,
    Pop,
    PopN,
    Dup,
    Return,
}

impl From<&u8> for Opcode {
    fn from(i: &u8) -> Self {
        match i {
            0 => Opcode::Constant,
            1 => Opcode::Nil,
            2 => Opcode::IConst0,
            3 => Opcode::IConst1,
            4 => Opcode::IConst2,
            5 => Opcode::IConst3,
            6 => Opcode::IConst4,
            7 => Opcode::IAdd,
            8 => Opcode::ISub,
            9 => Opcode::IMul,
            10 => Opcode::IDiv,
            11 => Opcode::FAdd,
            12 => Opcode::FSub,
            13 => Opcode::FMul,
            14 => Opcode::FDiv,
            15 => Opcode::IMod,
            16 => Opcode::FMod,
            17 => Opcode::I2F,
            18 => Opcode::F2I,
            19 => Opcode::Invert,
            20 => Opcode::StrConcat,
            21 => Opcode::T,
            22 => Opcode::F,
            23 => Opcode::Negate,
            24 => Opcode::LT,
            25 => Opcode::LTE,
            26 => Opcode::GT,
            27 => Opcode::GTE,
            28 => Opcode::Eq,
            29 => Opcode::Neq,
            30 => Opcode::New,
            31 => Opcode::GetField,
            32 => Opcode::MapMk,
            33 => Opcode::MapLoad,
            34 => Opcode::ArrMk,
            35 => Opcode::ArrLoad,
            36 => Opcode::ArrSlc,
            37 => Opcode::GStore,
            38 => Opcode::LStore0,
            39 => Opcode::LStore1,
            40 => Opcode::LStore2,
            41 => Opcode::LStore3,
            42 => Opcode::LStore4,
            43 => Opcode::LStore,
            44 => Opcode::UStore0,
            45 => Opcode::UStore1,
            46 => Opcode::UStore2,
            47 => Opcode::UStore3,
            48 => Opcode::UStore4,
            49 => Opcode::UStore,
            50 => Opcode::GLoad,
            51 => Opcode::LLoad0,
            52 => Opcode::LLoad1,
            53 => Opcode::LLoad2,
            54 => Opcode::LLoad3,
            55 => Opcode::LLoad4,
            56 => Opcode::LLoad,
            57 => Opcode::ULoad0,
            58 => Opcode::ULoad1,
            59 => Opcode::ULoad2,
            60 => Opcode::ULoad3,
            61 => Opcode::ULoad4,
            62 => Opcode::ULoad,
            63 => Opcode::Jump,
            64 => Opcode::JumpIfF,
            65 => Opcode::JumpB,
            66 => Opcode::Invoke,
            67 => Opcode::ClosureMk,
            68 => Opcode::CloseUpvalue,
            69 => Opcode::CloseUpvalueAndPop,
            70 => Opcode::Pop,
            71 => Opcode::PopN,
            72 => Opcode::Dup,
            73 => Opcode::Return,
            _ => unreachable!()
        }
    }
}

impl Opcode {
    pub fn num_expected_imms(&self) -> u8 {
        match self {
            Opcode::Constant |
            Opcode::Jump |
            Opcode::JumpIfF |
            Opcode::JumpB |
            Opcode::ArrMk |
            Opcode::MapMk |
            Opcode::LStore |
            Opcode::UStore |
            Opcode::PopN |
            Opcode::LLoad |
            Opcode::ULoad |
            Opcode::New |
            Opcode::GetField => 1,
            Opcode::Invoke => 2,
            _ => 0
        }
    }
}
