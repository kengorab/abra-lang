import * from "test"

describe("Float", () => {
  // Instance methods
  describe("#toString", () => {
    it("should return a stringified float", () => {
      expect(6.24.toString()).toEqual("6.24")
      expect((-6.24).toString()).toEqual("-6.24")
    })
  })

  describe("#floor", () => {
    it("should return the closest, lowest integer to self", () => {
      expect(6.24.floor()).toEqual(6)
      expect(6.7.floor()).toEqual(6)
    })

    it("should return the closest, lowest integer to self, if self is negative", () => {
      expect((-6.7).floor()).toEqual(-7)
    })
  })

  describe("#ceil", () => {
    it("should return the closest, highest integer to self", () => {
      expect(6.24.ceil()).toEqual(7)
      expect(6.7.ceil()).toEqual(7)
    })

    it("should return the closest, highest integer to self, if self is negative", () => {
      expect((-6.7).ceil()).toEqual(-6)
    })
  })

  describe("#round", () => {
    it("should return the closest, lowest integer to self, if decimal is <0.5", () => {
      expect(6.24.round()).toEqual(6)
    })

    it("should return the closest, highest integer to self, if decimal is >=0.5", () => {
      expect(6.5.round()).toEqual(7)
      expect(6.75.round()).toEqual(7)
    })
  })

  describe("#withPrecision", () => {
    it("should return a Float with the specified number of decimal places", () => {
      expect(6.12345.withPrecision(0)).toEqual(6.0)
      expect(6.98765.withPrecision(0)).toEqual(6.0)
      expect(1.23456.withPrecision(2)).toEqual(1.23)
    })

    it("should return self if precision is negative", () => {
      expect(6.98765.withPrecision(-1)).toEqual(6.98765)
    })
  })

  describe("#abs", () => {
    it("should return self if self >= 0", () => {
      expect(6.24.abs()).toEqual(6.24)
      expect(0.00.abs()).toEqual(0.00)
    })

    it("should return -self if self <0", () => {
      expect((-6.24).abs()).toEqual(6.24)
    })
  })
})
