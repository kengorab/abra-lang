import * from "test"

describe("String", () => {
  // Fields
  describe(".length", () => {
    it("should return 0 if self is empty", () => {
      expect("".length).toEqual(0)
    })

    it("should return 1 if self is only one character", () => {
      expect("?".length).toEqual(1)
    })

    it("should return the length of self", () => {
      expect("hello world!".length).toEqual(12)
    })
  })

  // Instance methods
  describe("#toString", () => {
    it("should return a stringified self", () => {
      expect("hello".toString()).toEqual("hello")
    })
  })

  describe("#toLower", () => {
    it("should return the lowercased version of self", () => {
      expect("aSDF qWER".toLower()).toEqual("asdf qwer")
    })
  })

  describe("#toUpper", () => {
    it("should return the uppercased version of self", () => {
      expect("asdF qweR".toUpper()).toEqual("ASDF QWER")
    })
  })

  describe("#padLeft", () => {
    it("should return self padded on the left up to max length", () => {
      expect("asdf".padLeft(7, "!")).toEqual("!!!asdf")
      expect("asdf".padLeft(10, " ")).toEqual("      asdf")
    })

    it("should return self if self.length >= provided length", () => {
      expect("asdf".padLeft(4, "!")).toEqual("asdf")
      expect("asdf".padLeft(-104, "!")).toEqual("asdf")
    })
  })

  describe("#trim", () => {
    it("should return a string with leading and trailing whitepsace removed", () => {
      expect("   asdf   ".trim()).toEqual("asdf")
      expect(" \tasdf\t ".trim()).toEqual("asdf")
    })
  })

  describe("#trimStart", () => {
    it("should return a string with only leading whitepsace removed", () => {
      expect("   asdf   ".trimStart()).toEqual("asdf   ")
      expect(" \tasdf\t ".trimStart()).toEqual("asdf\t ")
    })

    it("should return a string with only leading instances of string removed", () => {
      expect("!!asdf  ".trimStart(pattern: "!")).toEqual("asdf  ")
      expect("  !!asdf  ".trimStart(pattern: "!")).toEqual("  !!asdf  ")
      expect("!!  asdf  ".trimStart(pattern: "!")).toEqual("  asdf  ")
      expect("!!!  asdf  ".trimStart(pattern: "!!")).toEqual("!  asdf  ")
    })
  })

  describe("#trimEnd", () => {
    it("should return a string with only trailing whitepsace removed", () => {
      expect("   asdf   ".trimEnd()).toEqual("   asdf")
      expect(" \tasdf\t ".trimEnd()).toEqual(" \tasdf")
    })

    it("should return a string with only leading instances of string removed", () => {
      expect("  asdf!!".trimEnd(pattern: "!")).toEqual("  asdf")
      expect("  asdf!!  ".trimEnd(pattern: "!")).toEqual("  asdf!!  ")
      expect("  asdf  !!".trimEnd(pattern: "!")).toEqual("  asdf  ")
      expect("  asdf  !!!".trimEnd(pattern: "!!")).toEqual("  asdf  !")
    })
  })

  describe("#split", () => {
    it("should return an array of strings, splitting self by splitter", () => {
      expect("a s d f".split(splitter: " ")).toEqual(["a", "s", "d", "f"])
      expect("  a  b  c d".split("  ")).toEqual(["", "a", "b", "c d"])
      expect("asdf".split("")).toEqual(["a", "s", "d", "f"])
      expect("a\ns\nd\nf".split("\n")).toEqual(["a", "s", "d", "f"])
      expect("asdf".split("qwer")).toEqual(["asdf"])
    })
  })

  describe("#splitAt", () => {
    it("should return a tuple of strings, split at index", () => {
      expect("hello!".splitAt(0)).toEqual(("", "hello!"))
      expect("hello!".splitAt(10)).toEqual(("hello!", ""))

      expect("hello!".splitAt(1)).toEqual(("h", "ello!"))
    })

    it("should handle a negative index value", () => {
      expect("hello!".splitAt(-1)).toEqual(("hello", "!"))
      expect("hello!".splitAt(-10)).toEqual(("", "hello!"))
    })
  })

  describe("#lines", () => {
    it("should return an array of strings, of self split by newline", () => {
      expect("asdf\nqwer\nzxcv".lines()).toEqual(["asdf", "qwer", "zxcv"])
    })
  })

  describe("#chars", () => {
    it("should return an array of strings, of self split by character", () => {
      expect("asdf".chars()).toEqual(["a", "s", "d", "f"])
    })
  })

  describe("#parseInt", () => {
    it("should return None if self is not a valid integer", () => {
      expect("hello".parseInt()).toEqual(None)
      expect("123 456".parseInt()).toEqual(None)
      expect("123.456".parseInt()).toEqual(None)
    })

    it("should return parsed Int if self is a valid integer", () => {
      expect("123456".parseInt()).toEqual(123456)
      expect("-123456".parseInt()).toEqual(-123456)
    })

    it("should return parsed Int (w.r.t. given radix) if self is a valid integer", () => {
      expect("ba55".parseInt(radix: 16)).toEqual(47701)
    })
  })

  describe("#parseFloat", () => {
    it("should return None if self is not a valid float", () => {
      expect("hello".parseFloat()).toEqual(None)
      expect("123 456".parseFloat()).toEqual(None)
    })

    it("should return parsed Float if self is a valid float", () => {
      expect("123456.7".parseFloat()).toEqual(123456.7)
      expect("-123456.7".parseFloat()).toEqual(-123456.7)

      expect("123456".parseFloat()).toEqual(123456.0)
      expect("-123456".parseFloat()).toEqual(-123456.0)
    })
  })

  describe("#concat", () => {
    it("should return a string with given value(s) appended to self", () => {
      expect("hello".concat("!")).toEqual("hello!")
      expect("hello".concat(" ", "world", "!")).toEqual("hello world!")
    })

    it("should return a string with given stringified values appended to self", () => {
      expect("asdf".concat(true, [1, 2, 3], { a: 1 })).toEqual("asdftrue[1, 2, 3]{ a: 1 }")
    })
  })
})
