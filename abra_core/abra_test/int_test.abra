import * from "test"

describe("Int", () => {
  // Instance methods
  describe("#toString", () => {
    it("should return a stringified int", () => {
      expect(6.toString()).toEqual("6")
      expect((-6).toString()).toEqual("-6")
    })
  })

  describe("#abs", () => {
    it("should return self if self >= 0", () => {
      expect(6.abs()).toEqual(6)
      expect(0.abs()).toEqual(0)
    })

    it("should return -self if self <0", () => {
      expect((-6).abs()).toEqual(6)
    })
  })

  describe("#asBase", () => {
    it("should return a representation of self in the given base", () => {
        expect(6.asBase(0)).toEqual("6")
        expect(6.asBase(1)).toEqual("6")
        expect(6.asBase(37)).toEqual("6")
        expect(6.asBase(10)).toEqual("6")
        expect(24.asBase(8)).toEqual("30")
        expect(4040.asBase(16)).toEqual("fc8")
        expect(20.asBase(17)).toEqual("13")
        expect(24032.asBase(36)).toEqual("ijk")
    })
  })

  describe("#isEven", () => {
    it("should return true if self is even", () => {
      expect(0.isEven()).toEqual(true)
      expect(6.isEven()).toEqual(true)
      expect((-6).isEven()).toEqual(true)
    })

    it("should return false if self is odd", () => {
      expect(5.isEven()).toEqual(false)
    })
  })

  describe("#isOdd", () => {
    it("should return true if self is odd", () => {
      expect(1.isOdd()).toEqual(true)
      expect((-1).isOdd()).toEqual(true)
    })

    it("should return false if self is odd", () => {
      expect(0.isOdd()).toEqual(false)
      expect(6.isOdd()).toEqual(false)
    })
  })

  describe("#isBetween", () => {
    describe("when 'inclusive' is false", () => {
      it("should return true if self is between range", () => {
        expect(1.isBetween(0, 5)).toEqual(true)
        expect(2.isBetween(0, 5)).toEqual(true)
        expect(3.isBetween(0, 5)).toEqual(true)
        expect(4.isBetween(0, 5)).toEqual(true)
      })

      it("should return false if self is equal to an endpoint", () => {
        expect(0.isBetween(0, 5)).toEqual(false)
        expect(5.isBetween(0, 5)).toEqual(false)
      })
    })

    describe("when 'inclusive' is true", () => {
      it("should return true if self is between range", () => {
        expect(1.isBetween(lower: 0, upper: 5, inclusive: true)).toEqual(true)
        expect(2.isBetween(lower: 0, upper: 5, inclusive: true)).toEqual(true)
        expect(3.isBetween(lower: 0, upper: 5, inclusive: true)).toEqual(true)
        expect(4.isBetween(lower: 0, upper: 5, inclusive: true)).toEqual(true)
      })

      it("should return true if self is equal to an endpoint", () => {
        expect(0.isBetween(lower: 0, upper: 5, inclusive: true)).toEqual(true)
        expect(5.isBetween(lower: 0, upper: 5, inclusive: true)).toEqual(true)
      })
    })
  })
})
