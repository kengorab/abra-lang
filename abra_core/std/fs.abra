import Pointer, Byte from "./_intrinsics"
import "libc" as libc

export enum ReadFileError {
  CouldNotOpen(message: String)
  CouldNotClose(message: String)
  CouldNotSeek(message: String)
  CouldNotRead(message: String)
}

export func readFile(path: String): Result<String, ReadFileError> {
  val fd = libc.open(path._buffer, libc.O_RDONLY)
  if fd == -1 {
    val errMsg = _strerror(libc.errno())
    return Err(error: ReadFileError.CouldNotOpen(message: errMsg))
  }

  val len = libc.lseek(fd, 0, libc.SEEK_END)
  if len == -1 {
    val errMsg = _strerror(libc.errno())
    return Err(error: ReadFileError.CouldNotSeek(message: errMsg))
  }
  if libc.lseek(fd, 0, libc.SEEK_SET) == -1 {
    val errMsg = _strerror(libc.errno())
    return Err(error: ReadFileError.CouldNotSeek(message: errMsg))
  }

  val str = String.withLength(len)
  if libc.read(fd, str._buffer, len) == -1 {
    val errMsg = _strerror(libc.errno())
    return Err(error: ReadFileError.CouldNotRead(message: errMsg))
  }
  if libc.close(fd) == -1 {
    val errMsg = _strerror(libc.errno())
    return Err(error: ReadFileError.CouldNotClose(message: errMsg))
  }

  Ok(value: str)
}

export enum AccessMode {
  ReadOnly
  WriteOnly
  ReadWrite
}

export type File {
  _fd: Int
  accessMode: AccessMode

  func close(self): Result<Int, ReadFileError> {
    if libc.close(self._fd) == -1 {
      val errMsg = _strerror(libc.errno())
      // TODO: change ReadFileError to FileError (?)
      return Err(error: ReadFileError.CouldNotClose(message: errMsg))
    }

    Ok(self._fd)
  }

  func write(self, str: String) {
    // TODO: handle error here (and also in prelude:stdoutWrite)
    libc.write(self._fd, str._buffer, str.length)
  }

  func writeln(self, str: String = "") {
    // TODO: i can do better than this
    self.write(str)
    self.write("\n")
  }
}

export func openFile(path: String, accessMode: AccessMode): Result<File, ReadFileError> {
  val oflag = match accessMode {
    AccessMode.ReadOnly => libc.O_RDONLY
    AccessMode.WriteOnly => libc.O_WRONLY
    AccessMode.ReadWrite => libc.O_RDWR
  }
  val fd = libc.open(path._buffer, oflag)
  if fd == -1 {
    val errMsg = _strerror(libc.errno())
    return Err(error: ReadFileError.CouldNotOpen(message: errMsg))
  }

  Ok(File(_fd: fd, accessMode: accessMode))
}

export func getCurrentWorkingDirectory(): String {
  val buf = Pointer.malloc<Byte>(libc.PATH_MAX)

  val cwd = libc.getcwd(buf, libc.PATH_MAX)
  val len = libc.strlen(cwd._buffer)

  val str = String.withLength(len)
  str._buffer.copyFrom(buf, len)
  str
}

func _strerror(errno: Int): String {
  val buf = libc.strerror(errno)
  val len = libc.strlen(buf)
  val str = String.withLength(len)
  str._buffer.copyFrom(buf, len)
  str
}
