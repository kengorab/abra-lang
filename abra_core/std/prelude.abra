import "./_intrinsics" as intrinsics
import Pointer, Byte from "./_intrinsics"
import "libc" as libc

func stdoutWrite(str: String) {
  libc.write(libc.STDOUT_FILENO(), str._buffer, str.length)
}

func print(*items: Any[]) {
  for i in range(0, items.length) {
    val item = items._buffer.offset(i).load()
    stdoutWrite(item.toString())

    if i != items.length - 1 {
      stdoutWrite(" ")
    }
  }
}

func println(*items: Any[]) {
  print(items: items)
  stdoutWrite("\n")
}

type RangeIterator {
  start: Int
  end: Int
  stepBy: Int
  _i: Int = 0

  func next(self): Int? {
    val offset = self._i * self.stepBy
    if self.start + offset >= self.end {
      None
    } else {
      self._i += 1
      self.start + offset
    }
  }
}

func range(start: Int, end: Int, stepBy = 1): RangeIterator = RangeIterator(start: start, end: end, stepBy: stepBy)

func flattenOption<T>(value: T??): T? = if value |v| v else None

type Int {
  func asFloat(self): Float = intrinsics.intAsFloat(self)

  func abs(self): Int = if self < 0 { -self } else { self }

  func asBase(self, base: Int): String? {
    if !((2 <= base && base <= 36) || base == 62) return None

    // TODO: Extract to constants on String (when static members are a thing)
    val digits = "0123456789abcdefghijklmnopqrstuvwxyz"
    val digitsBase62 = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"

    val isNeg = self < 0
    var number = self.abs()

    var maxPower = 1
    while base ** maxPower <= number {
      maxPower += 1
    }

    if isNeg { maxPower += 1 }
    val str = String.withLength(maxPower)
    var i = maxPower - 1

    while number != 0 {
      val rem = number % base
      val D = if base == 62 digitsBase62 else digits
      str._buffer.offset(i).store(D._buffer.offset(rem).load())
      i -= 1
      number = (number / base).asInt()
    }

    if isNeg {
      str._buffer.offset(i).store(Byte.fromInt(45)) // '-'
    }

    str
  }

  func hex(self): String = "0x" + (self.asBase(16) ?: "")

  func isEven(self): Bool = self % 2 == 0

  func isOdd(self): Bool = self % 2 != 0

  func isBetween(self, lower: Int, upper: Int, inclusive = false): Bool {
    if inclusive {
      lower <= self && self <= upper
    } else {
      lower < self && self < upper
    }
  }
}

type Float {
  func asInt(self): Int = intrinsics.floatAsInt(self)

  func abs(self): Float = if self < 0 { -self } else { self }

  func floor(self): Int = intrinsics.floor(self)

  func ceil(self): Int = intrinsics.ceil(self)

  func round(self): Int = intrinsics.round(self)

  func withPrecision(self, precision: Int): Float {
    if precision < 0 return self
    if precision == 0 return intrinsics.round(self).asFloat()

    val factor = 10 ** precision
    intrinsics.round(self * factor) / factor
  }
}

type Bool {
  // No methods for Bool
}

type String {
  length: Int readonly
  _buffer: Pointer<Byte> = Pointer.null()

  func withLength(length: Int): String {
    String(length: length, _buffer: Pointer.malloc(length))
  }

  func hash(self): Int {
    var hash = 31 * self.length
    for i in range(0, self.length) {
      val byte = self._buffer.offset(i).load()
      hash = hash + 31 * byte.asInt()
    }
    hash
  }

  func eq(self, other: String): Bool {
    if self.length != other.length { return false }

    for i in range(0, self.length) {
      val selfCh = self._buffer.offset(i).load().asInt()
      val otherCh = other._buffer.offset(i).load().asInt()
      if selfCh != otherCh { return false }
    }

    true
  }

  func isEmpty(self): Bool = self.length == 0

  @Stub func toLower(self): String
  @Stub func toUpper(self): String
  @Stub func padLeft(self, totalSize: Int, padding = " "): String
  @Stub func trim(self): String
  @Stub func trimStart(self, pattern: String? = None): String
  @Stub func trimEnd(self, pattern: String? = None): String
  @Stub func split(self, by = ""): String[]
  @Stub func splitAt(self, index: Int): (String, String)
  @Stub func lines(self): String[]
  @Stub func parseInt(self, radix = 10): Int?
  @Stub func parseFloat(self): Float?

  func concat<T>(self, suffix: T, *others: Any[]): String {
    val suffixStr = suffix.toString()
    val othersRepr = others.join()
    var newLength = self.length + suffixStr.length + othersRepr.length

    val newString = String.withLength(newLength)
    newString._buffer.copyFrom(self._buffer, self.length)
    newString._buffer
      .offset(self.length)
      .copyFrom(suffixStr._buffer, suffixStr.length)
    newString._buffer
      .offset(self.length + suffixStr.length)
      .copyFrom(othersRepr._buffer, othersRepr.length)
    newString
  }

  @Stub func replaceAll(self, pattern: String, replacement: String): String

  func get(self, index: Int): String {
    var idx = if index < 0 index + self.length else index
    if idx >= self.length || idx < 0 { return "" }

    val str = String.withLength(1)
    str._buffer.copyFrom(self._buffer.offset(idx), 1)
    str
  }

  func getRange(self, startIndex = 0, endIndex = self.length): String {
    val start = if startIndex < 0 startIndex + self.length else startIndex
    val end = if endIndex > self.length self.length else endIndex
    val length = end - start
    val subString = String.withLength(length)
    subString._buffer.copyFrom(self._buffer.offset(start), length)

    subString
  }
}

type ArrayIterator<T> {
  array: Array<T>
  _i: Int = 0

  func next(self): T? {
    if self.array[self._i] |item| {
      self._i += 1
      item
    } else {
      None
    }
  }
}

type Array<T> {
  length: Int
  _buffer: Pointer<T> = Pointer.null()
  _capacity: Int = 0

  func withCapacity<T>(initialCapacity: Int): T[] {
    Array(length: 0, _buffer: Pointer.malloc(initialCapacity), _capacity: initialCapacity)
  }

  func fill<T>(length: Int, value: T): T[] {
    val buffer = Pointer.malloc<T>(length)
    for i in range(0, length) {
      buffer.offset(i).store(value)
    }

    Array(length: length, _buffer: buffer, _capacity: length)
  }

  func fillBy<T>(length: Int, fn: (Int) => T): T[] {
    val buffer = Pointer.malloc<T>(length)
    for i in range(0, length) {
      val item = fn(i)
      buffer.offset(i).store(item)
    }

    Array(length: length, _buffer: buffer, _capacity: length)
  }

  func toString(self): String {
    if self.isEmpty() return "[]"

    val reprs: String[] = Array.withCapacity(self.length)
    var len = 2 // account for '[' and ']'
    for i in range(0, self.length) {
      val item = self._buffer.offset(i).load()
      val repr = item.toString()
      reprs.push(repr)
      len += repr.length
      if i != self.length - 1 {
        len += 2 // account for ", " unless last item
      }
    }

    // we have an extra 2 bytes for the trailing ", " but we need an extra 1 for the null termination anyway
    val str = String.withLength(len)
    var offset = 0
    str._buffer.offset(offset).store(Byte.fromInt(91)) // '['
    offset += 1

    for i in range(0, self.length) {
      val repr = reprs._buffer.offset(i).load()
      str._buffer.offset(offset).copyFrom(repr._buffer, repr.length)
      offset += repr.length

      if i != self.length - 1 {
        str._buffer.offset(offset).store(Byte.fromInt(44)) // ','
        offset += 1
        str._buffer.offset(offset).store(Byte.fromInt(32)) // ' '
        offset += 1
      }
    }

    str._buffer.offset(offset).store(Byte.fromInt(93)) // ']'

    str
  }

  func hash(self): Int {
    var hash = 31 * self.length
    for i in range(0, self.length) {
      val item = self._buffer.offset(i).load()
      hash = hash + 31 * item.hash()
    }
    hash
  }

  func eq(self, other: Array<T>): Bool {
    if self.length != other.length return false

    for i in range(0, self.length) {
      val selfItem = self._buffer.offset(i).load()
      val otherItem = other._buffer.offset(i).load()

      if selfItem != otherItem { return false }
    }

    true
  }

  func isEmpty(self): Bool = self.length == 0

  func iterator(self): ArrayIterator<T> = ArrayIterator(array: self)

  @Stub func enumerate(self): (T, Int)[]

  func push(self, item: T) {
    self._buffer.offset(self.length).store(item)
    self.length += 1
  }

  func pop(self): T? {
    if self.length == 0 {
      None
    } else {
      self.length -= 1
      self._buffer.offset(self.length).load()
    }
  }

  @Stub func popFront(self): T?
  @Stub func splitAt(self, index: Int): (T[], T[])
  @Stub func concat(self, other: T[]): T[]

  func map<U>(self, fn: (T, Int) => U): U[] {
    val newArray: U[] = Array.withCapacity(self.length)
    for i in range(0, self.length) {
      val item = self._buffer.offset(i).load()
      val result = fn(item, i)
      newArray.push(result)
    }

    newArray
  }

  func filter(self, fn: (T, Int) => Bool): T[] {
    val newArray: T[] = Array.withCapacity(self.length)
    for i in range(0, self.length) {
      val item = self._buffer.offset(i).load()
      if fn(item, i) {
        newArray.push(item)
      }
    }

    newArray
  }

  func reduce<U>(self, initialValue: U, fn: (U, T, Int) => U): U {
    var acc = initialValue
    for i in range(0, self.length) {
      val item = self._buffer.offset(i).load()
      acc = fn(acc, item, i)
    }

    acc
  }

  func forEach(self, fn: (T, Int) => Unit) {
    for i in range(0, self.length) {
      val item = self._buffer.offset(i).load()
      fn(item, i)
    }
  }

  func join(self, joiner = ""): String {
    val reprs: String[] = Array.withCapacity(self.length)
    var length = 0
    for i in range(0, self.length) {
      val item = self._buffer.offset(i).load()
      val repr = item.toString()
      reprs.push(repr)
      length += repr.length
      if i != self.length - 1 {
        length += joiner.length
      }
    }

    val str = String.withLength(length)
    var offset = 0
    for i in range(0, reprs.length) {
      val repr = reprs._buffer.offset(i).load()
      str._buffer.offset(offset).copyFrom(repr._buffer, repr.length)
      offset += repr.length
      if i != reprs.length - 1 {
        str._buffer.offset(offset).copyFrom(joiner._buffer, joiner.length)
        offset += joiner.length
      }
    }

    str
  }

  @Stub func contains(self, item: T): Bool
  @Stub func find(self, fn: (T) => Bool): T?
  @Stub func findIndex(self, fn: (T) => Bool): (T, Int)?
  @Stub func any(self, fn: (T) => Bool): Bool
  @Stub func all(self, fn: (T) => Bool): Bool
  @Stub func none(self, fn: (T) => Bool): Bool
  @Stub func sortBy(self, fn: (T) => Int, reverse = false): T[]
  @Stub func dedupe(self): T[]
  @Stub func dedupeBy<U>(self, fn: (T) => U): T[]
  @Stub func partition<U>(self, fn: (T) => U): Map<U, T[]>
  @Stub func tally(self): Map<T, Int>
  @Stub func tallyBy<U>(self, fn: (T) => U): Map<U, Int>
  @Stub func asSet(self): Set<T>

  func get(self, index: Int): T? {
    val idx = if index < 0 index + self.length else index
    if idx >= self.length || idx < 0 {
      None
    } else {
      self._buffer.offset(idx).load()
    }
  }

  @Stub func getOr(self, index: Int, default: T): T
  @Stub func getOrElse(self, index: Int, getDefault: () => T): T

  func getRange(self, startIndex = 0, endIndex = self.length): T[] {
    val start = if startIndex < 0 startIndex + self.length else startIndex
    val end = if endIndex > self.length self.length else endIndex
    val length = end - start
    val subArray: T[] = Array.withCapacity(length)
    subArray.length = length
    subArray._buffer.copyFrom(self._buffer.offset(start), length)

    subArray
  }

  func set(self, index: Int, value: T): T? {
    val idx = if index < 0 index + self.length else index
    if idx >= self.length || idx < 0 {
      None
    } else {
      val old = self.get(index)
      self._buffer.offset(idx).store(value)
      old
    }
  }

  @Stub func update(self, index: Int, updater: (T) => T)
  @Stub func reverse(self): T[]
}

type SetIterator<T> {
  set: Set<T>
  _mapIterator: MapIterator<T, Bool>? = None

  func next(self): T? {
    if !self._mapIterator {
      self._mapIterator = self.set._map.iterator()
    }

    if self._mapIterator |iter| {
      if iter.next() |item| {
        item[0]
      } else {
        None
      }
    } else {
      // unreachable
      None
    }
  }
}

type Set<T> {
  size: Int
  _map: Map<T, Bool> = Map.new()

  func new<T>(initialCapacity = 16): Set<T> {
    Set<T>(size: 0, _map: Map.new(initialCapacity))
  }

  func toString(self): String {
    if self.isEmpty() return "#{}"

    val reprs: String[] = Array.withCapacity(self._map.size)
    for item in self {
      reprs.push(item.toString())
    }

    val items = reprs.join(", ")
    "#{${items}}"
  }

  func eq(self, other: Set<T>): Bool {
    self._map == other._map
  }

  func isEmpty(self): Bool {
    self._map.isEmpty()
  }

  func iterator(self): SetIterator<T> = SetIterator(set: self)

  @Stub func enumerate(self): (T, Int)[]

  func contains(self, item: T): Bool {
    self._map.containsKey(item)
  }

  func insert(self, item: T) {
    self._map.insert(item, true)
    self.size = self._map.size
  }

  func forEach(self, fn: (T) => Unit) {
    self._map.forEach(key => fn(key))
  }

  @Stub func remove(self, item: T): T?

  func map<U>(self, fn: (T) => U): U[] {
    val arr: U[] = Array.withCapacity(self.size)
    for item in self {
      arr.push(fn(item))
    }

    arr
  }

  func filter(self, fn: (T) => Bool): Set<T> {
    val newSet: Set<T> = Set.new()
    for item in self {
      if fn(item) newSet.insert(item)
    }

    newSet
  }

  @Stub func reduce<U>(self, initialValue: U, fn: (U, T) => U): U

  func asArray(self): T[] {
    val arr: T[] = Array.withCapacity(self.size)
    for item in self {
      arr.push(item)
    }

    arr
  }

  func union(self, other: Set<T>): Set<T> {
    val newSet: Set<T> = Set.new()

    for item in self { newSet.insert(item) }
    for item in other { newSet.insert(item) }

    newSet
  }

  func difference(self, other: Set<T>): Set<T> {
    val newSet: Set<T> = Set.new()
    for item in self {
      if !other.contains(item) newSet.insert(item)
    }

    newSet
  }

  func intersection(self, other: Set<T>): Set<T> {
    val newSet: Set<T> = Set.new()
    for item in self {
      if other.contains(item) newSet.insert(item)
    }

    newSet
  }
}

type MapEntry<K, V> {
  key: K
  value: V
  next: MapEntry<K, V>? = None
}

type MapIterator<K, V> {
  map: Map<K, V>
  _i: Int = -1
  _cursor: MapEntry<K, V>? = None

  func next(self): (K, V)? {
    if self._i >= self.map._entries.length { return None }

    if !self._cursor {
      self._i += 1
      self._cursor = flattenOption(self.map._entries[self._i])
    }

    if self._cursor |cur| {
      self._cursor = cur.next
      return (cur.key, cur.value)
    }

    self.next()
  }
}

type Map<K, V> {
  size: Int
  _entries: MapEntry<K, V>?[] = []
  _capacity: Int = 16
  _loadFactor: Float = 0.75

  func new<K, V>(initialCapacity = 16): Map<K, V> {
    // Find a power of 2 >= initialCapacity, if non-default value provided
    val capacity = if initialCapacity != 16 {
      var cap = 1
      while cap < initialCapacity {
        cap = cap << 1
      }
      cap
    } else {
      initialCapacity
    }

    val entries: MapEntry<K, V>?[] = Array.fillBy(capacity, () => None)
    Map(size: 0, _capacity: capacity, _entries: entries)
  }

  func toString(self): String {
    if self.isEmpty() return "{}"

    val reprs: String[] = Array.withCapacity(self.size)
    for i in range(0, self._entries.length) {
      if self._entries[i] |bucket| {
        var cursor = bucket
        while cursor |cur| {
          val item = "${cur.key}: ${cur.value}"
          reprs.push(item)
          cursor = cur.next
        }
      }
    }

    val items = reprs.join(", ")
    "{ ${items} }"
  }

  func eq(self, other: Map<K, V>): Bool {
    if self.size != other.size return false

    for i in range(0, self._entries.length) {
      if self._entries[i] |bucket| {
        var cursor = bucket

        while cursor |cur| {
          if other.get(cur.key) |otherValue| {
            if otherValue != cur.value return false
          } else {
            return false
          }
          cursor = cur.next
        }
      }
    }

    true
  }

  func isEmpty(self): Bool = self.size == 0

  func forEach(self, fn: (K, V) => Unit) {
    for i in range(0, self._entries.length) {
      if self._entries[i] |bucket| {
        var cursor = bucket
        while cursor |cur| {
          fn(cur.key, cur.value)
          cursor = cur.next
        }
      }
    }
  }

  func iterator(self): MapIterator<K, V> = MapIterator(map: self)

  @Stub func enumerate(self): (K, V)[]
  @Stub func keys(self): Set<K>
  @Stub func values(self): V[]

  func entries(self): Set<(K, V)> {
    val entries: Set<(K, V)> = Set.new()
    for pair in self {
      entries.insert(pair)
    }

    entries
  }

  func _getKeyHash(self, key: K): Int = key.hash() && (self._entries._capacity - 1)

  func containsKey(self, key: K): Bool = if self._getEntry(key) true else false

  func mapValues<U>(self, fn: (K, V) => U): Map<K, U> {
    val newMap: Map<K, U> = Map.new()
    for i in range(0, self._entries.length) {
      if self._entries[i] |bucket| {
        var cursor = bucket
        while cursor |cur| {
          newMap.insert(cur.key, fn(cur.key, cur.value))
          cursor = cur.next
        }
      }
    }

    newMap
  }

  func insert(self, key: K, value: V): V? {
    val hash = self._getKeyHash(key)

    if flattenOption(self._entries[hash]) |slot| {
      var cursor: MapEntry<K, V>? = slot
      while cursor |cur| {
        if cur.key == key {
          val old = cur.value
          cur.value = value
          return old
        } else if cur.next |next| {
          cursor = next
        } else {
          cur.next = MapEntry(key: key, value: value)
          self.size += 1
          return None
        }
      }
    } else {
      self._entries[hash] = MapEntry(key: key, value: value)
      self.size += 1
    }

    // resize if self.size > self._capacity * self._loadFactor

    None
  }

  func _getEntry(self, key: K): MapEntry<K, V>? {
    val hash = self._getKeyHash(key)

    if flattenOption(self._entries[hash]) |bucket| {
      var cursor: MapEntry<K, V>? = bucket
      while cursor |entry| {
        if entry.key == key {
          return entry
        } else {
          cursor = entry.next
        }
      }
    }

    None
  }

  func get(self, key: K): V? {
    if self._getEntry(key) |entry| {
      entry.value
    } else {
      None
    }
  }

  func getOr(self, key: K, default: V): V {
    self.get(key) ?: default
  }

  func getOrElse(self, key: K, getDefault: () => V): V {
    self.get(key) ?: getDefault()
  }

  func update(self, key: K, updater: (V) => V): V? {
    if self._getEntry(key) |entry| {
      val oldVal = entry.value
      entry.value = updater(oldVal)
      oldVal
    } else {
      None
    }
  }

  @Stub func remove(self, key: K): V?
}
