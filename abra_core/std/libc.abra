import Pointer, Byte from "./_intrinsics"

@Intrinsic("errno")
export func errno(): Int

@CBinding("strerror")
export func strerror(errno: Int): String

export val O_RDONLY = 0
export val O_WRONLY = 1
export val O_RDWR   = 2

@CBinding("open")
export func open(pathname: Pointer<Byte>, flags: Int): Int

@CBinding("close")
export func close(fd: Int): Int

export val SEEK_SET = 0
export val SEEK_CUR = 1
export val SEEK_END = 2

@CBinding("lseek")
export func lseek(fd: Int, offset: Int, whence: Int): Int

@CBinding("read")
export func read(fd: Int, buf: Pointer<Byte>, count: Int): Int

export val STDIN_FILENO  = 0
export val STDOUT_FILENO = 1
export val STDERR_FILENO = 2

@CBinding("write")
export func write(fd: Int, buf: Pointer<Byte>, count: Int): Int

export val PATH_MAX = 4096

@CBinding("getcwd")
export func getcwd(buf: Pointer<Byte>, count: Int): String

@CBinding("strlen")
export func strlen(s: Pointer<Byte>): Int
