import "process" as process
import log from "./log"
import JsonParser from "json"
import RequestMessage, NotificationMessage, ResponseMessage, ResponseError, ResponseErrorCode from "./lsp_spec"
import AbraLanguageService, contentLengthHeader, bogusMessageId from "./language_service"

func processMessage(lsp: AbraLanguageService, message: String): Result<ResponseMessage?, ResponseError> {
  log.writeln("received message:")
  log.writeln(message)

  val msgJson = try JsonParser.parseString(message) else |e| return Err(ResponseError(code: ResponseErrorCode.ParseError, message: e.toString()))
  val obj = try msgJson.asObject() else |e| return Err(ResponseError(code: ResponseErrorCode.ParseError, message: e.toString()))
  val res = if obj.getNumber("id") |idVal| {
    val id = match idVal { Either.Left(int) => int, Either.Right(float) => float.asInt() }

    val reqOpt = try RequestMessage.fromJson(msgJson) else |e| return Err(ResponseError(code: ResponseErrorCode.ParseError, message: e.toString()))
    if reqOpt |req| {
      Some(lsp.handleRequest(req))
    } else {
      val error = ResponseError(code: ResponseErrorCode.MethodNotFound, message: "Request method not implemented")
      Some(ResponseMessage.Error(id: id, error: error))
    }
  } else {
    val notifOpt = try NotificationMessage.fromJson(msgJson) else |e| return Err(ResponseError(code: ResponseErrorCode.ParseError, message: e.toString()))
    if notifOpt |notif| {
      lsp.handleNotification(notif)
    }

    None
  }

  Ok(res)
}

func main() {
  val abraStdRoot = try process.getEnvVar("ABRA_HOME") else {
    println("Could not find ABRA_HOME (make sure \$ABRA_HOME environment variable is set)")
    process.exit(1)
  }

  val lsp = AbraLanguageService.new(abraStdRoot)

  val stdin = process.stdin()

  var contentLength = 0
  var seenLen = 0
  var buf: String[] = []
  while stdin.readAsString() |chunk| {
    val input = if chunk.startsWith(contentLengthHeader) {
      val chars = chunk.chars()
      // skip content-length header
      for _ in range(0, contentLengthHeader.length) chars.next()
      var offset = contentLengthHeader.length

      // parse content-length as integer (can assume ascii encoding)
      contentLength = 0
      while chars.next() |ch| {
        if ch.isDigit() {
          offset += 1
          contentLength *= 10
          contentLength += (ch.asInt() - '0'.asInt())
        } else {
          break
        }
      }
      offset += 4 // skip over \r\n\r\n

      chunk[offset:]
    } else {
      chunk
    }

    seenLen += input.length
    buf.push(input)
    if seenLen >= contentLength {
      val message = buf.join()
      contentLength = 0
      seenLen = 0
      buf = []
      match processMessage(lsp, message) {
        Ok(res) => if res |res| lsp.sendResponse(res)
        Err(err) => {
          log.writeln("sending error for bogus id: $err")
          lsp.sendResponse(ResponseMessage.Error(id: bogusMessageId, error: err))
        }
      }
    }
  }
}

main()
