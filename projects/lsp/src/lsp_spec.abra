import log from "./log"
import JsonValue, JsonError, JsonObject from "json"

export enum RequestMessage {
  Initialize(id: Int, processId: Int?, rootPath: String?)
  Hover(id: Int, textDocument: TextDocumentIdentifier, position: Position)

  func fromJson(json: JsonValue): Result<RequestMessage?, JsonError> {
    val obj = try json.asObject()
    val id = match try obj.getNumberRequired("id") {
      Either.Left(int) => int
      Either.Right(float) => float.asInt()
    }
    val method = try obj.getStringRequired("method")
    val params = obj.getObject("params")

    match method {
      "initialize" => {
        val params = try obj.getObjectRequired("params")
        val processId = match params.getNumber("processId") {
          None => None
          Either.Left(int) => Some(int)
          Either.Right(float) => Some(float.asInt())
        }
        val rootPath = params.getString("rootPath")

        Ok(Some(RequestMessage.Initialize(id: id, processId: processId, rootPath: rootPath)))
      }
      "textDocument/hover" => {
        val params = try obj.getObjectRequired("params")
        val textDocumentObj = try params.getValueRequired("textDocument")
        val textDocument = try TextDocumentIdentifier.fromJson(textDocumentObj)

        val positionObj = try params.getValueRequired("position")
        val position = try Position.fromJson(positionObj)

        Ok(Some(RequestMessage.Hover(id: id, textDocument: textDocument, position: position)))
      }
      else => {
        log.writeln("Error: Unimplemented RequestMessage method '$method'")

        Ok(None)
      }
    }
  }
}

export enum NotificationMessage {
  // Incoming notifications
  Initialized
  TextDocumentDidOpen(textDocument: TextDocumentItem)
  TextDocumentDidChange(textDocument: VersionedTextDocumentIdentifier, contentChanges: TextDocumentContentChangeEvent[])
  TextDocumentDidSave(textDocument: TextDocumentIdentifier)

  // Outgoing notifications
  TextDocumentPublishDiagnostics(uri: String, diagnostics: Diagnostic[])

  func fromJson(json: JsonValue): Result<NotificationMessage?, JsonError> {
    val obj = try json.asObject()
    val method = try obj.getStringRequired("method")

    match method {
      "initialized" => Ok(Some(NotificationMessage.Initialized))
      "textDocument/didOpen" => {
        val params = try obj.getObjectRequired("params")
        val textDocumentObj = try params.getValueRequired("textDocument")
        val textDocument = try TextDocumentItem.fromJson(textDocumentObj)

        Ok(Some(NotificationMessage.TextDocumentDidOpen(textDocument: textDocument)))
      }
      // "textDocument/didChange" => {
      //   val params = try obj.getObjectRequired("params")
      //   val textDocumentObj = try params.getValueRequired("textDocument")
      //   val textDocument = try VersionedTextDocumentIdentifier.fromJson(textDocumentObj)

      //   val contentChanges: TextDocumentContentChangeEvent[] = []
      //   val contentChangesArr = try params.getArrayRequired("contentChanges")
      //   for item in contentChangesArr {
      //     contentChanges.push(try TextDocumentContentChangeEvent.fromJson(item))
      //   }

      //   Ok(Some(NotificationMessage.TextDocumentDidChange(textDocument: textDocument, contentChanges: contentChanges)))
      // }
      "textDocument/didSave" => {
        val params = try obj.getObjectRequired("params")
        val textDocumentObj = try params.getValueRequired("textDocument")
        val textDocument = try TextDocumentIdentifier.fromJson(textDocumentObj)

        Ok(Some(NotificationMessage.TextDocumentDidSave(textDocument: textDocument)))
      }
      else => {
        log.writeln("Unimplemented NotificationMessage method '$method'")

        Ok(None)
      }
    }
  }

  func toJson(self): JsonValue {
    match self {
      NotificationMessage.Initialized => unreachable("should not be serializing 'initialized' notification")
      NotificationMessage.TextDocumentDidOpen => unreachable("should not be serializing 'textDocument/didOpen' notification")
      NotificationMessage.TextDocumentDidChange => unreachable("should not be serializing 'textDocument/didChange' notification")
      NotificationMessage.TextDocumentDidSave => unreachable("should not be serializing 'textDocument/didSave' notification")
      NotificationMessage.TextDocumentPublishDiagnostics(uri, diagnostics) => {
        JsonValue.Object(JsonObject(_map: {
          method: JsonValue.String("textDocument/publishDiagnostics"),
          params: JsonValue.Object(JsonObject(_map: {
            uri: JsonValue.String(uri),
            diagnostics: JsonValue.Array(diagnostics.map(d => d.toJson()))
          }))
        }))
      }
    }
  }
}

export enum ResponseMessage {
  Success(id: Int, result: ResponseResult?)
  Error(id: Int, error: ResponseError)

  func toJson(self): JsonValue {
    val obj = JsonObject()

    match self {
      ResponseMessage.Success(id, result) => {
        obj.set("id", JsonValue.Number(Either.Left(id)))
        obj.set("result", result?.toJson() ?: JsonValue.Null)
      }
      ResponseMessage.Error(id, error) => {
        obj.set("id", JsonValue.Number(Either.Left(id)))
        obj.set("error", error.toJson())
      }
    }

    JsonValue.Object(obj)
  }
}

export enum ResponseResult {
  Initialize(capabilities: ServerCapabilities, serverInfo: ServerInfo)
  Hover(contents: MarkupContent, range: Range?)

  func toJson(self): JsonValue {
    val obj = match self {
      ResponseResult.Initialize(capabilities, serverInfo) => {
        JsonObject(_map: {
          "capabilities": capabilities.toJson(),
          "serverInfo": serverInfo.toJson()
        })
      }
      ResponseResult.Hover(contents, range) => {
        val obj = JsonObject(_map: {
          contents: contents.toJson()
        })

        if range |range| {
          obj.set("range", range.toJson())
        }

        obj
      }
    }

    JsonValue.Object(obj)
  }
}

export type ResponseError {
  code: ResponseErrorCode
  message: String

  func toJson(self): JsonValue {
    val obj = JsonObject()

    obj.set("code", JsonValue.Number(Either.Left(self.code.intVal())))
    obj.set("message", JsonValue.String(self.message))

    JsonValue.Object(obj)
  }
}

export enum ResponseErrorCode {
  ParseError
  InvalidRequest
  MethodNotFound
  InvalidParams
  InternalError
  ServerNotInitialized
  Unknown
  RequestFailed
  ServerCancelled
  ContentModified
  RequestCancelled

  func intVal(self): Int = match self {
    ResponseErrorCode.ParseError => -32700
    ResponseErrorCode.InvalidRequest => -32600
    ResponseErrorCode.MethodNotFound => -32601
    ResponseErrorCode.InvalidParams => -32602
    ResponseErrorCode.InternalError => -32603
    ResponseErrorCode.ServerNotInitialized => -32002
    ResponseErrorCode.Unknown => -32001
    ResponseErrorCode.RequestFailed => -32803
    ResponseErrorCode.ServerCancelled => -32802
    ResponseErrorCode.ContentModified => -32801
    ResponseErrorCode.RequestCancelled => -32800
  }
}

export type ServerCapabilities {
  textDocumentSync: TextDocumentSyncOptions? = None
  diagnosticProvider: DiagnosticOptions? = None
  hoverProvider: Bool? = None

  func toJson(self): JsonValue {
    val obj = JsonObject()

    if self.textDocumentSync |tds| {
      obj.set("textDocumentSync", tds.toJson())
    }

    if self.diagnosticProvider |dp| {
      obj.set("diagnosticProvider", dp.toJson())
    }

    if self.hoverProvider |hp| {
      obj.set("hoverProvider", JsonValue.Boolean(hp))
    }

    JsonValue.Object(obj)
  }
}

export type TextDocumentSyncOptions {
  openClose: Bool? = None
  change: TextDocumentSyncKind? = None
  save: SaveOptions? = None

  func toJson(self): JsonValue {
    val obj = JsonObject()

    if self.openClose |openClose| {
      obj.set("openClose", JsonValue.Boolean(openClose))
    }

    if self.change |change| {
      obj.set("change", JsonValue.Number(Either.Left(change.intVal())))
    }

    if self.save |save| {
      obj.set("save", save.toJson())
    }

    JsonValue.Object(obj)
  }
}

export enum TextDocumentSyncKind {
  None_
  Full
  Incremental

  func intVal(self): Int = match self {
    TextDocumentSyncKind.None_ => 0
    TextDocumentSyncKind.Full => 1
    TextDocumentSyncKind.Incremental => 2
  }
}

export type SaveOptions {
  includeText: Bool? = None

  func toJson(self): JsonValue {
    val obj = JsonObject()

    if self.includeText |includeText| {
      obj.set("includeText", JsonValue.Boolean(includeText))
    }

    JsonValue.Object(obj)
  }
}

export type DiagnosticOptions {
  interFileDependencies: Bool
  workspaceDiagnostics: Bool

  func toJson(self): JsonValue = JsonValue.Object(JsonObject(_map: {
    interFileDependencies: JsonValue.Boolean(self.interFileDependencies),
    workspaceDiagnostics: JsonValue.Boolean(self.workspaceDiagnostics),
  }))
}

export type ServerInfo {
  name: String
  version: String? = None

  func toJson(self): JsonValue {
    val obj = JsonObject()

    obj.set("name", JsonValue.String(self.name))
    if self.version |version| {
      obj.set("version", JsonValue.String(version))
    }

    JsonValue.Object(obj)
  }
}

export type TextDocumentItem {
  uri: String
  languageId: String
  version: Int
  text: String

  func fromJson(json: JsonValue): Result<TextDocumentItem, JsonError> {
    val obj = try json.asObject()
    val uri = try obj.getStringRequired("uri")
    val languageId = try obj.getStringRequired("languageId")
    val version = match try obj.getNumberRequired("version") {
      Either.Left(int) => int
      Either.Right(float) => float.asInt()
    }
    val text = try obj.getStringRequired("text")

    Ok(TextDocumentItem(uri: uri, languageId: languageId, version: version, text: text))
  }
}

export type TextDocumentIdentifier {
  uri: String

  func fromJson(json: JsonValue): Result<TextDocumentIdentifier, JsonError> {
    val obj = try json.asObject()
    val uri = try obj.getStringRequired("uri")

    Ok(TextDocumentIdentifier(uri: uri))
  }
}

export type VersionedTextDocumentIdentifier {
  uri: String
  version: Int

  func fromJson(json: JsonValue): Result<VersionedTextDocumentIdentifier, JsonError> {
    val obj = try json.asObject()
    val uri = try obj.getStringRequired("uri")
    val version = match try obj.getNumberRequired("version") {
      Either.Left(int) => int
      Either.Right(float) => float.asInt()
    }

    Ok(VersionedTextDocumentIdentifier(uri: uri, version: version))
  }
}

export type Position {
  // line and character are both zero-based
  line: Int
  character: Int

  func fromJson(json: JsonValue): Result<Position, JsonError> {
    val obj = try json.asObject()
    val line = match try obj.getNumberRequired("line") {
      Either.Left(int) => int
      Either.Right(float) => float.asInt()
    }
    val character = match try obj.getNumberRequired("character") {
      Either.Left(int) => int
      Either.Right(float) => float.asInt()
    }

    Ok(Position(line: line, character: character))
  }

  func toJson(self): JsonValue {
    JsonValue.Object(JsonObject(_map: {
      line: JsonValue.Number(Either.Left(self.line)),
      character: JsonValue.Number(Either.Left(self.character)),
    }))
  }
}

export type Range {
  start: Position
  end: Position // exclusive

  func fromJson(json: JsonValue): Result<Range, JsonError> {
    val obj = try json.asObject()
    val startObj = try obj.getValueRequired("start")
    val start = try Position.fromJson(startObj)
    val endObj = try obj.getValueRequired("end")
    val end = try Position.fromJson(endObj)

    Ok(Range(start: start, end: end))
  }

  func toJson(self): JsonValue {
    JsonValue.Object(JsonObject(_map: {
      start: self.start.toJson(),
      end: self.end.toJson(),
    }))
  }
}

export enum TextDocumentContentChangeEvent {
  Incremental(
    range: ((Int, Int), (Int, Int)), // (line: Int, character: Int), zero-based
    text: String
  )
  Full(text: String)

  func fromJson(json: JsonValue): Result<TextDocumentContentChangeEvent, JsonError> {
    val obj = try json.asObject()
    if obj.getObject("range") |range| {
      todo("parsing TextDocumentContentChangeEvent.Incremental")
    } else {
      val text = try obj.getStringRequired("text")

      Ok(TextDocumentContentChangeEvent.Full(text: text))
    }
  }
}

export type Diagnostic {
  range: ((Int, Int), (Int, Int)) // (line: Int, character: Int), zero-based
  severity: DiagnosticSeverity? = None
  message: String

  func toJson(self): JsonValue {
    val obj = JsonObject()

    obj.set("range", JsonValue.Object(JsonObject(_map: {
      start: JsonValue.Object(JsonObject(_map: {
        line: JsonValue.Number(Either.Left(self.range[0][0])),
        character: JsonValue.Number(Either.Left(self.range[0][1])),
      })),
      end: JsonValue.Object(JsonObject(_map: {
        line: JsonValue.Number(Either.Left(self.range[1][0])),
        character: JsonValue.Number(Either.Left(self.range[1][1])),
      }))
    })))

    if self.severity |severity| {
      obj.set("severity", JsonValue.Number(Either.Left(severity.intVal())))
    }

    obj.set("message", JsonValue.String(self.message))

    JsonValue.Object(obj)
  }
}

export enum DiagnosticSeverity {
  Error
  Warning
  Information
  Hint

  func intVal(self): Int = match self {
    DiagnosticSeverity.Error => 1
    DiagnosticSeverity.Warning => 2
    DiagnosticSeverity.Information => 3
    DiagnosticSeverity.Hint => 4
  }
}

export type MarkupContent {
  kind: MarkupKind
  value: String

  func toJson(self): JsonValue {
    JsonValue.Object(JsonObject(_map: {
      kind: JsonValue.String(match self.kind {
        MarkupKind.PlainText => "plaintext"
        MarkupKind.Markdown => "markdown"
      }),
      value: JsonValue.String(self.value)
    }))
  }
}

export enum MarkupKind {
  PlainText
  Markdown
}
