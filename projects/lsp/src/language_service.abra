import "fs" as fs
import JsonValue from "json"
import log from "./log"
import Label from "../../compiler/src/parser"
import TypedModule, ModuleLoader, Project, Typechecker, TypecheckerErrorKind, IdentifierMeta, IdentifierKindMeta, IdentifierMetaModule, LexerOrParseError from "../../compiler/src/typechecker"
import RequestMessage, NotificationMessage, ResponseMessage, ResponseResult, ResponseError, ResponseErrorCode, ServerCapabilities, TextDocumentSyncOptions, TextDocumentSyncKind, SaveOptions, ServerInfo, TextDocumentItem, TextDocumentIdentifier, VersionedTextDocumentIdentifier, TextDocumentContentChangeEvent, Diagnostic, DiagnosticSeverity, Position, Range, MarkupContent, MarkupKind, DocumentSymbol, SymbolKind from "./lsp_spec"

pub val contentLengthHeader = "Content-Length: "
pub val bogusMessageId = -999

pub type AbraLanguageService {
  _moduleLoader: ModuleLoader
  _project: Project
  _initialized: Bool = false
  _root: String = ""

  pub func new(abraStdRoot: String): AbraLanguageService {
    val moduleLoader = ModuleLoader(stdRoot: abraStdRoot)
    val project = Project()

    AbraLanguageService(_moduleLoader: moduleLoader, _project: project)
  }

  // Request Message handlers

  func _initialize(self, id: Int, processId: Int?, rootPath: String?): ResponseMessage {
    self._root = try rootPath else return internalError(id, "rootPath required")
    self._initialized = true

    // Instruct the client to not send textDocument/didOpen or textDocument/didClose events,
    // and to send textDocument/didSave events, but do not include file contents when saved.
    //
    // Additionally, for now, instruct the client to NOT send textDocument/didChange events;
    // sending the full contents each time (replacing the file in the ModuleLoader's vfs) is
    // pretty wasteful and causes problems with larger files. Eventually, I'll implement a
    // more performant model using the Incremental updates, but for now the client will only
    // receive diagnostics from the server when the file is saved (which is file, frankly).
    val result = ResponseResult.Initialize(
      capabilities: ServerCapabilities(
        textDocumentSync: Some(TextDocumentSyncOptions(
          openClose: Some(false),
          change: Some(TextDocumentSyncKind.None_),
          save: Some(SaveOptions(includeText: Some(false)))
        )),
        hoverProvider: Some(true),
        definitionProvider: Some(true),
        documentSymbolProvider: Some(true),
      ),
      serverInfo: ServerInfo(name: "abra-lsp", version: Some("0.0.1"))
    )
    ResponseMessage.Success(id: id, result: Some(result))
  }

  func _hover(self, id: Int, textDocument: TextDocumentIdentifier, position: Position): ResponseMessage {
    // todo: what happens if it's not a `file://` uri?
    val filePath = textDocument.uri.replaceAll("file://", "")

    val (line, identColStart, identColEnd, ident) = try self._findIdentAtPosition(textDocument.uri, position) else {
      return ResponseMessage.Success(id: id, result: None)
    }

    val lines = match ident.kind {
      IdentifierKindMeta.Variable(mutable, typeRepr) => {
        val prefix = if mutable "var" else "val"
        val lines = ["```abra", "$prefix ${ident.name}: $typeRepr", "```"]

        if ident.definitionPosition |(definitionModule, _)| {
          val name = match definitionModule {
            IdentifierMetaModule.Prelude => "prelude"
            IdentifierMetaModule.Module(mod) => mod
          }
          if name != filePath {
            lines.push("Imported from `$name`")
          }
        }

        lines
      }
      IdentifierKindMeta.Function(typeParams, params, returnTypeRepr, methodTy) => {
        val generics = if typeParams.isEmpty() "" else "<${typeParams.join(", ")}>"
        val fnSignature = "func ${ident.name}$generics(${params.join(", ")}): $returnTypeRepr"

        if methodTy |(isInstanceMethod, parentTypeRepr)| {
          val methodKind = if isInstanceMethod "Instance" else "Static"
          val lines = [
            "$methodKind method of `$parentTypeRepr`",
            "```abra",
            fnSignature,
            "```"
          ]

          if ident.definitionPosition |(definitionModule, _)| {
            val mod = match definitionModule {
              IdentifierMetaModule.Prelude => "`prelude`"
              IdentifierMetaModule.Module(mod) => if mod == filePath "current module" else "`$mod`"
            }
            lines.push("`$parentTypeRepr` defined in $mod")
          }

          lines
        } else {
          val lines = ["```abra", fnSignature, "```"]

          if ident.definitionPosition |(definitionModule, _)| {
            val mod = match definitionModule {
              IdentifierMetaModule.Prelude => "prelude"
              IdentifierMetaModule.Module(mod) => mod
            }
            if mod != filePath {
              lines.push("Imported from `$mod`")
            }
          }

          lines
        }
      }
      IdentifierKindMeta.Type(isEnum, typeParams) => {
        val prefix = if isEnum "enum" else "type"
        val generics = if typeParams.isEmpty() "" else "<${typeParams.join(", ")}>"
        val lines = ["```abra", "$prefix ${ident.name}$generics", "```"]

        if ident.definitionPosition |(definitionModule, _)| {
          val mod = match definitionModule {
            IdentifierMetaModule.Prelude => "prelude"
            IdentifierMetaModule.Module(mod) => mod
          }
          if mod != filePath {
            lines.push("Imported from `$mod`")
          }
        }

        lines
      }
      IdentifierKindMeta.Module(filePath) => {
        [
          "```abra",
          "(module) ${ident.name}",
          "```",
          "Alias for module `$filePath`"
        ]
      }
      IdentifierKindMeta.Field(fieldTy, parentTypeRepr) => {
        val lines = [
          "Field of `$parentTypeRepr`",
          "```abra",
          "${ident.name}: $fieldTy",
          "```"
        ]

        if ident.definitionPosition |(definitionModule, _)| {
          val mod = match definitionModule {
            IdentifierMetaModule.Prelude => "`prelude`"
            IdentifierMetaModule.Module(mod) => if mod == filePath "current module" else "`$mod`"
          }
          lines.push("`$parentTypeRepr` defined in $mod")
        }

        lines
      }
      IdentifierKindMeta.EnumVariant(parentRepr, fields) => {
        val fieldsRepr = if !fields.isEmpty() "(${fields.join(", ")})" else ""
        val lines = [
          "Variant of enum `$parentRepr`",
          "```abra",
          "$parentRepr.${ident.name}$fieldsRepr",
          "```"
        ]

        if ident.definitionPosition |(definitionModule, _)| {
          val mod = match definitionModule {
            IdentifierMetaModule.Prelude => "prelude"
            IdentifierMetaModule.Module(mod) => mod
          }
          lines.push("`$parentRepr` defined in `$mod`")
        }

        lines
      }
    }

    val value = lines.join("\\n")

    val range = Range(start: Position(line: line, character: identColStart), end: Position(line: line, character: identColEnd))
    val contents = MarkupContent(kind: MarkupKind.Markdown, value: value)
    val result = ResponseResult.Hover(contents: contents, range: Some(range))
    ResponseMessage.Success(id: id, result: Some(result))
  }

  func _goToDefinition(self, id: Int, textDocument: TextDocumentIdentifier, position: Position): ResponseMessage {
    // todo: what happens if it's not a `file://` uri?
    val filePath = textDocument.uri.replaceAll("file://", "")

    val ident = if self._findIdentAtPosition(textDocument.uri, position) |(_, _, _, ident)| ident else return ResponseMessage.Success(id: id, result: None)
    val result = if ident.definitionPosition |(definitionModule, pos)| {
      val line = pos.line - 1
      val character = pos.col - 1
      val range = Range(start: Position(line: line, character: character), end: Position(line: line, character: character))
      val definitionFilePath = match definitionModule {
        IdentifierMetaModule.Prelude => self._moduleLoader.stdRoot + "/prelude.abra"
        IdentifierMetaModule.Module(mod) => mod
      }
      val uri = "file://$definitionFilePath"
      Some(ResponseResult.Definition(uri: uri, range: range))
    } else {
      None
    }

    ResponseMessage.Success(id: id, result: result)
  }

  func _symbols(self, id: Int, textDocument: TextDocumentIdentifier): ResponseMessage {
    // todo: what happens if it's not a `file://` uri?
    val filePath = textDocument.uri.replaceAll("file://", "")
    val module = try self.getModuleOrTypecheck(textDocument.uri) else return ResponseMessage.Success(id: id, result: Some(ResponseResult.Symbols([])))

    val scope = module.rootScope

    val rangesFromLabel: (Label) => (Range, Range) = label => {
      val line = label.position.line - 1
      val col = label.position.col - 1
      val range = Range(start: Position(line: line, character: 0), end: Position(line: line, character: col + label.name.length))
      val selectionRange = Range(start: Position(line: line, character: col), end: Position(line: line, character: col + label.name.length - 1))

      (range, selectionRange)
    }

    val symbols: DocumentSymbol[] = []

    for v in scope.variables {
      if v.alias continue

      val (range, selectionRange) = rangesFromLabel(v.label)
      val kind = if v.mutable SymbolKind.Variable else SymbolKind.Constant
      val sym = DocumentSymbol(name: v.label.name, kind: kind, range: range, selectionRange: selectionRange, children: [])
      symbols.push(sym)
    }

    for fn in scope.functions {
      val (range, selectionRange) = rangesFromLabel(fn.label)
      val sym = DocumentSymbol(name: fn.label.name, kind: SymbolKind.Function, range: range, selectionRange: selectionRange, children: [])
      symbols.push(sym)
    }

    for s in scope.structs {
      val children: DocumentSymbol[] = []

      for f in s.fields {
        val (range, selectionRange) = rangesFromLabel(f.name)
        val sym = DocumentSymbol(name: f.name.name, kind: SymbolKind.Field, range: range, selectionRange: selectionRange, children: [])
        children.push(sym)
      }

      for fn in s.instanceMethods {
        if fn.isGenerated continue

        val (range, selectionRange) = rangesFromLabel(fn.label)
        val sym = DocumentSymbol(name: fn.label.name, kind: SymbolKind.Method, range: range, selectionRange: selectionRange, children: [])
        children.push(sym)
      }

      for fn in s.staticMethods {
        if fn.isGenerated continue

        val (range, selectionRange) = rangesFromLabel(fn.label)
        val sym = DocumentSymbol(name: fn.label.name, kind: SymbolKind.Method, range: range, selectionRange: selectionRange, children: [])
        children.push(sym)
      }

      val (range, selectionRange) = rangesFromLabel(s.label)
      val sym = DocumentSymbol(name: s.label.name, kind: SymbolKind.Class, range: range, selectionRange: selectionRange, children: children)
      symbols.push(sym)
    }

    for e in scope.enums {
      val children: DocumentSymbol[] = []

      for v in e.variants {
        val (range, selectionRange) = rangesFromLabel(v.label)
        val sym = DocumentSymbol(name: v.label.name, kind: SymbolKind.EnumMember, range: range, selectionRange: selectionRange, children: [])
        children.push(sym)
      }

      for fn in e.instanceMethods {
        if fn.isGenerated continue

        val (range, selectionRange) = rangesFromLabel(fn.label)
        val sym = DocumentSymbol(name: fn.label.name, kind: SymbolKind.Method, range: range, selectionRange: selectionRange, children: [])
        children.push(sym)
      }

      for fn in e.staticMethods {
        if fn.isGenerated continue

        val (range, selectionRange) = rangesFromLabel(fn.label)
        val sym = DocumentSymbol(name: fn.label.name, kind: SymbolKind.Method, range: range, selectionRange: selectionRange, children: [])
        children.push(sym)
      }

      val (range, selectionRange) = rangesFromLabel(e.label)
      val sym = DocumentSymbol(name: e.label.name, kind: SymbolKind.Enum, range: range, selectionRange: selectionRange, children: children)
      symbols.push(sym)
    }

    val result = ResponseResult.Symbols(symbols)
    val s  = result.toString()
    ResponseMessage.Success(id: id, result: Some(result))
  }

  // Notification handlers

  func _textDocumentDidOpen(self, textDocument: TextDocumentItem) {
    // textDocument/didOpen events are currently not sent by the client (see self._initialize)
    val diagnostics = self.runTypecheckerStartingAtUri(textDocument.uri)
    val notif = NotificationMessage.TextDocumentPublishDiagnostics(uri: textDocument.uri, diagnostics: diagnostics)
    self.sendNotification(notif)
  }

  func _textDocumentDidChange(self, textDocument: VersionedTextDocumentIdentifier, contentChanges: TextDocumentContentChangeEvent[]) {
    // textDocument/didChange events are currently not sent by the client (see self._initialize)
    // if contentChanges.isEmpty() return

    // val filePath = textDocument.uri.replaceAll("file://", "")
    // for changeEvent in contentChanges {
    //   match changeEvent {
    //     TextDocumentContentChangeEvent.Incremental => todo("TextDocumentContentChangeEvent.Incremental")
    //     TextDocumentContentChangeEvent.Full(text) => { }
    //   }
    // }

    // val diagnostics = self.invalidateAndTypecheck(textDocument.uri)
    // val notif = NotificationMessage.TextDocumentPublishDiagnostics(uri: textDocument.uri, diagnostics: diagnostics)
    // self.sendNotification(notif)
  }

  func _textDocumentDidSave(self, textDocument: TextDocumentIdentifier) {
    val diagnostics = self.invalidateAndTypecheck(textDocument.uri)
    val notif = NotificationMessage.TextDocumentPublishDiagnostics(uri: textDocument.uri, diagnostics: diagnostics)
    self.sendNotification(notif)
  }

  // Compiler bridge

  func getModuleOrTypecheck(self, uri: String): TypedModule? {
    val filePath = uri.replaceAll("file://", "")

    // TODO: it's not necessarily enough to test the _presence_ of the module, but also potentially if the module was
    // typechecked with lspMode enabled. For example, if moduleA imports moduleB and moduleA was opened first, then
    // moduleA will be typechecked with lspMode enabled but moduleB will not be. While moduleB will be _present_ in
    // the project's module cache, it will not have lsp information (namely idents).
    val module = try self._project.modules[filePath] else {
      self.invalidateAndTypecheck(uri)

      return self._project.modules[filePath]
    }

    Some(module)
  }

  func invalidateAndTypecheck(self, uri: String): Diagnostic[] {
    val filePath = uri.replaceAll("file://", "")
    self._moduleLoader.invalidateModule(filePath)
    self._project.modules.remove(filePath)

    self.runTypecheckerStartingAtUri(uri)
  }

  func runTypecheckerStartingAtUri(self, uri: String): Diagnostic[] {
    // todo: what happens if it's not a `file://` uri?
    val filePath = uri.replaceAll("file://", "")

    val typechecker = Typechecker(moduleLoader: self._moduleLoader, project: self._project, lspMode: true)
    typechecker.typecheckEntrypoint(filePath)

    val mod = try self._project.modules[filePath] else return []
    if mod.readFileError return [] // Skip unreadable modules; can't show Diagnostics for them anyway
    val contents = try self._moduleLoader.loadFileContents(mod.name) else return [] // Skip unreadable modules; can't show Diagnostics for them anyway

    val diagnostics: Diagnostic[] = []

    for err in mod.lexParseErrors {
      val (position, message) = match err {
        LexerOrParseError.LexerError(inner) => (inner.position, inner.getMessage(mod.name, contents))
        LexerOrParseError.ParseError(inner) => (inner.position, inner.getMessage(mod.name, contents))
      }

      val pos = Position(line: position.line - 1, character: position.col - 1)
      diagnostics.push(Diagnostic(
        range: Range(start: pos, end: pos),
        severity: Some(DiagnosticSeverity.Error),
        message: message
          .replaceAll("\n", "\\n")
          .replaceAll("\"", "\\\"")
          .replaceAll("\t", "\\t"),
      ))
    }

    for err in mod.typeErrors {
      val position = err.position
      val message = err.getMessage(mod.name, contents)
      val pos = Position(line: position.line - 1, character: position.col - 1)
      diagnostics.push(Diagnostic(
        range: Range(start: pos, end: pos),
        severity: Some(DiagnosticSeverity.Error),
        message: message
          .replaceAll("\n", "\\n")
          .replaceAll("\"", "\\\"")
          .replaceAll("\t", "\\t"),
      ))
    }

    diagnostics
  }

  func _findIdentAtPosition(self, uri: String, position: Position): (Int, Int, Int, IdentifierMeta)? {
    val module = try self.getModuleOrTypecheck(uri)
    val line = position.line
    val identsByLine = try module.identsByLine[line]

    for (colStart, colEnd, ident) in identsByLine {
      if colStart <= position.character && position.character <= colEnd {
        return Some((line, colStart, colEnd, ident))
      }
    }

    None
  }

  // Dispatch

  pub func handleRequest(self, req: RequestMessage): ResponseMessage {
    match req {
      RequestMessage.Initialize(id, processId, rootPath) => self._initialize(id, processId, rootPath)
      RequestMessage.Hover(id, textDocument, position) => self._hover(id, textDocument, position)
      RequestMessage.Definition(id, textDocument, position) => self._goToDefinition(id, textDocument, position)
      RequestMessage.Symbols(id, textDocument) => self._symbols(id, textDocument)
    }
  }

  pub func handleNotification(self, req: NotificationMessage) {
    match req {
      NotificationMessage.Initialized => { /* no-op */ }
      NotificationMessage.TextDocumentDidOpen(textDocument) => self._textDocumentDidOpen(textDocument)
      NotificationMessage.TextDocumentDidChange(textDocument, contentChanges) => self._textDocumentDidChange(textDocument, contentChanges)
      NotificationMessage.TextDocumentDidSave(textDocument) => self._textDocumentDidSave(textDocument)
    }
  }

  pub func sendResponse(self, res: ResponseMessage) {
    self._sendJson(res.toJson())
  }

  func sendNotification(self, notif: NotificationMessage) {
    self._sendJson(notif.toJson())
  }

  func _sendJson(self, jsonValue: JsonValue) {
    val resJsonStr = jsonValue.encode()
    val resLen = resJsonStr.length

    val resMsg = "$contentLengthHeader$resLen\r\n\r\n$resJsonStr"

    log.writeln("sent:")
    log.writeln(resMsg)
    stdoutWrite(resMsg)
  }
}

func internalError(id: Int, message: String): ResponseMessage = ResponseMessage.Error(id: id, error: ResponseError(code: ResponseErrorCode.InternalError, message: message))
