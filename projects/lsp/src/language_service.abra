import "fs" as fs
import JsonValue from "json"
import log from "./log"
import ModuleLoader, Project, Typechecker, TypecheckerErrorKind, IdentifierMeta, IdentifierKindMeta, IdentifierMetaImport from "../../compiler/src/typechecker"
import RequestMessage, NotificationMessage, ResponseMessage, ResponseResult, ResponseError, ResponseErrorCode, ServerCapabilities, TextDocumentSyncOptions, TextDocumentSyncKind, SaveOptions, ServerInfo, TextDocumentItem, TextDocumentIdentifier, VersionedTextDocumentIdentifier, TextDocumentContentChangeEvent, Diagnostic, DiagnosticSeverity, Position, Range, MarkupContent, MarkupKind from "./lsp_spec"

export val contentLengthHeader = "Content-Length: "
export val bogusMessageId = -999

export type AbraLanguageService {
  // _virtualFileSystem: Map<String, String>
  _moduleLoader: ModuleLoader
  _project: Project
  _initialized: Bool = false
  _root: String = ""

  func new(abraStdRoot: String): AbraLanguageService {
    // val virtualFileSystem: Map<String, String> = {}
    // val moduleLoader = ModuleLoader.usingVirtualFileSystem(stdRoot: abraStdRoot, fileMap: virtualFileSystem)
    val moduleLoader = ModuleLoader(stdRoot: abraStdRoot)
    val project = Project()

    AbraLanguageService(
      // _virtualFileSystem: virtualFileSystem,
      _moduleLoader: moduleLoader,
      _project: project,
    )
  }

  // Request Message handlers

  func _initialize(self, id: Int, processId: Int?, rootPath: String?): ResponseMessage {
    self._root = if rootPath |p| p else return internalError(id, "rootPath required")
    self._initialized = true

    // Instruct the client to not send textDocument/didOpen or textDocument/didClose events,
    // and to send textDocument/didSave events, but do not include file contents when saved.
    //
    // Additionally, for now, instruct the client to NOT send textDocument/didChange events;
    // sending the full contents each time (replacing the file in the ModuleLoader's vfs) is
    // pretty wasteful and causes problems with larger files. Eventually, I'll implement a
    // more performant model using the Incremental updates, but for now the client will only
    // receive diagnostics from the server when the file is saved (which is file, frankly).
    val result = ResponseResult.Initialize(
      capabilities: ServerCapabilities(
        textDocumentSync: Some(TextDocumentSyncOptions(
          openClose: Some(false),
          change: Some(TextDocumentSyncKind.None_),
          save: Some(SaveOptions(includeText: Some(false)))
        )),
        hoverProvider: Some(true),
        definitionProvider: Some(true),
      ),
      serverInfo: ServerInfo(name: "abra-lsp", version: Some("0.0.1"))
    )
    ResponseMessage.Success(id: id, result: Some(result))
  }

  func _hover(self, id: Int, textDocument: TextDocumentIdentifier, position: Position): ResponseMessage {
    // todo: what happens if it's not a `file://` uri?
    val filePath = textDocument.uri.replaceAll("file://", "")

    val (line, identColStart, identColEnd, ident) = if self._findIdentAtPosition(filePath, position) |ident| ident else {
      return ResponseMessage.Success(id: id, result: None)
    }

    val lines = match ident.kind {
      IdentifierKindMeta.Variable(mutable, typeRepr) => {
        val prefix = if mutable "var" else "val"
        ["```abra", "$prefix ${ident.name}: $typeRepr", "```"]
      }
      IdentifierKindMeta.Function(typeParams, params, returnTypeRepr) => {
        val generics = if typeParams.isEmpty() "" else "<${typeParams.join(", ")}>"
        ["```abra", "func ${ident.name}$generics(${params.join(", ")}): $returnTypeRepr", "```"]
      }
      IdentifierKindMeta.Type(isEnum, typeParams) => {
        val prefix = if isEnum "enum" else "type"
        val generics = if typeParams.isEmpty() "" else "<${typeParams.join(", ")}>"
        ["```abra", "$prefix ${ident.name}$generics", "```"]
      }
      IdentifierKindMeta.Module(filePath) => {
        ["```abra", "(module) ${ident.name}", "```", "Alias for module `$filePath`"]
      }
    }

    match ident.importedFrom {
      None => {}
      IdentifierMetaImport.Prelude => lines.push("Imported from prelude")
      IdentifierMetaImport.Module(mod) => lines.push("Imported from `$mod`")
    }

    val value = lines.join("\\n")

    val range = Range(start: Position(line: line, character: identColStart), end: Position(line: line, character: identColEnd))
    val contents = MarkupContent(kind: MarkupKind.Markdown, value: value)
    val result = ResponseResult.Hover(contents: contents, range: Some(range))
    ResponseMessage.Success(id: id, result: Some(result))
  }

  func _goToDefinition(self, id: Int, textDocument: TextDocumentIdentifier, position: Position): ResponseMessage {
    // todo: what happens if it's not a `file://` uri?
    val filePath = textDocument.uri.replaceAll("file://", "")

    val ident = if self._findIdentAtPosition(filePath, position) |(_, _, _, ident)| ident else return ResponseMessage.Success(id: id, result: None)
    val result = if ident.definitionPosition |pos| {
      val line = pos.line - 1
      val character = pos.col - 1
      val range = Range(start: Position(line: line, character: character), end: Position(line: line, character: character))
      val definitionFilePath = match ident.importedFrom {
        None => filePath
        IdentifierMetaImport.Prelude => self._moduleLoader.stdRoot + "/prelude.abra"
        IdentifierMetaImport.Module(mod) => mod
      }
      val uri = "file://$definitionFilePath"
      Some(ResponseResult.Definition(uri: uri, range: range))
    } else {
      None
    }

    ResponseMessage.Success(id: id, result: result)
  }

  // Notification handlers

  func _textDocumentDidOpen(self, textDocument: TextDocumentItem) {
    // textDocument/didOpen events are currently not sent by the client (see self._initialize)
    val diagnostics = self._runTypecheckerStartingAtUri(textDocument.uri)
    val notif = NotificationMessage.TextDocumentPublishDiagnostics(uri: textDocument.uri, diagnostics: diagnostics)
    self.sendNotification(notif)
  }

  func _textDocumentDidChange(self, textDocument: VersionedTextDocumentIdentifier, contentChanges: TextDocumentContentChangeEvent[]) {
    // textDocument/didChange events are currently not sent by the client (see self._initialize)
    if contentChanges.isEmpty() return

    val filePath = textDocument.uri.replaceAll("file://", "")
    for changeEvent in contentChanges {
      match changeEvent {
        TextDocumentContentChangeEvent.Incremental => todo("TextDocumentContentChangeEvent.Incremental")
        TextDocumentContentChangeEvent.Full(text) => {
          // self._virtualFileSystem[filePath] = text
        }
      }
    }
    self._moduleLoader.invalidateModule(filePath)
    self._project.modules.remove(filePath)

    val diagnostics = self._runTypecheckerStartingAtUri(textDocument.uri)
    val notif = NotificationMessage.TextDocumentPublishDiagnostics(uri: textDocument.uri, diagnostics: diagnostics)
    self.sendNotification(notif)
  }

  func _textDocumentDidSave(self, textDocument: TextDocumentIdentifier) {
    val filePath = textDocument.uri.replaceAll("file://", "")
    self._moduleLoader.invalidateModule(filePath)
    self._project.modules.remove(filePath)
    // self._virtualFileSystem.remove(filePath)

    val diagnostics = self._runTypecheckerStartingAtUri(textDocument.uri)
    val notif = NotificationMessage.TextDocumentPublishDiagnostics(uri: textDocument.uri, diagnostics: diagnostics)
    self.sendNotification(notif)
  }

  // Compiler bridge

  func _runTypecheckerStartingAtUri(self, uri: String): Diagnostic[] {
    // todo: what happens if it's not a `file://` uri?
    val filePath = uri.replaceAll("file://", "")

    val typechecker = Typechecker(
      moduleLoader: self._moduleLoader,
      project: self._project,
      trackIdentsForLsp: true,
    )

    match typechecker.typecheckEntrypoint(filePath) {
      Ok => []
      Err(e) => {
        val (position, message) = match e.kind {
          TypecheckerErrorKind.ReadFileError => unreachable("could not read file '$filePath'")
          TypecheckerErrorKind.LexerError(inner) => {
            val contents = match fs.readFile(e.modulePath) {
              Ok(v) => v
              Err => unreachable("Could not read file '${e.modulePath}'")
            }
            val msg = inner.getMessage(e.modulePath, contents)
            (inner.position, msg)
          }
          TypecheckerErrorKind.ParseError(inner) => {
            val contents = match fs.readFile(e.modulePath) {
              Ok(v) => v
              Err => unreachable("Could not read file '${e.modulePath}'")
            }
            val msg = inner.getMessage(e.modulePath, contents)
            (inner.position, msg)
          }
          TypecheckerErrorKind.TypeError(inner) => {
            val contents = match fs.readFile(e.modulePath) {
              Ok(v) => v
              Err => unreachable("Could not read file '${e.modulePath}'")
            }
            val msg = inner.getMessage(e.modulePath, contents)
            (inner.position, msg)
          }
        }

        val range = ((position.line - 1, position.col - 1), (position.line - 1, position.col))
        val diagnostic = Diagnostic(
          range: range,
          severity: Some(DiagnosticSeverity.Error),
          message: message.replaceAll("\n", "\\n").replaceAll("\"", "\\\""),
        )
        [diagnostic]
      }
    }
  }

  func _findIdentAtPosition(self, filePath: String, position: Position): (Int, Int, Int, IdentifierMeta)? {
    val module = if self._project.modules[filePath] |mod| mod else return None
    val line = position.line
    val identsByLine = if module.identsByLine[line] |idents| idents else return None

    for (colStart, colEnd, ident) in identsByLine {
      if colStart <= position.character && position.character <= colEnd {
        return Some((line, colStart, colEnd, ident))
      }
    }

    None
  }

  // Dispatch

  func handleRequest(self, req: RequestMessage): ResponseMessage {
    match req {
      RequestMessage.Initialize(id, processId, rootPath) => self._initialize(id, processId, rootPath)
      RequestMessage.Hover(id, textDocument, position) => self._hover(id, textDocument, position)
      RequestMessage.Definition(id, textDocument, position) => self._goToDefinition(id, textDocument, position)
    }
  }

  func handleNotification(self, req: NotificationMessage) {
    match req {
      NotificationMessage.Initialized => { /* no-op */ }
      NotificationMessage.TextDocumentDidOpen(textDocument) => self._textDocumentDidOpen(textDocument)
      NotificationMessage.TextDocumentDidChange(textDocument, contentChanges) => self._textDocumentDidChange(textDocument, contentChanges)
      NotificationMessage.TextDocumentDidSave(textDocument) => self._textDocumentDidSave(textDocument)
    }
  }

  func sendResponse(self, res: ResponseMessage) {
    self._sendJson(res.toJson())
  }

  func sendNotification(self, notif: NotificationMessage) {
    self._sendJson(notif.toJson())
  }

  func _sendJson(self, jsonValue: JsonValue) {
    val resJsonStr = jsonValue.encode()
    val resLen = resJsonStr.length

    val resMsg = "$contentLengthHeader$resLen\r\n\r\n$resJsonStr"

    log.writeln("sent:")
    log.writeln(resMsg)
    stdoutWrite(resMsg)
  }
}

func internalError(id: Int, message: String): ResponseMessage = ResponseMessage.Error(id: id, error: ResponseError(code: ResponseErrorCode.InternalError, message: message))
