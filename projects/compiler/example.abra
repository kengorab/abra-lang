type Foo {
  f: String
}
val foo = Foo(f: "abc")
val fooArr = [foo]

val v = fooArr[0]?.f?.length
println(v)

// val arr = ["a", "b", "c", "d"]
// println(arr[0]?.isEmpty())
// println(arr[6]?.isEmpty())

// if true {
//   // Test with primitive
//   val i1: Int? = None
//   val i2 = Some(17)
//   val i3 = Some(17)
//   val i4 = Some(16)

//   /// Expect: false
//   println(i1 == i2)
//   /// Expect: false
//   println(i2 == i4)
//   /// Expect: true
//   println(i2 == i3)

//   // Test with object
//   val s1: String? = None
//   val s2 = Some("str")
//   val s3 = Some("str")
//   val s4 = Some("hmm")

//   /// Expect: false
//   println(s1 == s2)
//   /// Expect: false
//   println(s2 == s4)
//   /// Expect: true
//   println(s2 == s3)
// }

// val arr = ["a", "b", "c", "d"]
// val l = arr[0]?.length ?: 123

// println(l)

// println(arr[0]?.length)

// val floatArr = [0.12, 3.45, 6.0]
// println(floatArr)
// floatArr[0] = 0.001
// println(floatArr)

// val x = 9221120237041090561
// println(x)

// val hmm = (0.0 / 0.0) - (0.0 / 0.0)
// println(hmm)

// val map2 = { ([1, 2]): true, ([3, 4]): false }
// println(map2.entries())

// val m = { (1): "a", (2): "b" }

// // println(m.getOr(1, "c"))
// // println(m.getOr(2, "c"))
// println(m.getOr(3, "c"))

// for ch, idx in { a: 1, b: 2, c: 3 } {
//   println("$ch $idx")
// }

// val arr = [1.2, 3.4]
// for f in arr {
//   println(f)
// }

// val pairs = [("a", 1), ("b", 2), ("c", 3)]
// // for p in pairs {
// //   println(p)
// // }
// val m = Map.fromPairs(pairs)
// println(m)

