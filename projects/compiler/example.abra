// // enum Foo {
// //   Bar(a: Int, b: String = "default")
// // }

// // val f = Foo.Bar(a: 123)
// // println(f)

// func foo(a: Int, b = "asdf", c = 123) {
//   println(a, b, c)
// }

// foo(a: 1)
// foo(a: 1, c: 456)
// foo(a: 1, b: "456")
// foo(a: 1, b: "456", c: 456)

// type Foo {
//   func bar(self, a: Int, b = "asdf", c = 123) {
//     println(a, b, c)
//   }

//   func baz(a: Int, b = "asdf", c = 123) {
//     println(a, b, c)
//   }
// }

// // Foo.baz(a: 1)
// // Foo.baz(a: 1, c: 456)
// // Foo.baz(a: 1, b: "456")
// // Foo.baz(a: 1, b: "456", c: 456)

// val f = Foo()
// // f.bar(a: 1)
// // f.bar(a: 1, c: 456)
// // f.bar(a: 1, b: "456")
// // f.bar(a: 1, b: "456", c: 456)


// func callFn2(fn: (Int, String) => Unit) {
//   fn(24, "foo")
// }

// func callFn3(fn: (Int, String, Int, String) => Unit) {
//   fn(24, "foo", 24, "foo")
// }

// callFn1(foo)
// callFn2(foo)
// callFn3(foo)

// callFn1(f.bar)
// callFn2(f.bar)
// callFn3(f.bar)

// callFn1(Foo.baz)
// callFn2(Foo.baz)
// callFn3(Foo.baz)

enum Color {
  Red
  Green
  Blue
  RGB(r: Int = 0, g: Int = 0, b: Int = 0)
}

val black = Color.RGB()
println(black)
val white = Color.RGB(r: 255, g: 255, b: 255)
println(white)
val red = Color.RGB(r: 255)
println(red)
val green = Color.RGB(g: 255)
println(green)
val pink = Color.RGB(r: 255, b: 255)
println(pink)
val cyan = Color.RGB(g: 255, b: 255)
println(cyan)
val yellow = Color.RGB(r: 255, g: 255)
println(yellow)
