// If statements

/// Expect: here 1
if 1 < 4 {
  printlnv2("here 1")
} else {
  printlnv2("here 2")
}

/// Expect: here 2
if 1 > 4 {
  printlnv2("here 1")
} else {
  printlnv2("here 2")
}

/// Expect: here 3
if 1 > 4 {
  printlnv2("here 1")
} else if 2 > 4 {
  printlnv2("here 2")
} else {
  printlnv2("here 3")
}

// If expressions

val a = if 1 > 0 123 else 456
/// Expect: 123
printlnv2(a)

val b = (if 1 < 0 123 else 456) + 1000
/// Expect: 1456
printlnv2(b)

val c = if true { Some(123) } else { None }
/// Expect: Option.Some(value: 123)
printlnv2(c)

val d = if false { Some(123) } else { None }
/// Expect: Option.None
printlnv2(d)

///// Expect: 123
//printlnv2(if true { 123 })
//
///// Expect: None
//printlnv2(if false { 123 })

///// Expect: None
//printlnv2(if true { None } else { 1 + 2 }) // TODO: Make this work
/// Expect: Option.Some(value: 3)
printlnv2(if true { Some(1 + 2) } else { None })

// Condition bindings
val arr = [1, 2, 3, 4]
/// Expect: 101
printlnv2(if arr[0] |item| { item + 100 } else { 0 })
/// Expect: 0
printlnv2(if arr[5] |item| { item + 100 } else { 0 })

// Destructuring condition binding as tuple
(() => {
  val pairs = [("a", 1), ("b", 2)]
  // Statement
  if pairs[0] |(k, v)| {
    /// Expect: a 1
    printlnv2("$k $v")
  }

  // Expression
  val x = if pairs[0] |(k, v)| k.length + v else 0
  /// Expect: 2
  printlnv2(x)
})()