func printlnBool(b: Bool) = stdoutWriteln(b.toString())

// // Test raw string construction
// (() => {
//   val s = String.withLength(3)
//   s._buffer.offset(0).store(Byte.fromInt(65))
//   s._buffer.offset(1).store(Byte.fromInt(66))
//   s._buffer.offset(2).store(Byte.fromInt(67))
//   /// Expect: ABC
//   stdoutWriteln(s)
//   /// Expect: false
//   stdoutWriteln(s.isEmpty())
// })()

// Test literal construction
/// Expect: hello
stdoutWriteln("hello")

// + operator
(() => {
  /// Expect: helloworld
  stdoutWriteln("hello" + "world")
  /// Expect: hello12
  stdoutWriteln("hello" + 12)
  /// Expect: 12hello
  stdoutWriteln(12 + "hello")
  /// Expect: hello1.23
  stdoutWriteln("hello" + 1.23)
  /// Expect: 1.23hello
  stdoutWriteln(1.23 + "hello")
  /// Expect: hellotrue
  stdoutWriteln("hello" + true)
  /// Expect: truehello
  stdoutWriteln(true + "hello")
  /// Expect: hello[1, 2, 3]
  stdoutWriteln("hello" + [1, 2, 3])
  /// Expect: [1, 2, 3]hello
  stdoutWriteln([1, 2, 3] + "hello")
})()

// == operator (also String#eq)
(() => {
  val s1 = "string"
  /// Expect: true
  printlnBool(s1 == s1)
  /// Expect: true
  printlnBool(s1 == "string")

  /// Expect: false
  printlnBool(s1 != s1)
  /// Expect: true
  printlnBool(s1 != "string!")
})()

// Interpolation
(() => {
  val array = [1, 2, 3]
  /// Expect: length of [1, 2, 3] is 3
  stdoutWriteln("length of $array is ${array.length}")
})()

// String#replaceAll(pattern: String, replacement: String)
(() => {
  /// Expect: LLaaLLa
  stdoutWriteln("laala".replaceAll("l", "LL"))

  /// Expect: aaLLaLL
  stdoutWriteln("aalal".replaceAll("l", "LL"))

  /// Expect: LLaaLLaLL
  stdoutWriteln("laalal".replaceAll("l", "LL"))

  /// Expect: feebar
  stdoutWriteln("foobar".replaceAll("o", "e"))

  /// Expect: fexexbar
  stdoutWriteln("foobar".replaceAll("o", "ex"))

  /// Expect: foobar
  stdoutWriteln("foobar".replaceAll("x", "yz"))

  /// Expect: -ä
  stdoutWriteln("/ä".replaceAll("/", "-"))

  /// Expect: xfxoxox
  stdoutWriteln("foo".replaceAll("", "x"))

  /// Expect: x
  stdoutWriteln("".replaceAll("", "x"))

  /// Expect: abcd
  stdoutWriteln("abcd".replaceAll("", ""))

  /// Expect: fa bar baaz
  stdoutWriteln("foo boor booooz".replaceAll("oo", "a"))

  // /// Expect: "hello"
  // stdoutWriteln("\"hello\"".replaceAll("\"", "\\\""))
})()

// String#chars
(() => {
  val chars = "hello".chars()
  /// Expect: h 0
  /// Expect: e 1
  /// Expect: l 2
  /// Expect: l 3
  /// Expect: o 4
  for ch, idx in chars {
    stdoutWriteln("$ch $idx")
  }

  /// Expect: done
  stdoutWriteln("done")
})()

// Indexing (also String#get(index: Int))
(() => {
  val s1 = "abc"

  /// Expect: |  a b c a b c  |
  stdoutWriteln("| ${s1[-4]} ${s1[-3]} ${s1[-2]} ${s1[-1]} ${s1[0]} ${s1[1]} ${s1[2]} ${s1[3]} |")

  val s2 = "hello"

  /// Expect: h e l l o
  stdoutWriteln("${s2[0]} ${s2[1]} ${s2[2]} ${s2[3]} ${s2[4]}")

  /// Expect: o l l e h
  stdoutWriteln("${s2[-1]} ${s2[-2]} ${s2[-3]} ${s2[-4]} ${s2[-5]}")

  /// Expect:   end
  stdoutWriteln("${s2[5]} ${s2[-6]} end")
})()

// Range indexing (also String#getRange(startIndex: Int, endIndex: Int))
(() => {
  val s = "hello"

  /// Expect: ell ell
  stdoutWriteln("${s[1:4]} ${s[-4:4]}")

  /// Expect:  end
  stdoutWriteln("${s[1:1]} end")

  val a = 1
  val b = 4

  /// Expect: ell ell
  stdoutWriteln("${s[a:b]} ${s[-b:b]}")

  /// Expect: ello h
  stdoutWriteln("${s[1:]} ${s[:1]}")

  /// Expect: ello h
  stdoutWriteln("${s[a:]} ${s[:a]}")
})()

// String#hash
(() => {
  val empty = ""
  /// Expect: true
  printlnBool(empty.hash() == "".hash())

  val nonEmpty = "hello"
  /// Expect: true
  printlnBool(nonEmpty.hash() == "hello".hash())
})()

// String#isEmpty
(() => {
  val empty = ""
  /// Expect: true
  stdoutWriteln(empty.isEmpty().toString())

  val nonEmpty = "hello"
  /// Expect: false
  stdoutWriteln(nonEmpty.isEmpty().toString())
})()

// String#toLower
(() => {
  /// Expect: ||
  stdoutWriteln("|" + "".toLower() + "|")
  /// Expect: -hello!
  stdoutWriteln("-hElLo!".toLower())
})()

// String#toUpper
(() => {
  /// Expect: ||
  stdoutWriteln("|" + "".toUpper() + "|")
  /// Expect: -HELLO!
  stdoutWriteln("-hElLo!".toUpper())
})()

// String#split
(() => {
  /// Expect: [a, s, d, f]
  stdoutWriteln("a s d f".split(by: " ").toString())

  /// Expect: [, a, b, c d]
  stdoutWriteln("  a  b  c d".split("  ").toString())

  /// Expect: [a, s, d, f]
  stdoutWriteln("asdf".split("").toString())

  /// Expect: [a, s, d, f]
  stdoutWriteln("a\ns\nd\nf".split("\n").toString())

  /// Expect: [asdf]
  stdoutWriteln("asdf".split("qwer").toString())
})()

// String#lines
(() => {
  /// Expect: [a s d f]
  stdoutWriteln("a s d f".lines().toString())

  /// Expect: []
  stdoutWriteln("".lines().toString())

  /// Expect: [a, s, d, f]
  stdoutWriteln("a\ns\nd\nf".lines().toString())
})()

// String#startsWith
(() => {
  /// Expect: true
  stdoutWriteln("".startsWith("").toString())
  /// Expect: true
  stdoutWriteln("hello".startsWith("").toString())
  /// Expect: true
  stdoutWriteln("hello".startsWith("he").toString())
  /// Expect: true
  stdoutWriteln("hello".startsWith("hello").toString())
  /// Expect: false
  stdoutWriteln("hello".startsWith("hex").toString())
  /// Expect: false
  stdoutWriteln("hello".startsWith("hhello").toString())
})()

// String#endsWith
(() => {
  /// Expect: true
  stdoutWriteln("".endsWith("").toString())
  /// Expect: true
  stdoutWriteln("hello".endsWith("").toString())
  /// Expect: true
  stdoutWriteln("hello".endsWith("lo").toString())
  /// Expect: true
  stdoutWriteln("hello".endsWith("hello").toString())
  /// Expect: false
  stdoutWriteln("hello".endsWith("lo!").toString())
  /// Expect: false
  stdoutWriteln("hello".endsWith("hhello").toString())
})()

// String#repeat
(() => {
  /// Expect: ||
  stdoutWriteln("|" + "abc".repeat(0) + "|")

  /// Expect: ||
  stdoutWriteln("|" + "abc".repeat(-1) + "|")

  /// Expect: abcabcabc
  stdoutWriteln("abc".repeat(3))
})()
