// // Test raw string construction
// (() => {
//   val s = String.withLength(3)
//   s._buffer.offset(0).store(Byte.fromInt(65))
//   s._buffer.offset(1).store(Byte.fromInt(66))
//   s._buffer.offset(2).store(Byte.fromInt(67))
//   /// Expect: ABC
//   printlnv2(s)
//   /// Expect: false
//   printlnv2(s.isEmpty())
// })()

// Test literal construction
/// Expect: hello
printlnv2("hello")

// + operator
(() => {
  /// Expect: helloworld
  printlnv2("hello" + "world")
  /// Expect: hello12
  printlnv2("hello" + 12)
  /// Expect: 12hello
  printlnv2(12 + "hello")
  /// Expect: hello1.23
  printlnv2("hello" + 1.23)
  /// Expect: 1.23hello
  printlnv2(1.23 + "hello")
  /// Expect: hellotrue
  printlnv2("hello" + true)
  /// Expect: truehello
  printlnv2(true + "hello")
  /// Expect: hello[1, 2, 3]
  printlnv2("hello" + [1, 2, 3])
  /// Expect: [1, 2, 3]hello
  printlnv2([1, 2, 3] + "hello")
})()

// == operator (also String#eq)
(() => {
  val s1 = "string"
  /// Expect: true
  printlnv2(s1 == s1)
  /// Expect: true
  printlnv2(s1 == "string")

  /// Expect: false
  printlnv2(s1 != s1)
  /// Expect: true
  printlnv2(s1 != "string!")
})()

// Interpolation
(() => {
  val array = [1, 2, 3]
  /// Expect: length of [1, 2, 3] is 3
  printlnv2("length of $array is ${array.length}")
})()

// String#replaceAll(pattern: String, replacement: String)
(() => {
  /// Expect: LLaaLLa
  printlnv2("laala".replaceAll("l", "LL"))

  /// Expect: aaLLaLL
  printlnv2("aalal".replaceAll("l", "LL"))

  /// Expect: LLaaLLaLL
  printlnv2("laalal".replaceAll("l", "LL"))

  /// Expect: feebar
  printlnv2("foobar".replaceAll("o", "e"))

  /// Expect: fexexbar
  printlnv2("foobar".replaceAll("o", "ex"))

  /// Expect: foobar
  printlnv2("foobar".replaceAll("x", "yz"))

  /// Expect: -ä
  printlnv2("/ä".replaceAll("/", "-"))

  /// Expect: xfxoxox
  printlnv2("foo".replaceAll("", "x"))

  /// Expect: x
  printlnv2("".replaceAll("", "x"))

  /// Expect: abcd
  printlnv2("abcd".replaceAll("", ""))

  /// Expect: fa bar baaz
  printlnv2("foo boor booooz".replaceAll("oo", "a"))

  // /// Expect: "hello"
  // printlnv2("\"hello\"".replaceAll("\"", "\\\""))
})()

// String#chars
(() => {
  val chars = "hello".chars()
  /// Expect: h 0
  /// Expect: e 1
  /// Expect: l 2
  /// Expect: l 3
  /// Expect: o 4
  for ch, idx in chars {
    printlnv2("$ch $idx")
  }

  /// Expect: done
  printlnv2("done")
})()

// Indexing (also String#get(index: Int))
(() => {
  val s1 = "abc"

  /// Expect: |  a b c a b c  |
  printlnv2("| ${s1[-4]} ${s1[-3]} ${s1[-2]} ${s1[-1]} ${s1[0]} ${s1[1]} ${s1[2]} ${s1[3]} |")

  val s2 = "hello"

  /// Expect: h e l l o
  printlnv2("${s2[0]} ${s2[1]} ${s2[2]} ${s2[3]} ${s2[4]}")

  /// Expect: o l l e h
  printlnv2("${s2[-1]} ${s2[-2]} ${s2[-3]} ${s2[-4]} ${s2[-5]}")

  /// Expect:   end
  printlnv2("${s2[5]} ${s2[-6]} end")
})()

// Range indexing (also String#getRange(startIndex: Int, endIndex: Int))
(() => {
  val s = "hello"

  /// Expect: ell ell
  printlnv2("${s[1:4]} ${s[-4:4]}")

  /// Expect:  end
  printlnv2("${s[1:1]} end")

  val a = 1
  val b = 4

  /// Expect: ell ell
  printlnv2("${s[a:b]} ${s[-b:b]}")

  /// Expect: ello h
  printlnv2("${s[1:]} ${s[:1]}")

  /// Expect: ello h
  printlnv2("${s[a:]} ${s[:a]}")
})()

// String#hash
(() => {
  val empty = ""
  /// Expect: true
  printlnv2(empty.hash() == "".hash())

  val nonEmpty = "hello"
  /// Expect: true
  printlnv2(nonEmpty.hash() == "hello".hash())
})()

// String#isEmpty
(() => {
  val empty = ""
  /// Expect: true
  printlnv2(empty.isEmpty())

  val nonEmpty = "hello"
  /// Expect: false
  printlnv2(nonEmpty.isEmpty())
})()

// String#toLower
(() => {
  /// Expect: ||
  printlnv2("|" + "".toLower() + "|")
  /// Expect: -hello!
  printlnv2("-hElLo!".toLower())
})()

// String#toUpper
(() => {
  /// Expect: ||
  printlnv2("|" + "".toUpper() + "|")
  /// Expect: -HELLO!
  printlnv2("-hElLo!".toUpper())
})()

// String#split
(() => {
  /// Expect: [a, s, d, f]
  printlnv2("a s d f".split(by: " "))

  /// Expect: [, a, b, c d]
  printlnv2("  a  b  c d".split("  "))

  /// Expect: [a, s, d, f]
  printlnv2("asdf".split(""))

  /// Expect: [a, s, d, f]
  printlnv2("a\ns\nd\nf".split("\n"))

  /// Expect: [asdf]
  printlnv2("asdf".split("qwer"))
})()

// String#lines
(() => {
  /// Expect: [a s d f]
  printlnv2("a s d f".lines())

  /// Expect: []
  printlnv2("".lines())

  /// Expect: [a, s, d, f]
  printlnv2("a\ns\nd\nf".lines())
})()

// String#startsWith
(() => {
  /// Expect: true
  printlnv2("".startsWith(""))
  /// Expect: true
  printlnv2("hello".startsWith(""))
  /// Expect: true
  printlnv2("hello".startsWith("he"))
  /// Expect: true
  printlnv2("hello".startsWith("hello"))
  /// Expect: false
  printlnv2("hello".startsWith("hex"))
  /// Expect: false
  printlnv2("hello".startsWith("hhello"))
})()

// String#endsWith
(() => {
  /// Expect: true
  printlnv2("".endsWith(""))
  /// Expect: true
  printlnv2("hello".endsWith(""))
  /// Expect: true
  printlnv2("hello".endsWith("lo"))
  /// Expect: true
  printlnv2("hello".endsWith("hello"))
  /// Expect: false
  printlnv2("hello".endsWith("lo!"))
  /// Expect: false
  printlnv2("hello".endsWith("hhello"))
})()

// // String#concat
// (() => {
//   /// Expect: helloworld
//   printlnv2("hello".concat("world"))
//   /// Expect: hello12
//   printlnv2("hello".concat(12))
//   /// Expect: hello1.23
//   printlnv2("hello".concat(1.23))
//   /// Expect: hellotrue
//   printlnv2("hello".concat(true))
//   /// Expect: hello[1, 2, 3]
//   printlnv2("hello".concat([1, 2, 3]))
//   /// Expect: hello12.3true[1, 2, 3]
//   printlnv2("hello".concat(1, 2.3, true, [1, 2, 3]))
// })()

// String#repeat
(() => {
  /// Expect: ||
  printlnv2("|" + "abc".repeat(0) + "|")

  /// Expect: ||
  printlnv2("|" + "abc".repeat(-1) + "|")

  /// Expect: abcabcabc
  printlnv2("abc".repeat(3))
})()
