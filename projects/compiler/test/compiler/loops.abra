// While-loops
(() => {
  var i = 0
  while i < 3 {
    printlnv2(i)
    i += 1
  }
  /// Expect: 0
  /// Expect: 1
  /// Expect: 2
  /// Expect: done
  printlnv2("done")
})()

// Condition bindings
(() => {
  val arr = [1, 2, 3]
  var n = 0
  while arr[n] |item| {
    printlnv2(100 + item)
    n += 1
  }
  /// Expect: 101
  /// Expect: 102
  /// Expect: 103
  /// Expect: done
  printlnv2("done")
})()

// Destructuring condition binding as tuple
(() => {
  val arr = [("a", 1), ("bc", 2)]
  var n = 0
  while arr[n] |(k, v)| {
    printlnv2(100 + k.length + v)
    n += 1
  }
  /// Expect: 102
  /// Expect: 104
  /// Expect: done
  printlnv2("done")
})()

// Control flow within loops
(() => {
  /// Expect: first loop
  /// Expect: done
  while true {
    printlnv2("first loop")
    break
  }
  printlnv2("done")

  /// Expect: 0
  /// Expect: 1
  /// Expect: 3
  /// Expect: done
  var x = 0
  while x < 4 {
    if x == 2 {
      x += 1
      continue
    }
    printlnv2(x)
    x += 1
  }
  printlnv2("done")
})()

// For-loops

// No index var
(() => {
  /// Expect: a
  /// Expect: b
  /// Expect: c
  for ch in ["a", "b", "c"] {
    printlnv2(ch)
  }

  /// Expect: a 0
  /// Expect: b 1
  /// Expect: c 2
  for ch, idx in ["a", "b", "c"] {
    printlnv2("$ch $idx")
  }

  /// Expect: a 0
  /// Expect: b 1
  /// Expect: done
  for ch, idx in ["a", "b", "c"] {
    printlnv2("$ch $idx")
    if ch == "b" {
      break
    }
  }
  printlnv2("done")

  /// Expect: a 0
  /// Expect: c 2
  /// Expect: done
  for ch, idx in ["a", "b", "c"] {
    if ch == "b" {
      continue
    }
    printlnv2("$ch $idx")
  }
  printlnv2("done")
})()

// Destructuring iteratee binding as tuple
(() => {
  val arr = [("a", 1), ("bc", 2)]
  for (k, v) in arr {
    printlnv2(100 + k.length + v)
  }
  /// Expect: 102
  /// Expect: 104
  /// Expect: done
  printlnv2("done")
})()

// Iterating over `Iterator` type
(() => {
  /// Expect: 0
  /// Expect: 2
  /// Expect: 4
  /// Expect: done
  for i in range(0, 5, 2) {
    printlnv2(i)
  }
  printlnv2("done")
})()
