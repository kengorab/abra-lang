func printlnInt(i: Int) = stdoutWriteln(i.toString())

// While-loops

if true {
  var i = 0
  while i < 3 {
    printlnInt(i)
    i += 1
  }
  /// Expect: 0
  /// Expect: 1
  /// Expect: 2
  /// Expect: done
  stdoutWriteln("done")
}

// Condition bindings
if true {
  val arr = [1, 2, 3]
  var n = 0
  while arr[n] |item| {
    printlnInt(100 + item)
    n += 1
  }
  /// Expect: 101
  /// Expect: 102
  /// Expect: 103
  /// Expect: done
  stdoutWriteln("done")
}

// Destructuring condition binding as tuple
if true {
  val arr = [("a", 1), ("bc", 2)]
  var n = 0
  while arr[n] |(k, v)| {
    printlnInt(100 + k.length + v)
    n += 1
  }
  /// Expect: 102
  /// Expect: 104
  /// Expect: done
  stdoutWriteln("done")
}

// Control flow within loops
if true {
  /// Expect: first loop
  /// Expect: done
  while true {
    stdoutWriteln("first loop")
    break
  }
  stdoutWriteln("done")

  /// Expect: 0
  /// Expect: 1
  /// Expect: 3
  /// Expect: done
  var x = 0
  while x < 4 {
    if x == 2 {
      x += 1
      continue
    }
    printlnInt(x)
    x += 1
  }
  stdoutWriteln("done")
}

// For-loops

// Ranged for-loops
if true {
  /// Expect: 0
  /// Expect: 1
  /// Expect: 2
  for i in 0:3 {
    stdoutWriteln("$i")
  }

  /// Expect: 0 0
  /// Expect: 1 1
  /// Expect: 2 2
  for i, idx in 0:1+2 {
    stdoutWriteln("$i $idx")
  }

  /// Expect: 0 0
  for i, idx in 0:1+2 {
    if i == 1 break
    stdoutWriteln("$i $idx")
  }

  /// Expect: 0 0
  /// Expect: 2 2
  for i, idx in 0:1+2 {
    if i == 1 continue
    stdoutWriteln("$i $idx")
  }

  /// Expect: done
  stdoutWriteln("done")
}

// Destructuring iteratee binding as tuple
if true {
  val arr = [("a", 1), ("bc", 2)]
  for (k, v) in arr {
    printlnInt(100 + k.length + v)
  }
  /// Expect: 102
  /// Expect: 104
  /// Expect: done
  stdoutWriteln("done")
}

// Iterating over `Iterator` type
if true {
  /// Expect: 0
  /// Expect: 2
  /// Expect: 4
  /// Expect: done
  for i in range(0, 5, 2) {
    printlnInt(i)
  }
  stdoutWriteln("done")
}

// Iterating over Array, Set, Map
if true {
  /// Expect: a
  /// Expect: b
  /// Expect: c
  for ch in ["a", "b", "c"] {
    stdoutWriteln(ch)
  }

  /// Expect: a 0
  /// Expect: b 1
  /// Expect: c 2
  for ch, idx in ["a", "b", "c"] {
    stdoutWriteln("$ch $idx")
  }

  /// Expect: a 0
  /// Expect: b 1
  for ch, idx in ["a", "b", "c"] {
    stdoutWriteln("$ch $idx")
    if ch == "b" {
      break
    }
  }

  /// Expect: a 0
  /// Expect: c 2
  for ch, idx in ["a", "b", "c"] {
    if ch == "b" {
      continue
    }
    stdoutWriteln("$ch $idx")
  }

  // /// Expect: c 0
  // /// Expect: b 1
  // /// Expect: a 2
  // for ch, idx in #{"a", "b", "c"} {
  //   stdoutWriteln("$ch $idx")
  // }

  /// Expect: ("c", 3) 0
  /// Expect: ("b", 2) 1
  /// Expect: ("a", 1) 2
  for ch, idx in { a: 1, b: 2, c: 3 } {
    stdoutWriteln("$ch $idx")
  }
}
