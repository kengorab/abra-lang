type Person {
  name: String
  age: Int
}

// Test raw construction of set
if true {
  val set: Set<Int> = Set.new()
  set.insert(1)
  set.insert(2)
  set.insert(3)
  set.insert(3)

  /// Expect: 3
  println(set.size)
  /// Expect: #{1, 2, 3}
  println(set)
}

// Test set literal construction
if true {
  // Primitives
  val set1 = #{1, 2, 3, 3}

  /// Expect: 3
  println(set1.size)
  /// Expect: #{1, 2, 3}
  println(set1)

  // Objects
  val set2 = #{
    Person(name: "Foo", age: 100),
    Person(name: "Boo", age: 101),
    Person(name: "Goo", age: 102),
    Person(name: "Boo", age: 101),
  }
  /// Expect: 3
  println(set2.size)
  /// Expect: #{Person(name: "Goo", age: 102), Person(name: "Foo", age: 100), Person(name: "Boo", age: 101)}
  println(set2)
}

// == operator (also Set#eq)
if true {
  val set = #{1, 2, 3}

  /// Expect: true
  println(set == #{1, 2, 3})
  /// Expect: true
  println(#{[1, 2], [3, 4]} == #{[3, 4], [1, 2]})
  /// Expect: false
  println(set == #{1, 2, 3, 4})
}

// Set#isEmpty
if true {
  val set: Set<Int> = #{}
  /// Expect: true
  println(set.isEmpty())

  set.insert(1)
  /// Expect: false
  println(set.isEmpty())
}

// Set#iterator
if true {
  val s = #{"a", "b", "a", "c"}
  val iter = s.iterator()
  /// Expect: Option.Some(value: "c")
  println(iter.next())
  /// Expect: Option.Some(value: "b")
  println(iter.next())
  /// Expect: Option.Some(value: "a")
  println(iter.next())
  /// Expect: Option.None
  println(iter.next())
  /// Expect: Option.None
  println(iter.next())
}

// For-loops
/// Expect: c 0
/// Expect: b 1
/// Expect: a 2
for ch, idx in #{"a", "b", "c"} {
  println("$ch $idx")
}

// Set#contains
if true {
  val set: Set<Int> = #{}
  /// Expect: false
  println(set.contains(1))

  set.insert(1)
  /// Expect: true
  println(set.contains(1))
  /// Expect: false
  println(set.contains(12))
}

// Set#forEach
if true {
  val set = #{1, 17, 0, 16}
  /// Expect: 0
  /// Expect: 16
  /// Expect: 1
  /// Expect: 17
  set.forEach(i => println(i))
}

// Set#map
if true {
  val set = #{1, 17, 0, 16}
  /// Expect: [0, 0, 1, 1]
  println(set.map(i => i % 16))
}

// Set#filter
if true {
  val set = #{1, 17, 0, 16}
  /// Expect: #{16, 17}
  println(set.filter(i => i >= 16))
}

// Set#asArray
if true {
  val set1 = #{0, 1, 1, 2, 3, 3, 4}
  /// Expect: [0, 1, 2, 3, 4]
  println(set1.asArray())
}

// Set#union
if true {
  val evens = #{0, 2, 4, 6}
  val odds = #{1, 3, 5, 7}
  /// Expect: #{0, 1, 2, 3, 4, 5, 6, 7}
  println(evens.union(odds))
  /// Expect: #{0, 1, 2, 3, 4, 5, 6, 7}
  println(odds.union(evens))
}

// Set#difference
if true {
  val set1 = #{1, 2, 3, 4}
  val set2 = #{0, 2, 3, 5}
  /// Expect: #{1, 4}
  println(set1.difference(set2))
  /// Expect: #{0, 5}
  println(set2.difference(set1))
}

// Set#intersection
if true {
  val set1 = #{1, 2, 3, 4}
  val set2 = #{0, 2, 3, 5}
  /// Expect: #{2, 3}
  println(set1.intersection(set2))
  /// Expect: #{2, 3}
  println(set2.intersection(set1))
}
