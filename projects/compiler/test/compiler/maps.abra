func printlnBool(b: Bool) = stdoutWriteln(b.toString())

// Test raw construction of map
(() => {
  val m0: Map<Int, String> = Map.new()
  /// Expect: {}
  stdoutWriteln(m0.toString())

  val m1: Map<Int, String> = Map.new()
  m1.insert(24, "hello")
  /// Expect: { 24: hello }
  stdoutWriteln(m1.toString())

  val m2: Map<Int, String> = Map.new()
  m2.insert(24, "hello")
  m2.insert(17, "bonjour")
  /// Expect: { 17: bonjour, 24: hello }
  stdoutWriteln(m2.toString())

  // Forcing a hash-collision
  val m3: Map<Int, String> = Map.new()
  m3.insert(1, "hello")
  m3.insert(m3.getCapacity() + 1, "world")
  /// Expect: { 1: hello, 17: world }
  stdoutWriteln(m3.toString())
})()

// Test map literal construction
(() => {
  val m0: Map<Int, String> = {}
  /// Expect: {}
  stdoutWriteln(m0.toString())

  val m1 = { (24): "hello" }
  /// Expect: { 24: hello }
  stdoutWriteln(m1.toString())

  val m2 = { (24): "hello", (17): "bonjour" }
  /// Expect: { 17: bonjour, 24: hello }
  stdoutWriteln(m2.toString())

  // Forcing a hash-collision (16 initial buckets by default)
  val m3 = { (1): "hello", (17): "world" }
  /// Expect: { 1: hello, 17: world }
  stdoutWriteln(m3.toString())
})()

// == operator (also Map#eq)
(() => {
  val map = { a: "abc", b: "def" }

  /// Expect: true
  printlnBool(map == { b: "def", a: "abc" })
  /// Expect: true
  printlnBool({ (1): { (1): ["a"], (2): ["b"] } } == { (1): { (1): ["a"], (2): ["b"] } })
})()

// Map.fromPairs
(() => {
  // TODO: The typechecker won't recognize this if it's inlined for some reason
  val pairs = [("a", 1), ("b", 2), ("c", 3)]
  val m = Map.fromPairs(pairs)

  /// Expect: { c: 3, b: 2, a: 1 }
  stdoutWriteln(m.toString())
})()

// Map#keys
(() => {
  val map1 = { a: 1, b: 2 }
  /// Expect: #{b, a}
  stdoutWriteln(map1.keys().toString())

  val map2 = { ((1, 1)): true, ((0, 1)): false }
  /// Expect: #{(0, 1), (1, 1)}
  stdoutWriteln(map2.keys().toString())
})()

// Map#values
(() => {
  val map1 = { a: 1, b: 2 }
  /// Expect: [2, 1]
  stdoutWriteln(map1.values().toString())

  val map2 = { ((1, 1)): true, ((0, 1)): false }
  /// Expect: [false, true]
  stdoutWriteln(map2.values().toString())
})()

// Map#entries
(() => {
  val map1 = { a: 1, b: 2 }
  /// Expect: #{("b", 2), ("a", 1)}
  stdoutWriteln(map1.entries().toString())

  val map2 = { ((1, 1)): true, ((0, 1)): false }
  /// Expect: #{((1, 1), true), ((0, 1), false)}
  stdoutWriteln(map2.entries().toString())
})()

// Map#iterator
(() => {
  val m = { a: 1, b: 2, c: 3 }
  val iter = m.iterator()

  /// Expect: Option.Some(value: ("c", 3))
  stdoutWriteln(iter.next().toString())
  /// Expect: Option.Some(value: ("b", 2))
  stdoutWriteln(iter.next().toString())
  /// Expect: Option.Some(value: ("a", 1))
  stdoutWriteln(iter.next().toString())
  /// Expect: Option.None
  stdoutWriteln(iter.next().toString())
  /// Expect: Option.None
  stdoutWriteln(iter.next().toString())
})()

// For-loops
/// Expect: ("c", 3) 0
/// Expect: ("b", 2) 1
/// Expect: ("a", 1) 2
for ch, idx in { a: 1, b: 2, c: 3 } {
  stdoutWriteln("$ch $idx")
}

// Map#containsKey
(() => {
  val m = { (1): "a", (2): "b" }

  /// Expect: true
  stdoutWriteln(m.containsKey(1).toString())
  /// Expect: false
  stdoutWriteln(m.containsKey(3).toString())
})()

// Map#mapValues
(() => {
  val m1 = { (1): "abc", (2): "defg" }

  val m2 = m1.mapValues((_, v) => v + "!")
  /// Expect: { 1: abc!, 2: defg! }
  stdoutWriteln(m2.toString())

  val m3 = m1.mapValues((_, v) => v.length)
  /// Expect: { 1: 3, 2: 4 }
  stdoutWriteln(m3.toString())
})()

// Map#insert (also []= operator)
(() => {
  val m = { a: 1, b: 2 }
  m.insert("c", 3)
  m["d"] = 4
  /// Expect: { d: 4, c: 3, b: 2, a: 1 }
  stdoutWriteln(m.toString())

  val letters = ["e", "f", "g", "h", "i", "j", "l", "k", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"]
  for ch, idx in letters {
    m[ch] = idx + 4
  }
  // Map should have been resized
  /// Expect: { y: 24, w: 22, u: 20, s: 18, q: 16, o: 14, m: 12, k: 11, i: 8, g: 6, e: 4, c: 3, a: 1, z: 25, x: 23, v: 21, t: 19, r: 17, p: 15, n: 13, l: 10, j: 9, h: 7, f: 5, d: 4, b: 2 }
  stdoutWriteln(m.toString())
  /// Expect: false
  stdoutWriteln(m._needsResize().toString())
})()

// Map#get
(() => {
  val m = { (1): "a", (2): "b" }

  /// Expect: Option.Some(value: "a")
  stdoutWriteln(m.get(1).toString())
  /// Expect: Option.Some(value: "b")
  stdoutWriteln(m.get(2).toString())
  /// Expect: Option.None
  stdoutWriteln(m.get(3).toString())
})()

// Map#getOr
(() => {
  val m = { (1): "a", (2): "b" }

  /// Expect: a
  stdoutWriteln(m.getOr(1, "c"))
  /// Expect: b
  stdoutWriteln(m.getOr(2, "c"))
  /// Expect: c
  stdoutWriteln(m.getOr(3, "c"))
})()

// Map#getOrElse
(() => {
  val m = { (1): "a", (2): "b" }

  /// Expect: a
  stdoutWriteln(m.getOrElse(1, () => {
    stdoutWriteln("calling default fn")
    "c"
  }))
  /// Expect: b
  stdoutWriteln(m.getOrElse(2, () => {
    stdoutWriteln("calling default fn")
    "c"
  }))
  /// Expect: calling default fn
  /// Expect: c
  stdoutWriteln(m.getOrElse(3, () => {
    stdoutWriteln("calling default fn")
    "c"
  }))
})()

// Map#update
(() => {
  val m = { (1): "a", (2): "b" }

  /// Expect: { 1: a, 2: b }
  stdoutWriteln(m.toString())

  val old1 = m.update(1, () => "A")
  /// Expect: { 1: A, 2: b }
  stdoutWriteln(m.toString())
  /// Expect: Option.Some(value: "a")
  stdoutWriteln(old1.toString())

  val old2 = m.update(4, () => "???")
  /// Expect: { 1: A, 2: b }
  stdoutWriteln(m.toString())
  /// Expect: Option.None
  stdoutWriteln(old2.toString())
})()

// Map#remove
(() => {
  val m = {
    a: 1,
    b: 2,
    c: 3,
    d: 4,
    s: 5,
    t: 6
  }
  /// Expect: { d: 4, t: 6, c: 3, s: 5, b: 2, a: 1 }
  stdoutWriteln(m.toString())

  /// Expect: Option.None
  stdoutWriteln(m.remove("x").toString())
  /// Expect: 6
  stdoutWriteln(m.size.toString())

  /// Expect: Option.Some(value: 2)
  stdoutWriteln(m.remove("b").toString())
  /// Expect: { d: 4, t: 6, c: 3, s: 5, a: 1 }
  stdoutWriteln(m.toString())
  /// Expect: 5
  stdoutWriteln(m.size.toString())

  // Kinda dirty, but needed in order to test removing keys with the same hash
  /// Expect: true
  printlnBool(m._getKeyHash("c") == m._getKeyHash("s"))

  /// Expect: Option.Some(value: 5)
  stdoutWriteln(m.remove("s").toString())
  /// Expect: { d: 4, t: 6, c: 3, a: 1 }
  stdoutWriteln(m.toString())
  /// Expect: 4
  stdoutWriteln(m.size.toString())
  /// Expect: Option.Some(value: 3)
  stdoutWriteln(m.remove("c").toString())
  /// Expect: { d: 4, t: 6, a: 1 }
  stdoutWriteln(m.toString())
  /// Expect: 3
  stdoutWriteln(m.size.toString())

  /// Expect: true
  printlnBool(m._getKeyHash("d") == m._getKeyHash("t"))

  /// Expect: Option.Some(value: 4)
  stdoutWriteln(m.remove("d").toString())
  /// Expect: { t: 6, a: 1 }
  stdoutWriteln(m.toString())
  /// Expect: 2
  stdoutWriteln(m.size.toString())
  /// Expect: Option.Some(value: 6)
  stdoutWriteln(m.remove("t").toString())
  /// Expect: { a: 1 }
  stdoutWriteln(m.toString())
  /// Expect: 1
  stdoutWriteln(m.size.toString())
})()
