func some(): Int? = Some(123)
func none(): Int? = None

func f1(): Int? {
  val x = try some()
  Some(x + 1)
}
/// Expect: Option.Some(value: 124)
stdoutWriteln(f1().toString())

func f2(): Int? {
  val x = try none()
  Some(x + 1)
}
/// Expect: Option.None
stdoutWriteln(f2().toString())

func f3(): Int[]? {
  val arr = [try some(), (try some()) + 1, (try some()) + 2]
  Some(arr)
}
/// Expect: Option.Some(value: [123, 124, 125])
stdoutWriteln(f3().toString())

func f4(): Int[]? {
  val arr = [try some(), (try none()) + 1, (try some()) + 2]
  Some(arr)
}
/// Expect: Option.None
stdoutWriteln(f4().toString())

func f5(): Int? {
  val x = (try f1()) + (try f2()) + (try f3()).length + (try f4()).length
  Some(x)
}
/// Expect: Option.None
stdoutWriteln(f5().toString())

// Testing else-clause with terminators

func f6(): Int? {
  var acc = 0
  while acc < 10 {
    val x = try some() else {
      acc = 199
      continue
    }
    acc += x
  }

  Some(acc)
}

/// Expect: Option.Some(value: 123)
stdoutWriteln(f6().toString())

func f7(): Int? {
  var acc = 0
  while acc < 10 {
    val x = try some() else break
    acc += x
  }

  Some(acc)
}

/// Expect: Option.Some(value: 123)
stdoutWriteln(f7().toString())

func f8(): Int? {
  var acc = 0
  while acc < 10 {
    val x = try none() else {
      acc = 199
      continue
    }
    acc += x
  }

  Some(acc)
}

/// Expect: Option.Some(value: 199)
stdoutWriteln(f8().toString())

func f9(): Int? {
  var acc = 0
  while acc < 10 {
    val x = try none() else break
    acc += x
  }

  Some(acc)
}

/// Expect: Option.Some(value: 0)
stdoutWriteln(f9().toString())

func f10(): Int? {
  var acc = 0
  while acc < 10 {
    val x = try some() else return Some(12)
    acc += x
  }

  Some(acc)
}

/// Expect: Option.Some(value: 123)
stdoutWriteln(f10().toString())

func f11(): Int? {
  var acc = 0
  while acc < 10 {
    val x = try some() else return None
    acc += x
  }

  Some(acc)
}

/// Expect: Option.Some(value: 123)
stdoutWriteln(f11().toString())

func f12(): Int? {
  var acc = 0
  while acc < 10 {
    val x = try none() else return Some(12)
    acc += x
  }

  Some(acc)
}

/// Expect: Option.Some(value: 12)
stdoutWriteln(f12().toString())

func f13(): Int? {
  var acc = 0
  while acc < 10 {
    val x = try none() else return None
    acc += x
  }

  Some(acc)
}

/// Expect: Option.None
stdoutWriteln(f13().toString())

func f14(): Int? {
  val x = try some() else return Some(12)

  Some(x)
}

/// Expect: Option.Some(value: 123)
stdoutWriteln(f14().toString())

func f15(): Int? {
  val x = try some() else return None

  Some(x)
}

/// Expect: Option.Some(value: 123)
stdoutWriteln(f15().toString())

func f16(): Int? {
  val x = try none() else return Some(12)

  Some(x)
}

/// Expect: Option.Some(value: 12)
stdoutWriteln(f16().toString())

func f17(): Int? {
  val x = try none() else return None

  Some(x)
}

/// Expect: Option.None
stdoutWriteln(f17().toString())

// Testing else-clause without terminators

func f18(): Int? {
  val x = try some() else 7

  Some(x)
}

/// Expect: Option.Some(value: 123)
stdoutWriteln(f18().toString())

func f19(): Int {
  val x = try some() else 7

  x + 1
}

/// Expect: 124
stdoutWriteln(f19().toString())

func f20(): Int? {
  val x = try none() else 7

  Some(x)
}

/// Expect: Option.Some(value: 7)
stdoutWriteln(f20().toString())

func f21(): Int {
  val x = try none() else 7

  x + 1
}

/// Expect: 8
stdoutWriteln(f21().toString())
