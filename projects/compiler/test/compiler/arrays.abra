// // Test raw construction of array
// (() => {
//   val arr = Array<Int>(length: 0, _buffer: Pointer.malloc<Int>(1), _capacity: 1)
//   arr.push(12)
//   /// Expect: [12]
//   printlnv2(arr)
// })()

/// Expect: 1
printlnv2([1].length)
/// Expect: 2
printlnv2([[1, 2], [3, 4]].length)

// Test array literal construction
(() => {
  val emptyArr: Int[] = []
  /// Expect: []
  printlnv2(emptyArr)

  val intArr = [1, 2, 3, 4]
  /// Expect: [1, 2, 3, 4]
  printlnv2(intArr)

  val floatArr = [0.12, 3.45, 6.0]
  /// Expect: [0.12, 3.45, 6]
  printlnv2(floatArr.toString())

  val stringArr = ["ab", "cd", "ef"]
  /// Expect: [ab, cd, ef]
  printlnv2(stringArr)

  val nestedArr = [[1, 2], [3, 4], [5, 6]]
  /// Expect: [[1, 2], [3, 4], [5, 6]]
  printlnv2(nestedArr)
})()

// Test array indexing assignment
(() => {
  val emptyArr: Int[] = []
  emptyArr[0] = 123
  /// Expect: []
  printlnv2(emptyArr)

  val intArr = [1, 2, 3, 4]
  /// Expect: [1, 2, 3, 4]
  printlnv2(intArr)
  intArr[0] = 0
  /// Expect: [0, 2, 3, 4]
  printlnv2(intArr)
  intArr[-1] = 0
  /// Expect: [0, 2, 3, 0]
  printlnv2(intArr)

  val floatArr = [0.12, 3.45, 6.0]
  /// Expect: [0.12, 3.45, 6]
  printlnv2(floatArr.toString())
  floatArr[0] = 0.001
  /// Expect: [0.001, 3.45, 6]
  printlnv2(floatArr.toString())
  floatArr[-1] = 0.001
  /// Expect: [0.001, 3.45, 0.001]
  printlnv2(floatArr.toString())

  val stringArr = ["ab", "cd", "ef"]
  /// Expect: [ab, cd, ef]
  printlnv2(stringArr)
  stringArr[0] = "ba"
  /// Expect: [ba, cd, ef]
  printlnv2(stringArr)
  stringArr[-1] = "fe"
  /// Expect: [ba, cd, fe]
  printlnv2(stringArr)

  val nestedArr = [[1, 2], [3, 4], [5, 6]]
  /// Expect: [[1, 2], [3, 4], [5, 6]]
  printlnv2(nestedArr)
  nestedArr[0] = [0, 1]
  /// Expect: [[0, 1], [3, 4], [5, 6]]
  printlnv2(nestedArr)
  nestedArr[-1] = [3, 2]
  /// Expect: [[0, 1], [3, 4], [3, 2]]
  printlnv2(nestedArr)
})()

// == operator (also Array#eq)
(() => {
  val arr = [1, 2]

  /// Expect: true
  printlnv2(arr == [1, 2])
  /// Expect: true
  printlnv2([[1, 2], [3, 4]] == [[1, 2], [3, 4]])
  /// Expect: true
  printlnv2([1.2, 3.4] != [5.6, 7.8])
  /// Expect: true
  printlnv2([true, false] != [false, true])
})()

// Indexing (also Array#get(index: Int))
(() => {
  val arr = [1, 2, 3]
  /// Expect: Option.None
  printlnv2(arr[-4])
  /// Expect: Option.Some(value: 1)
  printlnv2(arr[-3])
  /// Expect: Option.Some(value: 2)
  printlnv2(arr[-2])
  /// Expect: Option.Some(value: 3)
  printlnv2(arr[-1])
  /// Expect: Option.Some(value: 1)
  printlnv2(arr[0])
  /// Expect: Option.Some(value: 2)
  printlnv2(arr[1])
  /// Expect: Option.Some(value: 3)
  printlnv2(arr[2])
  /// Expect: Option.None
  printlnv2(arr[3])
})()

// Range indexing (also Array#getRange(startIndex: Int, endIndex: Int))
(() => {
  val arr = [1, 2, 3, 4, 5]

  /// Expect: [2, 3, 4]
  printlnv2(arr[1:4])
  /// Expect: [2, 3, 4]
  printlnv2(arr[-4:4])
  /// Expect: [2, 3, 4]
  printlnv2(arr[1:-1])

  /// Expect: []
  printlnv2(arr[1:1])

  val x = 1
  val y = 4

  /// Expect: [2, 3, 4]
  printlnv2(arr[x:y])
  /// Expect: [2, 3, 4]
  printlnv2(arr[-y:y])

  /// Expect: [2, 3, 4, 5]
  printlnv2(arr[1:])
  /// Expect: [1]
  printlnv2(arr[:1])

  /// Expect: [2, 3, 4, 5]
  printlnv2(arr[x:])
  /// Expect: [1]
  printlnv2(arr[:x])
})()

// Array.fill
(() => {
  val zeroes = Array.fill(5, 0)
  /// Expect: [0, 0, 0, 0, 0]
  printlnv2(zeroes)

  val arr = [1, 2]
  val refs = Array.fill(3, arr)
  /// Expect: [[1, 2], [1, 2], [1, 2]]
  printlnv2(refs)
  arr.push(3)
  /// Expect: [[1, 2, 3], [1, 2, 3], [1, 2, 3]]
  printlnv2(refs)
})()

// Array.fillBy
(() => {
  val zero = 0
  val zeroes = Array.fillBy(5, () => zero)
  /// Expect: [0, 0, 0, 0, 0]
  printlnv2(zeroes)

  val nums = Array.fillBy(5, i => i + 1)
  /// Expect: [1, 2, 3, 4, 5]
  printlnv2(nums)

  val arr = [1, 2]
  val sharedRefs = Array.fillBy(3, () => arr)
  /// Expect: [[1, 2], [1, 2], [1, 2]]
  printlnv2(sharedRefs)
  arr.push(3)
  /// Expect: [[1, 2, 3], [1, 2, 3], [1, 2, 3]]
  printlnv2(sharedRefs)

  val uniqueRefs = Array.fillBy(3, () => [1, 2])
  /// Expect: [[1, 2], [1, 2], [1, 2]]
  printlnv2(uniqueRefs)
  if uniqueRefs[0] |arr| arr[1] = 0
  /// Expect: [[1, 0], [1, 2], [1, 2]]
  printlnv2(uniqueRefs)
})()

// Array#hash
(() => {
  val arr = [1, 2, 3]
  /// Expect: true
  printlnv2(arr.hash() == [1, 2, 3].hash())

  /// Expect: false
  printlnv2(arr.hash() == [1, 2].hash())
})()

// Array#iterator
(() => {
  val a = [1.23, 4.56, 7.89]
  val iter = a.iterator()
  /// Expect: Option.Some(value: 1.23)
  printlnv2(iter.next())
  /// Expect: Option.Some(value: 4.56)
  printlnv2(iter.next())
  /// Expect: Option.Some(value: 7.89)
  printlnv2(iter.next())
  /// Expect: Option.None
  printlnv2(iter.next())
  /// Expect: Option.None
  printlnv2(iter.next())
})()

// For-loops
/// Expect: a
/// Expect: b
/// Expect: c
for ch in ["a", "b", "c"] {
  printlnv2(ch)
}

// Array#push
(() => {
  val intArr = [1, 2, 3]
  /// Expect: [1, 2, 3] 3 4
  printlnv2("$intArr ${intArr.length} ${intArr.getCapacity()}")
  // Pushing beyond the capacity should expand the array
  intArr.push(4)
  intArr.push(5)
  /// Expect: [1, 2, 3, 4, 5] 5 8
  printlnv2("$intArr ${intArr.length} ${intArr.getCapacity()}")

  // Popping element should leave _capacity
  intArr.pop()
  intArr.pop()
  /// Expect: [1, 2, 3] 3 8
  printlnv2("$intArr ${intArr.length} ${intArr.getCapacity()}")

  val strArr = ["a", "b", "c"]
  val arrArr = [strArr, strArr]
  /// Expect: [[a, b, c], [a, b, c]] 3 4
  printlnv2("$arrArr ${strArr.length} ${strArr.getCapacity()}")
  // Pushing beyond the capacity should expand the array
  strArr.push("d")
  strArr.push("e")
  /// Expect: [[a, b, c, d, e], [a, b, c, d, e]] 5 8
  printlnv2("$arrArr ${strArr.length} ${strArr.getCapacity()}")
})()

// Array#pop
(() => {
  val arr = [1, 2, 3]
  /// Expect: Option.Some(value: 3)
  printlnv2(arr.pop())
  /// Expect: [1, 2]
  printlnv2(arr)

  /// Expect: Option.Some(value: 2)
  printlnv2(arr.pop())
  /// Expect: [1]
  printlnv2(arr)

  /// Expect: Option.Some(value: 1)
  printlnv2(arr.pop())
  /// Expect: []
  printlnv2(arr)

  /// Expect: Option.None
  printlnv2(arr.pop())
  /// Expect: []
  printlnv2(arr)
})()

// Array#concat
(() => {
  val arr1 = [1, 2, 3, 4]
  val arr2 = [5, 6, 7]
  /// Expect: [1, 2, 3, 4, 5, 6, 7]
  printlnv2(arr1.concat(arr2))
  /// Expect: [1, 2, 3, 4] [5, 6, 7]
  printlnv2("$arr1 $arr2") // verify originals unmodified
})()

// Array#map
func addOne(i: Int): Int = i + 1
func exclaim(i: Int, _: Int, x = "!"): String = i + x //"$i$x"
// val one = 1
(() => {
  val arr = [1, 2, 3, 4]

  /// Expect: [2, 3, 4, 5]
  printlnv2(arr.map(addOne))
  /// Expect: [2, 3, 4, 5]
  printlnv2(arr.map(i => i + 1))
  // /// Expect: [2, 3, 4, 5]
  // printlnv2(arr.map(i => i + one))

  /// Expect: [1!, 2!, 3!, 4!]
  printlnv2(arr.map(exclaim))
  /// Expect: [1!, 2!, 3!, 4!]
  printlnv2(arr.map((i, _, x = "!") => i + x))
})()

// Array#flatMap
(() => {
  val arr = [1, 2, 3, 4]

  /// Expect: [1, 2, 2, 3, 3, 3, 4, 4, 4, 4]
  printlnv2(arr.flatMap(i => Array.fill(i, i)))
})()

// Array#filter
func isEven(i: Int): Bool = i % 2 == 0
(() => {
  val arr = [1, 2, 3, 4]

  /// Expect: [2, 4]
  printlnv2(arr.filter(isEven))
  /// Expect: [2, 4]
  printlnv2(arr.filter(x => x % 2 == 0))
})()

// Array#reduce
func doSum(acc: Int, i: Int): Int = acc + i
(() => {
  val arr = [1, 2, 3, 4]

  // TODO: I shouldn't need r1/r2 below, but otherwise I get a typechecker error:
  //   Type mismatch for parameter 'initialValue'
  //     |    printlnv2(arr.reduce(0, doSum))
  //                             ^
  //   Expected: Any
  //   but instead found: Int

  /// Expect: 10
  val r1 = arr.reduce(0, doSum)
  printlnv2(r1)
  /// Expect: 10
  val r2 = arr.reduce(0, (acc, i) => acc + i)
  printlnv2(r2)
})()

// Array#forEach
func printItem(item: Int) = printlnv2(item)
(() => {
  val arr = [1, 2, 3, 4]

  /// Expect: 1
  /// Expect: 2
  /// Expect: 3
  /// Expect: 4
  arr.forEach(printItem)
  /// Expect: 1
  /// Expect: 2
  /// Expect: 3
  /// Expect: 4
  arr.forEach(i => {
    printlnv2(i)
  })
})()

// Array#join
(() => {
  val arr = [123, 456, 789]
  /// Expect: 123|456|789
  printlnv2(arr.join("|"))
  /// Expect: 123456789
  printlnv2(arr.join())

  /// Expect: 1
  printlnv2([1].join(", "))
})()

// Array#contains
(() => {
  val intArr = [123, 456, 789]
  /// Expect: true
  printlnv2(intArr.contains(123))
  /// Expect: false
  printlnv2(intArr.contains(10))

  val empty: Int[] = []
  /// Expect: false
  printlnv2(empty.contains(123))

  val strArr = ["hello", "world"]
  /// Expect: true
  printlnv2(strArr.contains("hello"))
  /// Expect: false
  printlnv2(strArr.contains("HELLO"))
})()

// Array#find
(() => {
  val intArr = [123, 456, 789]
  /// Expect: Option.Some(value: 123)
  printlnv2(intArr.find(i => i == 123))
  /// Expect: Option.None
  printlnv2(intArr.find(i => i == 10))

  val empty: Int[] = []
  /// Expect: Option.None
  printlnv2(empty.find(i => i == 123))

  val strArr = ["hello", "world"]
  /// Expect: Option.Some(value: "hello")
  printlnv2(strArr.find(s => s == "hello"))
  /// Expect: Option.None
  printlnv2(strArr.find(s => s == "HELLO"))
})()

// Array#findIndex
(() => {
  val intArr = [123, 456, 789]
  /// Expect: Option.Some(value: (123, 0))
  printlnv2(intArr.findIndex(i => i == 123))
  /// Expect: Option.None
  printlnv2(intArr.findIndex(i => i == 10))

  val empty: Int[] = []
  /// Expect: Option.None
  printlnv2(empty.findIndex(i => i == 123))

  val strArr = ["hello", "world"]
  /// Expect: Option.Some(value: ("hello", 0))
  printlnv2(strArr.findIndex(s => s == "hello"))
  /// Expect: Option.None
  printlnv2(strArr.findIndex(s => s == "HELLO"))
})()

// Array#any
(() => {
  val intArr = [123, 456, 789]
  /// Expect: true
  printlnv2(intArr.any(i => i == 123))
  /// Expect: false
  printlnv2(intArr.any(i => i == 10))

  val empty: Int[] = []
  /// Expect: false
  printlnv2(empty.any(i => i == 123))

  val strArr = ["hello", "world"]
  /// Expect: true
  printlnv2(strArr.any(s => s == "hello"))
  /// Expect: false
  printlnv2(strArr.any(s => s == "HELLO"))
})()

// Array#all
(() => {
  val intArr = [123, 456, 789]
  /// Expect: true
  printlnv2(intArr.all(i => i > 0))
  /// Expect: false
  printlnv2(intArr.all(i => i == 10))

  val empty: Int[] = []
  /// Expect: true
  printlnv2(empty.all(i => i == 123))

  val strArr = ["hello", "world"]
  /// Expect: true
  printlnv2(strArr.all(s => s.length > 0))
  /// Expect: false
  printlnv2(strArr.all(s => s == "HELLO"))
})()

// Array#sortBy
(() => {
  val strings = ["abc", "d", "efgh", "ij", "k", "lm", "nopqr", "stu", "v", "wxyz"]
  val sorted = strings.sortBy(s => s.length)
  /// Expect: [abc, d, efgh, ij, k, lm, nopqr, stu, v, wxyz]
  printlnv2(strings) // original should be unmodified
  /// Expect: [d, k, v, ij, lm, stu, abc, efgh, wxyz, nopqr]
  printlnv2(sorted)

  val arrays = [[1, 2], [], [3, 4, 5], [6], [7, 8, 9, 10]]
  val sortedRev = arrays.sortBy(fn: a => a.length, reverse: true)
  /// Expect: [[1, 2], [], [3, 4, 5], [6], [7, 8, 9, 10]]
  printlnv2(arrays) // original should be unmodified
  /// Expect: [[7, 8, 9, 10], [3, 4, 5], [1, 2], [6], []]
  printlnv2(sortedRev)
})()

// Array#keyBy
(() => {
  val empty: String[] = []
  /// Expect: {}
  printlnv2(empty.keyBy(s => s.length))

  val strArr = "The quick brown fox jumped over the lazy dog".split(" ")
  /// Expect: { 3: dog, 4: lazy, 5: brown, 6: jumped }
  printlnv2(strArr.keyBy(s => s.length))
})()

// Array#indexBy
(() => {
  val empty: String[] = []
  /// Expect: {}
  printlnv2(empty.indexBy(s => s.length))

  val strArr = "The quick brown fox jumped over the lazy dog".split(" ")
  /// Expect: { 3: [The, fox, the, dog], 4: [over, lazy], 5: [quick, brown], 6: [jumped] }
  printlnv2(strArr.indexBy(s => s.length))
})()

// Array#asSet
(() => {
  val empty: String[] = []
  val emptySet: Set<String> = #{}
  /// Expect: true
  printlnv2(empty.asSet() == emptySet)

  val arr = [1, 2, 3, 4, 3, 2, 1]
  /// Expect: true
  printlnv2(arr.asSet() == #{1, 2, 3, 4})
})()
