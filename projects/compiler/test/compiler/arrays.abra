// // Test raw construction of array
// (() => {
//   val arr = Array<Int>(length: 0, _buffer: Pointer.malloc<Int>(1), _capacity: 1)
//   arr.push(12)
//   /// Expect: [12]
//   stdoutWriteln(arr)
// })()

/// Expect: 1
stdoutWriteln([1].length.toString())
/// Expect: 2
stdoutWriteln([[1, 2], [3, 4]].length.toString())

// Test array literal construction
(() => {
  val emptyArr: Int[] = []
  /// Expect: []
  stdoutWriteln(emptyArr.toString())

  val intArr = [1, 2, 3, 4]
  /// Expect: [1, 2, 3, 4]
  stdoutWriteln(intArr.toString())

  val floatArr = [0.12, 3.45, 6.0]
  /// Expect: [0.12, 3.45, 6]
  stdoutWriteln(floatArr.toString())

  val stringArr = ["ab", "cd", "ef"]
  /// Expect: [ab, cd, ef]
  stdoutWriteln(stringArr.toString())

  val nestedArr = [[1, 2], [3, 4], [5, 6]]
  /// Expect: [[1, 2], [3, 4], [5, 6]]
  stdoutWriteln(nestedArr.toString())
})()

// Test array indexing assignment
(() => {
  val emptyArr: Int[] = []
  emptyArr[0] = 123
  /// Expect: []
  stdoutWriteln(emptyArr.toString())

  val intArr = [1, 2, 3, 4]
  /// Expect: [1, 2, 3, 4]
  stdoutWriteln(intArr.toString())
  intArr[0] = 0
  /// Expect: [0, 2, 3, 4]
  stdoutWriteln(intArr.toString())
  intArr[-1] = 0
  /// Expect: [0, 2, 3, 0]
  stdoutWriteln(intArr.toString())

  val floatArr = [0.12, 3.45, 6.0]
  /// Expect: [0.12, 3.45, 6]
  stdoutWriteln(floatArr.toString())
  floatArr[0] = 0.001
  /// Expect: [0.001, 3.45, 6]
  stdoutWriteln(floatArr.toString())
  floatArr[-1] = 0.001
  /// Expect: [0.001, 3.45, 0.001]
  stdoutWriteln(floatArr.toString())

  val stringArr = ["ab", "cd", "ef"]
  /// Expect: [ab, cd, ef]
  stdoutWriteln(stringArr.toString())
  stringArr[0] = "ba"
  /// Expect: [ba, cd, ef]
  stdoutWriteln(stringArr.toString())
  stringArr[-1] = "fe"
  /// Expect: [ba, cd, fe]
  stdoutWriteln(stringArr.toString())

  val nestedArr = [[1, 2], [3, 4], [5, 6]]
  /// Expect: [[1, 2], [3, 4], [5, 6]]
  stdoutWriteln(nestedArr.toString())
  nestedArr[0] = [0, 1]
  /// Expect: [[0, 1], [3, 4], [5, 6]]
  stdoutWriteln(nestedArr.toString())
  nestedArr[-1] = [3, 2]
  /// Expect: [[0, 1], [3, 4], [3, 2]]
  stdoutWriteln(nestedArr.toString())
})()

// == operator (also Array#eq)
(() => {
  val arr = [1, 2]

  /// Expect: true
  stdoutWriteln((arr == [1, 2]).toString())
  /// Expect: true
  stdoutWriteln(([[1, 2], [3, 4]] == [[1, 2], [3, 4]]).toString())
  /// Expect: true
  stdoutWriteln(([1.2, 3.4] != [5.6, 7.8]).toString())
  /// Expect: true
  stdoutWriteln(([true, false] != [false, true]).toString())
})()

// Indexing (also Array#get(index: Int))
(() => {
  val arr = [1, 2, 3]
  /// Expect: Option.None
  stdoutWriteln(arr[-4].toString())
  /// Expect: Option.Some(value: 1)
  stdoutWriteln(arr[-3].toString())
  /// Expect: Option.Some(value: 2)
  stdoutWriteln(arr[-2].toString())
  /// Expect: Option.Some(value: 3)
  stdoutWriteln(arr[-1].toString())
  /// Expect: Option.Some(value: 1)
  stdoutWriteln(arr[0].toString())
  /// Expect: Option.Some(value: 2)
  stdoutWriteln(arr[1].toString())
  /// Expect: Option.Some(value: 3)
  stdoutWriteln(arr[2].toString())
  /// Expect: Option.None
  stdoutWriteln(arr[3].toString())
})()

// Range indexing (also Array#getRange(startIndex: Int, endIndex: Int))
(() => {
  val arr = [1, 2, 3, 4, 5]

  /// Expect: [2, 3, 4]
  stdoutWriteln(arr[1:4].toString())
  /// Expect: [2, 3, 4]
  stdoutWriteln(arr[-4:4].toString())
  /// Expect: [2, 3, 4]
  stdoutWriteln(arr[1:-1].toString())

  /// Expect: []
  stdoutWriteln(arr[1:1].toString())

  val x = 1
  val y = 4

  /// Expect: [2, 3, 4]
  stdoutWriteln(arr[x:y].toString())
  /// Expect: [2, 3, 4]
  stdoutWriteln(arr[-y:y].toString())

  /// Expect: [2, 3, 4, 5]
  stdoutWriteln(arr[1:].toString())
  /// Expect: [1]
  stdoutWriteln(arr[:1].toString())

  /// Expect: [2, 3, 4, 5]
  stdoutWriteln(arr[x:].toString())
  /// Expect: [1]
  stdoutWriteln(arr[:x].toString())
})()

// Array.fill
(() => {
  val zeroes = Array.fill(5, 0)
  /// Expect: [0, 0, 0, 0, 0]
  stdoutWriteln(zeroes.toString())

  val arr = [1, 2]
  val refs = Array.fill(3, arr)
  /// Expect: [[1, 2], [1, 2], [1, 2]]
  stdoutWriteln(refs.toString())
  arr.push(3)
  /// Expect: [[1, 2, 3], [1, 2, 3], [1, 2, 3]]
  stdoutWriteln(refs.toString())
})()

// Array.fillBy
(() => {
  val zero = 0
  val zeroes = Array.fillBy(5, () => zero)
  /// Expect: [0, 0, 0, 0, 0]
  stdoutWriteln(zeroes.toString())

  val nums = Array.fillBy(5, i => i + 1)
  /// Expect: [1, 2, 3, 4, 5]
  stdoutWriteln(nums.toString())

  val arr = [1, 2]
  val sharedRefs = Array.fillBy(3, () => arr)
  /// Expect: [[1, 2], [1, 2], [1, 2]]
  stdoutWriteln(sharedRefs.toString())
  arr.push(3)
  /// Expect: [[1, 2, 3], [1, 2, 3], [1, 2, 3]]
  stdoutWriteln(sharedRefs.toString())

  val uniqueRefs = Array.fillBy(3, () => [1, 2])
  /// Expect: [[1, 2], [1, 2], [1, 2]]
  stdoutWriteln(uniqueRefs.toString())
  if uniqueRefs[0] |arr| arr[1] = 0
  /// Expect: [[1, 0], [1, 2], [1, 2]]
  stdoutWriteln(uniqueRefs.toString())
})()

// Array#hash
(() => {
  val arr = [1, 2, 3]
  /// Expect: true
  stdoutWriteln((arr.hash() == [1, 2, 3].hash()).toString())

  /// Expect: false
  stdoutWriteln((arr.hash() == [1, 2].hash()).toString())
})()

// Array#iterator
(() => {
  val a = [1.23, 4.56, 7.89]
  val iter = a.iterator()
  /// Expect: Option.Some(value: 1.23)
  stdoutWriteln(iter.next().toString())
  /// Expect: Option.Some(value: 4.56)
  stdoutWriteln(iter.next().toString())
  /// Expect: Option.Some(value: 7.89)
  stdoutWriteln(iter.next().toString())
  /// Expect: Option.None
  stdoutWriteln(iter.next().toString())
  /// Expect: Option.None
  stdoutWriteln(iter.next().toString())
})()

// For-loops
/// Expect: a
/// Expect: b
/// Expect: c
for ch in ["a", "b", "c"] {
  stdoutWriteln(ch)
}

// Array#push
(() => {
  val intArr = [1, 2, 3]
  /// Expect: [1, 2, 3] 3 4
  stdoutWriteln("$intArr ${intArr.length} ${intArr.getCapacity()}")
  // Pushing beyond the capacity should expand the array
  intArr.push(4)
  intArr.push(5)
  /// Expect: [1, 2, 3, 4, 5] 5 8
  stdoutWriteln("$intArr ${intArr.length} ${intArr.getCapacity()}")

  // Popping element should leave _capacity
  intArr.pop()
  intArr.pop()
  /// Expect: [1, 2, 3] 3 8
  stdoutWriteln("$intArr ${intArr.length} ${intArr.getCapacity()}")

  val strArr = ["a", "b", "c"]
  val arrArr = [strArr, strArr]
  /// Expect: [[a, b, c], [a, b, c]] 3 4
  stdoutWriteln("$arrArr ${strArr.length} ${strArr.getCapacity()}")
  // Pushing beyond the capacity should expand the array
  strArr.push("d")
  strArr.push("e")
  /// Expect: [[a, b, c, d, e], [a, b, c, d, e]] 5 8
  stdoutWriteln("$arrArr ${strArr.length} ${strArr.getCapacity()}")
})()

// Array#pop
(() => {
  val arr = [1, 2, 3]
  /// Expect: Option.Some(value: 3)
  stdoutWriteln(arr.pop().toString())
  /// Expect: [1, 2]
  stdoutWriteln(arr.toString())

  /// Expect: Option.Some(value: 2)
  stdoutWriteln(arr.pop().toString())
  /// Expect: [1]
  stdoutWriteln(arr.toString())

  /// Expect: Option.Some(value: 1)
  stdoutWriteln(arr.pop().toString())
  /// Expect: []
  stdoutWriteln(arr.toString())

  /// Expect: Option.None
  stdoutWriteln(arr.pop().toString())
  /// Expect: []
  stdoutWriteln(arr.toString())
})()

// Array#concat
(() => {
  val arr1 = [1, 2, 3, 4]
  val arr2 = [5, 6, 7]
  /// Expect: [1, 2, 3, 4, 5, 6, 7]
  stdoutWriteln(arr1.concat(arr2).toString())
  /// Expect: [1, 2, 3, 4] [5, 6, 7]
  stdoutWriteln("$arr1 $arr2") // verify originals unmodified
})()

// Array#map
func addOne(i: Int): Int = i + 1
func exclaim(i: Int, _: Int, x = "!"): String = i + x //"$i$x"
// val one = 1
(() => {
  val arr = [1, 2, 3, 4]

  /// Expect: [2, 3, 4, 5]
  stdoutWriteln(arr.map(addOne).toString())
  /// Expect: [2, 3, 4, 5]
  stdoutWriteln(arr.map(i => i + 1).toString())
  // /// Expect: [2, 3, 4, 5]
  // stdoutWriteln(arr.map(i => i + one))

  /// Expect: [1!, 2!, 3!, 4!]
  stdoutWriteln(arr.map(exclaim).toString())
  /// Expect: [1!, 2!, 3!, 4!]
  stdoutWriteln(arr.map((i, _, x = "!") => i + x).toString())
})()

// Array#flatMap
(() => {
  val arr = [1, 2, 3, 4]

  /// Expect: [1, 2, 2, 3, 3, 3, 4, 4, 4, 4]
  stdoutWriteln(arr.flatMap(i => Array.fill(i, i)).toString())
})()

// Array#filter
func isEven(i: Int): Bool = i % 2 == 0
(() => {
  val arr = [1, 2, 3, 4]

  /// Expect: [2, 4]
  stdoutWriteln(arr.filter(isEven).toString())
  /// Expect: [2, 4]
  stdoutWriteln(arr.filter(x => x % 2 == 0).toString())
})()

// Array#reduce
func doSum(acc: Int, i: Int): Int = acc + i
(() => {
  val arr = [1, 2, 3, 4]

  // TODO: I shouldn't need r1/r2 below, but otherwise I get a typechecker error:
  //   Type mismatch for parameter 'initialValue'
  //     |    stdoutWriteln(arr.reduce(0, doSum))
  //                             ^
  //   Expected: Any
  //   but instead found: Int

  /// Expect: 10
  val r1 = arr.reduce(0, doSum)
  stdoutWriteln(r1.toString())
  /// Expect: 10
  val r2 = arr.reduce(0, (acc, i) => acc + i)
  stdoutWriteln(r2.toString())
})()

// Array#forEach
func printItem(item: Int) = stdoutWriteln(item.toString())
(() => {
  val arr = [1, 2, 3, 4]

  /// Expect: 1
  /// Expect: 2
  /// Expect: 3
  /// Expect: 4
  arr.forEach(printItem)
  /// Expect: 1
  /// Expect: 2
  /// Expect: 3
  /// Expect: 4
  arr.forEach(i => {
    stdoutWriteln(i.toString())
  })
})()

// Array#join
(() => {
  val arr = [123, 456, 789]
  /// Expect: 123|456|789
  stdoutWriteln(arr.join("|"))
  /// Expect: 123456789
  stdoutWriteln(arr.join())

  /// Expect: 1
  stdoutWriteln([1].join(", "))
})()

// Array#contains
(() => {
  val intArr = [123, 456, 789]
  /// Expect: true
  stdoutWriteln(intArr.contains(123).toString())
  /// Expect: false
  stdoutWriteln(intArr.contains(10).toString())

  val empty: Int[] = []
  /// Expect: false
  stdoutWriteln(empty.contains(123).toString())

  val strArr = ["hello", "world"]
  /// Expect: true
  stdoutWriteln(strArr.contains("hello").toString())
  /// Expect: false
  stdoutWriteln(strArr.contains("HELLO").toString())
})()

// Array#find
(() => {
  val intArr = [123, 456, 789]
  /// Expect: Option.Some(value: 123)
  stdoutWriteln(intArr.find(i => i == 123).toString())
  /// Expect: Option.None
  stdoutWriteln(intArr.find(i => i == 10).toString())

  val empty: Int[] = []
  /// Expect: Option.None
  stdoutWriteln(empty.find(i => i == 123).toString())

  val strArr = ["hello", "world"]
  /// Expect: Option.Some(value: "hello")
  stdoutWriteln(strArr.find(s => s == "hello").toString())
  /// Expect: Option.None
  stdoutWriteln(strArr.find(s => s == "HELLO").toString())
})()

// Array#findIndex
(() => {
  val intArr = [123, 456, 789]
  /// Expect: Option.Some(value: (123, 0))
  stdoutWriteln(intArr.findIndex(i => i == 123).toString())
  /// Expect: Option.None
  stdoutWriteln(intArr.findIndex(i => i == 10).toString())

  val empty: Int[] = []
  /// Expect: Option.None
  stdoutWriteln(empty.findIndex(i => i == 123).toString())

  val strArr = ["hello", "world"]
  /// Expect: Option.Some(value: ("hello", 0))
  stdoutWriteln(strArr.findIndex(s => s == "hello").toString())
  /// Expect: Option.None
  stdoutWriteln(strArr.findIndex(s => s == "HELLO").toString())
})()

// Array#any
(() => {
  val intArr = [123, 456, 789]
  /// Expect: true
  stdoutWriteln(intArr.any(i => i == 123).toString())
  /// Expect: false
  stdoutWriteln(intArr.any(i => i == 10).toString())

  val empty: Int[] = []
  /// Expect: false
  stdoutWriteln(empty.any(i => i == 123).toString())

  val strArr = ["hello", "world"]
  /// Expect: true
  stdoutWriteln(strArr.any(s => s == "hello").toString())
  /// Expect: false
  stdoutWriteln(strArr.any(s => s == "HELLO").toString())
})()

// Array#all
(() => {
  val intArr = [123, 456, 789]
  /// Expect: true
  stdoutWriteln(intArr.all(i => i > 0).toString())
  /// Expect: false
  stdoutWriteln(intArr.all(i => i == 10).toString())

  val empty: Int[] = []
  /// Expect: true
  stdoutWriteln(empty.all(i => i == 123).toString())

  val strArr = ["hello", "world"]
  /// Expect: true
  stdoutWriteln(strArr.all(s => s.length > 0).toString())
  /// Expect: false
  stdoutWriteln(strArr.all(s => s == "HELLO").toString())
})()

// Array#sortBy
(() => {
  val strings = ["abc", "d", "efgh", "ij", "k", "lm", "nopqr", "stu", "v", "wxyz"]
  val sorted = strings.sortBy(s => s.length)
  /// Expect: [abc, d, efgh, ij, k, lm, nopqr, stu, v, wxyz]
  stdoutWriteln(strings.toString()) // original should be unmodified
  /// Expect: [d, k, v, ij, lm, stu, abc, efgh, wxyz, nopqr]
  stdoutWriteln(sorted.toString())

  val arrays = [[1, 2], [], [3, 4, 5], [6], [7, 8, 9, 10]]
  val sortedRev = arrays.sortBy(fn: a => a.length, reverse: true)
  /// Expect: [[1, 2], [], [3, 4, 5], [6], [7, 8, 9, 10]]
  stdoutWriteln(arrays.toString()) // original should be unmodified
  /// Expect: [[7, 8, 9, 10], [3, 4, 5], [1, 2], [6], []]
  stdoutWriteln(sortedRev.toString())
})()

// Array#keyBy
(() => {
  val empty: String[] = []
  /// Expect: {}
  stdoutWriteln(empty.keyBy(s => s.length).toString())

  val strArr = "The quick brown fox jumped over the lazy dog".split(" ")
  /// Expect: { 3: dog, 4: lazy, 5: brown, 6: jumped }
  stdoutWriteln(strArr.keyBy(s => s.length).toString())
})()

// Array#indexBy
(() => {
  val empty: String[] = []
  /// Expect: {}
  stdoutWriteln(empty.indexBy(s => s.length).toString())

  val strArr = "The quick brown fox jumped over the lazy dog".split(" ")
  /// Expect: { 3: [The, fox, the, dog], 4: [over, lazy], 5: [quick, brown], 6: [jumped] }
  stdoutWriteln(strArr.indexBy(s => s.length).toString())
})()

// Array#asSet
(() => {
  val empty: String[] = []
  val emptySet: Set<String> = #{}
  /// Expect: true
  stdoutWriteln((empty.asSet() == emptySet).toString())

  val arr = [1, 2, 3, 4, 3, 2, 1]
  /// Expect: true
  stdoutWriteln((arr.asSet() == #{1, 2, 3, 4}).toString())
})()
