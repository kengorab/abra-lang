/// Expect: 1
println([1].length)
/// Expect: 2
println([[1, 2], [3, 4]].length)

// Test array literal construction
if true {
  val emptyArr: Int[] = []
  /// Expect: []
  println(emptyArr)

  val intArr = [1, 2, 3, 4]
  /// Expect: [1, 2, 3, 4]
  println(intArr)

  val floatArr = [0.12, 3.45, 6.0]
  /// Expect: [0.12, 3.45, 6]
  println(floatArr)

  val stringArr = ["ab", "cd", "ef"]
  /// Expect: [ab, cd, ef]
  println(stringArr)

  val nestedArr = [[1, 2], [3, 4], [5, 6]]
  /// Expect: [[1, 2], [3, 4], [5, 6]]
  println(nestedArr)
}

// Test array indexing assignment
if true {
  val emptyArr: Int[] = []
  emptyArr[0] = 123
  /// Expect: []
  println(emptyArr)

  val intArr = [1, 2, 3, 4]
  /// Expect: [1, 2, 3, 4]
  println(intArr)
  intArr[0] = 0
  /// Expect: [0, 2, 3, 4]
  println(intArr)
  intArr[-1] = 0
  /// Expect: [0, 2, 3, 0]
  println(intArr)

  val floatArr = [0.12, 3.45, 6.0]
  /// Expect: [0.12, 3.45, 6]
  println(floatArr)
  floatArr[0] = 0.001
  /// Expect: [0.001, 3.45, 6]
  println(floatArr)
  floatArr[-1] = 0.001
  /// Expect: [0.001, 3.45, 0.001]
  println(floatArr)

  val stringArr = ["ab", "cd", "ef"]
  /// Expect: [ab, cd, ef]
  println(stringArr)
  stringArr[0] = "ba"
  /// Expect: [ba, cd, ef]
  println(stringArr)
  stringArr[-1] = "fe"
  /// Expect: [ba, cd, fe]
  println(stringArr)

  val nestedArr = [[1, 2], [3, 4], [5, 6]]
  /// Expect: [[1, 2], [3, 4], [5, 6]]
  println(nestedArr)
  nestedArr[0] = [0, 1]
  /// Expect: [[0, 1], [3, 4], [5, 6]]
  println(nestedArr)
  nestedArr[-1] = [3, 2]
  /// Expect: [[0, 1], [3, 4], [3, 2]]
  println(nestedArr)
}

// == operator (also Array#eq)
if true {
  val arr = [1, 2]

  /// Expect: true
  println((arr == [1, 2]))
  /// Expect: true
  println(([[1, 2], [3, 4]] == [[1, 2], [3, 4]]))
  /// Expect: true
  println(([1.2, 3.4] != [5.6, 7.8]))
  /// Expect: true
  println(([true, false] != [false, true]))
}

// Indexing (also Array#get(index: Int))
if true {
  val arr = [1, 2, 3]
  /// Expect: Option.None
  println(arr[-4])
  /// Expect: Option.Some(value: 1)
  println(arr[-3])
  /// Expect: Option.Some(value: 2)
  println(arr[-2])
  /// Expect: Option.Some(value: 3)
  println(arr[-1])
  /// Expect: Option.Some(value: 1)
  println(arr[0])
  /// Expect: Option.Some(value: 2)
  println(arr[1])
  /// Expect: Option.Some(value: 3)
  println(arr[2])
  /// Expect: Option.None
  println(arr[3])
}

// Range indexing (also Array#getRange(startIndex: Int, endIndex: Int))
if true {
  val arr = [1, 2, 3, 4, 5]

  /// Expect: [2, 3, 4]
  println(arr[1:4])
  /// Expect: [2, 3, 4]
  println(arr[-4:4])
  /// Expect: [2, 3, 4]
  println(arr[1:-1])

  /// Expect: []
  println(arr[1:1])

  val x = 1
  val y = 4

  /// Expect: [2, 3, 4]
  println(arr[x:y])
  /// Expect: [2, 3, 4]
  println(arr[-y:y])

  /// Expect: [2, 3, 4, 5]
  println(arr[1:])
  /// Expect: [1]
  println(arr[:1])

  /// Expect: [2, 3, 4, 5]
  println(arr[x:])
  /// Expect: [1]
  println(arr[:x])
}

// Array.fill
if true {
  val zeroes = Array.fill(5, 0)
  /// Expect: [0, 0, 0, 0, 0]
  println(zeroes)

  val arr = [1, 2]
  val refs = Array.fill(3, arr)
  /// Expect: [[1, 2], [1, 2], [1, 2]]
  println(refs)
  arr.push(3)
  /// Expect: [[1, 2, 3], [1, 2, 3], [1, 2, 3]]
  println(refs)
}

// Array.fillBy
if true {
  val zero = 0
  val zeroes = Array.fillBy(5, () => zero)
  /// Expect: [0, 0, 0, 0, 0]
  println(zeroes)

  val nums = Array.fillBy(5, i => i + 1)
  /// Expect: [1, 2, 3, 4, 5]
  println(nums)

  val arr = [1, 2]
  val sharedRefs = Array.fillBy(3, () => arr)
  /// Expect: [[1, 2], [1, 2], [1, 2]]
  println(sharedRefs)
  arr.push(3)
  /// Expect: [[1, 2, 3], [1, 2, 3], [1, 2, 3]]
  println(sharedRefs)

  val uniqueRefs = Array.fillBy(3, () => [1, 2])
  /// Expect: [[1, 2], [1, 2], [1, 2]]
  println(uniqueRefs)
  if uniqueRefs[0] |arr| arr[1] = 0
  /// Expect: [[1, 0], [1, 2], [1, 2]]
  println(uniqueRefs)
}

// Array#hash
if true {
  val arr = [1, 2, 3]
  /// Expect: true
  println((arr.hash() == [1, 2, 3].hash()))

  /// Expect: false
  println((arr.hash() == [1, 2].hash()))
}

// Array#iterator
if true {
  val a = [1.23, 4.56, 7.89]
  val iter = a.iterator()
  /// Expect: Option.Some(value: 1.23)
  println(iter.next())
  /// Expect: Option.Some(value: 4.56)
  println(iter.next())
  /// Expect: Option.Some(value: 7.89)
  println(iter.next())
  /// Expect: Option.None
  println(iter.next())
  /// Expect: Option.None
  println(iter.next())
}

// For-loops
/// Expect: a
/// Expect: b
/// Expect: c
for ch in ["a", "b", "c"] {
  println(ch)
}

// Array#push
if true {
  val intArr = [1, 2, 3]
  /// Expect: [1, 2, 3] 3 4
  println(intArr, intArr.length, intArr.getCapacity())
  // Pushing beyond the capacity should expand the array
  intArr.push(4)
  intArr.push(5)
  /// Expect: [1, 2, 3, 4, 5] 5 8
  println(intArr, intArr.length, intArr.getCapacity())

  // Popping element should leave _capacity
  intArr.pop()
  intArr.pop()
  /// Expect: [1, 2, 3] 3 8
  println(intArr, intArr.length, intArr.getCapacity())

  val strArr = ["a", "b", "c"]
  val arrArr = [strArr, strArr]
  /// Expect: [[a, b, c], [a, b, c]] 3 4
  println(arrArr, strArr.length, strArr.getCapacity())
  // Pushing beyond the capacity should expand the array
  strArr.push("d")
  strArr.push("e")
  /// Expect: [[a, b, c, d, e], [a, b, c, d, e]] 5 8
  println(arrArr, strArr.length, strArr.getCapacity())
}

// Array#pop
if true {
  val arr = [1, 2, 3]
  /// Expect: Option.Some(value: 3)
  println(arr.pop())
  /// Expect: [1, 2]
  println(arr)

  /// Expect: Option.Some(value: 2)
  println(arr.pop())
  /// Expect: [1]
  println(arr)

  /// Expect: Option.Some(value: 1)
  println(arr.pop())
  /// Expect: []
  println(arr)

  /// Expect: Option.None
  println(arr.pop())
  /// Expect: []
  println(arr)
}

// Array#concat
if true {
  val arr1 = [1, 2, 3, 4]
  val arr2 = [5, 6, 7]
  /// Expect: [1, 2, 3, 4, 5, 6, 7]
  println(arr1.concat(arr2))
  /// Expect: [1, 2, 3, 4] [5, 6, 7]
  println(arr1, arr2) // verify originals unmodified
}

// Array#map
func addOne(i: Int): Int = i + 1
func exclaim(i: Int, _: Int, x = "!"): String = i + x
// val one = 1
if true {
  val arr = [1, 2, 3, 4]

  /// Expect: [2, 3, 4, 5]
  println(arr.map(addOne))
  /// Expect: [2, 3, 4, 5]
  val v1 = arr.map(i => i + 1)
  println(v1)
  // /// Expect: [2, 3, 4, 5]
  // println(arr.map(i => i + one))

  /// Expect: [1!, 2!, 3!, 4!]
  println(arr.map(exclaim))
  /// Expect: [1!, 2!, 3!, 4!]
  val v2 = arr.map((i, _, x = "!") => i + x)
  println(v2)
}

// Array#flatMap
if true {
  val arr = [1, 2, 3, 4]

  /// Expect: [1, 2, 2, 3, 3, 3, 4, 4, 4, 4]
  val v1 = arr.flatMap(i  => Array.fill(i, i))
  println(v1)
}

// Array#filter
func isEven(i: Int): Bool = i % 2 == 0
if true {
  val arr = [1, 2, 3, 4]

  /// Expect: [2, 4]
  println(arr.filter(isEven))
  /// Expect: [2, 4]
  val v = arr.filter(x => x % 2 == 0)
  println(v)
}

// Array#reduce
func doSum(acc: Int, i: Int): Int = acc + i
if true {
  val arr = [1, 2, 3, 4]

  /// Expect: 10
  println(arr.reduce(0, doSum))
  /// Expect: 10
  println(arr.reduce(0, (acc, i) => acc + i))
}

// Array#forEach
func printItem(item: Int) = println(item)
if true {
  val arr = [1, 2, 3, 4]

  /// Expect: 1
  /// Expect: 2
  /// Expect: 3
  /// Expect: 4
  arr.forEach(printItem)
  /// Expect: 1
  /// Expect: 2
  /// Expect: 3
  /// Expect: 4
  arr.forEach(i => println(i))
}

// Array#join
if true {
  val arr = [123, 456, 789]
  /// Expect: 123|456|789
  println(arr.join("|"))
  /// Expect: 123456789
  println(arr.join())

  /// Expect: 1
  println([1].join(", "))
}

// Array#contains
if true {
  val intArr = [123, 456, 789]
  /// Expect: true
  println(intArr.contains(123))
  /// Expect: false
  println(intArr.contains(10))

  val empty: Int[] = []
  /// Expect: false
  println(empty.contains(123))

  val strArr = ["hello", "world"]
  /// Expect: true
  println(strArr.contains("hello"))
  /// Expect: false
  println(strArr.contains("HELLO"))
}

// Array#find
if true {
  val intArr = [123, 456, 789]
  /// Expect: Option.Some(value: 123)
  val v1 = intArr.find(i => i == 123)
  println(v1)
  /// Expect: Option.None
  val v2 = intArr.find(i => i == 10)
  println(v2)

  val empty: Int[] = []
  /// Expect: Option.None
  println(empty.find(i => i == 123))

  val strArr = ["hello", "world"]
  /// Expect: Option.Some(value: "hello")
  val v3 = strArr.find(s => s == "hello")
  println(v3)
  /// Expect: Option.None
  val v4 = strArr.find(s => s == "HELLO")
  println(v4)
}

// Array#findIndex
if true {
  val intArr = [123, 456, 789]
  /// Expect: Option.Some(value: (123, 0))
  val v1 = intArr.findIndex(i => i == 123)
  println(v1)
  /// Expect: Option.None
  val v2 = intArr.findIndex(i => i == 10)
  println(v2)

  val empty: Int[] = []
  /// Expect: Option.None
  println(empty.findIndex(i => i == 123))

  val strArr = ["hello", "world"]
  /// Expect: Option.Some(value: ("hello", 0))
  val v3 = strArr.findIndex(s => s == "hello")
  println(v3)
  /// Expect: Option.None
  val v4 = strArr.findIndex(s => s == "HELLO")
  println(v4)
}

// Array#any
if true {
  val intArr = [123, 456, 789]
  /// Expect: true
  val v1 = intArr.any(i => i == 123)
  println(v1)
  /// Expect: false
  val v2 = intArr.any(i => i == 10)
  println(v2)

  val empty: Int[] = []
  /// Expect: false
  println(empty.any(i => i == 123))

  val strArr = ["hello", "world"]
  /// Expect: true
  val v3 = strArr.any(s => s == "hello")
  println(v3)
  /// Expect: false
  val v4 = strArr.any(s => s == "HELLO")
  println(v4)
}

// Array#all
if true {
  val intArr = [123, 456, 789]
  /// Expect: true
  val v1 = intArr.all(i => i > 0)
  println(v1)
  /// Expect: false
  val v2 = intArr.all(i => i == 10)
  println(v2)

  val empty: Int[] = []
  /// Expect: true
  val v3 = empty.all(i => i == 123)
  println(v3)

  val strArr = ["hello", "world"]
  /// Expect: true
  val v4 = strArr.all(s => s.length > 0)
  println(v4)
  /// Expect: false
  val v5 = strArr.all(s => s == "HELLO")
  println(v5)
}

// Array#sortBy
if true {
  val strings = ["abc", "d", "efgh", "ij", "k", "lm", "nopqr", "stu", "v", "wxyz"]
  val sorted = strings.sortBy(s => s.length)
  /// Expect: [abc, d, efgh, ij, k, lm, nopqr, stu, v, wxyz]
  println(strings) // original should be unmodified
  /// Expect: [d, k, v, ij, lm, stu, abc, efgh, wxyz, nopqr]
  println(sorted)

  val arrays = [[1, 2], [], [3, 4, 5], [6], [7, 8, 9, 10]]
  val sortedRev = arrays.sortBy(fn: a => a.length, reverse: true)
  /// Expect: [[1, 2], [], [3, 4, 5], [6], [7, 8, 9, 10]]
  println(arrays) // original should be unmodified
  /// Expect: [[7, 8, 9, 10], [3, 4, 5], [1, 2], [6], []]
  println(sortedRev)
}

// Array#keyBy
if true {
  val empty: String[] = []
  /// Expect: {}
  println(empty.keyBy(s => s.length))

  val strArr = "The quick brown fox jumped over the lazy dog".split(" ")
  /// Expect: { 3: dog, 4: lazy, 5: brown, 6: jumped }
  val keyed = strArr.keyBy(s => s.length)
  println(keyed)
}

// Array#indexBy
if true {
  val empty: String[] = []
  /// Expect: {}
  val m1 = empty.indexBy(s => s.length)
  println(m1)

  val strArr = "The quick brown fox jumped over the lazy dog".split(" ")
  /// Expect: { 3: [The, fox, the, dog], 4: [over, lazy], 5: [quick, brown], 6: [jumped] }
  val m2 = strArr.indexBy(s => s.length)
  println(m2)
}

// Array#asSet
if true {
  val empty: String[] = []
  val emptySet: Set<String> = #{}
  /// Expect: true
  println((empty.asSet() == emptySet))

  val arr = [1, 2, 3, 4, 3, 2, 1]
  /// Expect: true
  println((arr.asSet() == #{1, 2, 3, 4}))
}
