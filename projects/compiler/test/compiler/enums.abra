enum Color {
  Red
  Green
  Blue
  RGB(r: Int, g: Int, b: Int)
  RGB2(r: Int = 0, g: Int = 0, b: Int = 0)

  func hex(self): String {
    if self == Color.Red {
      "0xFF0000"
    } else if self == Color.Green {
      "0x00FF00"
    } else if self == Color.Blue {
      "0x0000FF"
    } else {
      "todo"
    }
  }
}

val r = Color.Red
val g = Color.Green
val b = Color.Blue
val gray = Color.RGB(r: 0xaa, g: 0xaa, b: 0xaa)

// Testing enum variants with default values
val black = Color.RGB2()
val white = Color.RGB2(r: 255, g: 255, b: 255)
val red = Color.RGB2(r: 255)
val green = Color.RGB2(g: 255)
val blue = Color.RGB2(b: 255)
val pink = Color.RGB2(r: 255, b: 255)
val cyan = Color.RGB2(g: 255, b: 255)
val yellow = Color.RGB2(r: 255, g: 255)

/// Expect: Color.RGB2(r: 0, g: 0, b: 0)
stdoutWriteln(black.toString())
/// Expect: Color.RGB2(r: 255, g: 255, b: 255)
stdoutWriteln(white.toString())
/// Expect: Color.RGB2(r: 255, g: 0, b: 0)
stdoutWriteln(red.toString())
/// Expect: Color.RGB2(r: 0, g: 255, b: 0)
stdoutWriteln(green.toString())
/// Expect: Color.RGB2(r: 0, g: 0, b: 255)
stdoutWriteln(blue.toString())
/// Expect: Color.RGB2(r: 255, g: 0, b: 255)
stdoutWriteln(pink.toString())
/// Expect: Color.RGB2(r: 0, g: 255, b: 255)
stdoutWriteln(cyan.toString())
/// Expect: Color.RGB2(r: 255, g: 255, b: 0)
stdoutWriteln(yellow.toString())

// Test default toString method
/// Expect: Color.Red
stdoutWriteln(r.toString())
/// Expect: Color.Red
stdoutWriteln(Color.Red.toString())
/// Expect: Color.Green
stdoutWriteln(g.toString())
/// Expect: Color.Green
stdoutWriteln(Color.Green.toString())
/// Expect: Color.Blue
stdoutWriteln(b.toString())
/// Expect: Color.Blue
stdoutWriteln(Color.Blue.toString())
/// Expect: Color.RGB(r: 170, g: 170, b: 170)
stdoutWriteln(gray.toString())
/// Expect: Color.RGB(r: 170, g: 170, b: 170)
stdoutWriteln(Color.RGB(r: 0xaa, g: 0xaa, b: 0xaa).toString())

func printlnBool(b: Bool) = stdoutWriteln(b.toString())

// Test default hash method
/// Expect: true
printlnBool(r.hash() == Color.Red.hash())
/// Expect: true
printlnBool(g.hash() == Color.Green.hash())
/// Expect: true
printlnBool(b.hash() == Color.Blue.hash())
/// Expect: true
printlnBool(gray.hash() == Color.RGB(r: 0xaa, g: 0xaa, b: 0xaa).hash())
/// Expect: false
printlnBool(r.hash() == Color.Blue.hash())
/// Expect: false
printlnBool(r.hash() == Color.Green.hash())
/// Expect: false
printlnBool(gray.hash() == Color.Red.hash())

// Test default eq method
/// Expect: true
printlnBool(r == Color.Red)
/// Expect: false
printlnBool(r == Color.Green)
/// Expect: false
printlnBool(r == Color.Blue)
/// Expect: true
printlnBool(gray == Color.RGB(r: 0xaa, g: 0xaa, b: 0xaa))
/// Expect: false
printlnBool(gray == Color.RGB(r: 0x33, g: 0x33, b: 0x33))
/// Expect: false
printlnBool(gray == Color.Green)

// Test calling method
/// Expect: 0xFF0000 0xFF0000
stdoutWriteln("${Color.Red.hex()} ${r.hex()}")
/// Expect: 0x00FF00 0x00FF00
stdoutWriteln("${Color.Green.hex()} ${g.hex()}")
/// Expect: 0x0000FF 0x0000FF
stdoutWriteln("${Color.Blue.hex()} ${b.hex()}")
/// Expect: todo todo
stdoutWriteln("${Color.RGB(r: 0xaa, g: 0xaa, b: 0xaa).hex()} ${gray.hex()}")

enum Color2 {
  Red
  Green
  Blue

  func toString(self): String = "custom Color2#toString implementation"
  func hash(self): Int = 17
  func eq(self, other: Color2): Bool {
    stdoutWriteln("[Color2#eq] here")
    false
  }
}

// Test custom toString method
/// Expect: custom Color2#toString implementation
stdoutWriteln(Color2.Red.toString())

// Test custom hash method
/// Expect: 17
stdoutWriteln(Color2.Green.hash().toString())

// Test custom eq method
/// Expect: [Color2#eq] here
/// Expect: false
printlnBool(Color2.Blue == Color2.Blue)

// Test generic enum

enum List<T> {
  Cons(value: T, next: List<T>)
  Nil

  // Silly static method
  func lengthOf<T>(list: List<T>): Int {
    list.length()
  }

  func length(self): Int {
    var length = 0
    var node = self
    while true {
      match node {
        List.Cons(_, next) => {
          length += 1
          node = next
        }
        List.Nil => break
      }
    }

    length
  }
}

val list = List.Cons(value: "a", next: List.Cons(value: "b", next: List.Cons(value: "c", next: List.Nil)))
/// Expect: 3
stdoutWriteln(list.length().toString())
/// Expect: 3
stdoutWriteln(List.lengthOf(list).toString())
