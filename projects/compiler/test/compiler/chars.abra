func printlnBool(b: Bool) = stdoutWriteln(b.toString())

val a = 'a'
val b = 'b'

/// Expect: a b
stdoutWriteln("$a $b")

/// Expect: false
printlnBool(a == b)
/// Expect: true
printlnBool(a == 'a')
/// Expect: false
printlnBool(b != b)
/// Expect: true
printlnBool(b != 'a')

// Test escape sequences in char literals
/// Expect: true
printlnBool('\\' == '\u005C')

val m = { 'a': 1, 'b': 2 }
/// Expect: { a: 1, b: 2 }
stdoutWriteln(m.toString())
/// Expect: Option.None
stdoutWriteln(m['c'].toString())
/// Expect: Option.Some(value: 1)
stdoutWriteln(m['a'].toString())

// Test UTF-8 encoding/decoding
val chars = "aÂ£ï¿«ðŸ˜€".chars()
/// Expect: a 97 [0b1100001]
/// Expect: Â£ 163 [0b11000010, 0b10100011]
/// Expect: ï¿« 65515 [0b11101111, 0b10111111, 0b10101011]
/// Expect: ðŸ˜€ 128512 [0b11110000, 0b10011111, 0b10011000, 0b10000000]
for ch in chars {
  stdoutWriteln("$ch ${ch.asInt()} ${ch.bytes().map(b => b.binary())}")
}

val ch = Char.fromInt(0xD800)
/// Expect: ï¿½
stdoutWriteln(ch.toString())
