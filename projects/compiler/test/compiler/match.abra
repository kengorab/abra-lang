func printlnInt(i: Int) = stdoutWriteln(i.toString())

// Basic test (catch-all case)
(() => {
  /// Expect: here
  match "abc" {
    _ => stdoutWriteln("here")
  }

  // v2 syntax
  /// Expect: here
  match "abc" {
    else => stdoutWriteln("here")
  }
})()

// Testing constant cases
(() => {
  /// Expect: case 1: 1
  /// Expect: case 2: 2
  /// Expect: case 3: 34
  /// Expect: case 3: 567
  for i in [1, 2, 34, 567] {
    match i {
      1 v => stdoutWriteln("case 1: $v")
      2 v => stdoutWriteln("case 2: $v")
      _ v => stdoutWriteln("case 3: $v")
    }
  }

  /// Expect: case 1: 1.1
  /// Expect: case 2: 2.2
  /// Expect: case 3: 3.4
  /// Expect: case 3: 5.67
  for f in [1.1, 2.2, 3.4, 5.67] {
    match f {
      1.1 v => stdoutWriteln("case 1: $v")
      2.2 v => stdoutWriteln("case 2: $v")
      _ v => stdoutWriteln("case 3: $v")
    }
  }

  /// Expect: case 1: true
  /// Expect: case 2: false
  for b in [true, false] {
    match b {
      true v => stdoutWriteln("case 1: $v")
      false v => stdoutWriteln("case 2: $v")
    }
  }

  /// Expect: case 4: hello
  /// Expect: case 3: hi
  /// Expect: case 5: bonjour
  for s in ["hello", "hi", "bonjour"] {
    match s {
      "howdy" v => stdoutWriteln("case 1: $v")
      "hola" v => stdoutWriteln("case 2: $v")
      "hi" v => stdoutWriteln("case 3: $v")
      "hello" v => stdoutWriteln("case 4: $v")
      _ v => stdoutWriteln("case 5: $v")
    }
  }

  // TODO: remove this, lambda is unhappy to have a for-loop be the last statement for some reason
  /// Expect: done
  stdoutWriteln("done")
})()

// Testing option type
(() => {
  val arr = [1, 2, 3, 4]

  /// Expect: found a number
  match arr[1] {
    None => stdoutWriteln("nothing here")
    else => stdoutWriteln("found a number")
  }
  /// Expect: nothing here
  match arr[14] {
    None => stdoutWriteln("nothing here")
    else => stdoutWriteln("found a number")
  }

  // With case binding

  /// Expect: found a number: 2
  match arr[1] {
    None v => stdoutWriteln("nothing here: $v")
    else v => stdoutWriteln("found a number: $v")
  }
  /// Expect: nothing here: Option.None
  match arr[14] {
    None v => stdoutWriteln("nothing here: $v")
    else v => stdoutWriteln("found a number: $v")
  }

  // With case binding and _no_ `None` case

  /// Expect: value: Option.Some(value: 2)
  match arr[1] {
    else v => stdoutWriteln("value: $v")
  }
  /// Expect: value: Option.None
  match arr[14] {
    else v => stdoutWriteln("value: $v")
  }

  // With constant cases

  /// Expect: 18
  match arr[1] {
    2 v => printlnInt(16 + v)
    1 => printlnInt(15)
    None => printlnInt(-4)
    else => printlnInt(100)
  }
  /// Expect: 18
  match arr[1] {
    None => printlnInt(-4)
    2 v => printlnInt(16 + v)
    1 => printlnInt(15)
    else => printlnInt(100)
  }
  /// Expect: 18
  match arr[1] {
    2 v => printlnInt(16 + v)
    1 => printlnInt(15)
    else => printlnInt(100)
  }
  /// Expect: -4
  match arr[5] {
    2 v => printlnInt(16 + v)
    1 => printlnInt(15)
    None => printlnInt(-4)
    else => printlnInt(100)
  }
  /// Expect: -4
  match arr[5] {
    None => printlnInt(-4)
    2 v => printlnInt(16 + v)
    1 => printlnInt(15)
    else => printlnInt(100)
  }
  /// Expect: 100 Option.None
  match arr[5] {
    2 v => printlnInt(16 + v)
    1 => printlnInt(15)
    else v => stdoutWriteln("${100} $v")
  }
  /// Expect: 100 Option.Some(value: 4)
  match arr[3] {
    2 v => printlnInt(16 + v)
    1 => printlnInt(15)
    else v => stdoutWriteln("${100} $v")
  }

//   // With type cases

//   /// Expect: 2000
//   match arr[1] {
//     None => stdoutWriteln(-4)
//     Int v => stdoutWriteln(v * 1000)
//     2 v => stdoutWriteln(16 + v)
//     1 => stdoutWriteln(15)
//     _ => stdoutWriteln(100)
//   }
//   /// Expect: 18
//   match arr[1] {
//     None => stdoutWriteln(-4)
//     2 v => stdoutWriteln(16 + v)
//     Int v => stdoutWriteln(v * 1000)
//     1 => stdoutWriteln(15)
//     _ => stdoutWriteln(100)
//   }
})()

// With enums

enum Color {
  Red
  Blue
  Green
  RGB(r: Int, g: Int, b: Int)
}

(() => {
  val colors = [Color.Red, Color.Blue, Color.Green, Color.RGB(r: 1, g: 2, b: 3)]
  /// Expect: red
  /// Expect: blue
  /// Expect: green
  /// Expect: rgb(1, 2, 3)
  for color in colors {
    match color {
      Color.Red => stdoutWriteln("red")
      Color.Blue => stdoutWriteln("blue")
      Color.Green => stdoutWriteln("green")
      Color.RGB(r, g, b) => stdoutWriteln("rgb($r, $g, $b)")
    }
  }

  /// Expect: blue
  match colors[1] {
    None => stdoutWriteln("none")
    Color.Red => stdoutWriteln("red")
    Color.Blue => stdoutWriteln("blue")
    Color.Green => stdoutWriteln("green")
    Color.RGB(r, g, b) => stdoutWriteln("rgb($r, $g, $b)")
  }
  /// Expect: blue
  match colors[1] {
    Color.Red => stdoutWriteln("red")
    Color.Blue => stdoutWriteln("blue")
    Color.Green => stdoutWriteln("green")
    Color.RGB(r, g, b) => stdoutWriteln("rgb($r, $g, $b)")
    None => stdoutWriteln("none")
  }

  /// Expect: none
  match colors[5] {
    None => stdoutWriteln("none")
    Color.Red => stdoutWriteln("red")
    Color.Blue => stdoutWriteln("blue")
    Color.Green => stdoutWriteln("green")
    Color.RGB(r, g, b) => stdoutWriteln("rgb($r, $g, $b)")
  }
  /// Expect: none
  match colors[5] {
    Color.Red => stdoutWriteln("red")
    Color.Blue => stdoutWriteln("blue")
    Color.Green => stdoutWriteln("green")
    Color.RGB(r, g, b) => stdoutWriteln("rgb($r, $g, $b)")
    None => stdoutWriteln("none")
  }

//   // Updating values of enum variant

//   val c = Color.RGB(r: 1, g: 2, b: 3)
//   match c {
//     Color.RGB(r, g, b) c => {
//       c.b = 100
//     }
//     _ => {}
//   }
//   /// Expect: Color.RGB(r: 1, g: 2, b: 100)
//   stdoutWriteln(c)
})()

// Testing match as expression
(() => {
  val arr = [1, 2, 3, 4]
  val x = match arr[1] {
    None => -1
    _ v => v * 100
  }
  /// Expect: 200
  printlnInt(x)

  val y = match arr[14] {
    None => -1
    _ v => v * 100
  }
  /// Expect: -1
  printlnInt(y)
})()

// Testing terminator in block

func matchExprCaseHasReturn(input: Int?): Int {
  val x = match input {
    None => return -1
    _ v => v * 100
  }
  x + 1
}
/// Expect: -1
printlnInt(matchExprCaseHasReturn(None))
/// Expect: 401
printlnInt(matchExprCaseHasReturn(Option.Some(value: 4)))

func matchStmtCaseHasReturn(input: Int?): Int {
  match input {
    None => return -1
    else v => printlnInt(v * 100)
  }

  1
}
/// Expect: -1
printlnInt(matchStmtCaseHasReturn(None))
/// Expect: 400
/// Expect: 1
printlnInt(matchStmtCaseHasReturn(Option.Some(value: 4)))
