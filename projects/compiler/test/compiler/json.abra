import JsonParser from "json"

// Testing basic values
(() => {
  /// Expect: Result.Ok(value: JsonValue.Number(value: Either.Left(left: 1)))
  stdoutWriteln(JsonParser.parseString("1").toString())
  /// Expect: Result.Ok(value: JsonValue.Number(value: Either.Right(right: 2.5)))
  stdoutWriteln(JsonParser.parseString("2.5").toString())
  /// Expect: Result.Ok(value: JsonValue.String(value: "hello"))
  stdoutWriteln(JsonParser.parseString("\"hello\"").toString())
  /// Expect: Result.Ok(value: JsonValue.Boolean(value: true))
  stdoutWriteln(JsonParser.parseString("true").toString())
  /// Expect: Result.Ok(value: JsonValue.Boolean(value: false))
  stdoutWriteln(JsonParser.parseString("false").toString())
  /// Expect: Result.Ok(value: JsonValue.Null)
  stdoutWriteln(JsonParser.parseString("null").toString())
})()

// Testing numbers
(() => {
  /// Expect: Result.Ok(value: JsonValue.Number(value: Either.Left(left: -2)))
  stdoutWriteln(JsonParser.parseString("-2").toString())
  /// Expect: Result.Ok(value: JsonValue.Number(value: Either.Right(right: -2.05)))
  stdoutWriteln(JsonParser.parseString("-2.05").toString())

  /// Expect: Result.Ok(value: JsonValue.Number(value: Either.Right(right: 20000)))
  stdoutWriteln(JsonParser.parseString("2e04").toString())
  /// Expect: Result.Ok(value: JsonValue.Number(value: Either.Right(right: 20000)))
  stdoutWriteln(JsonParser.parseString("2e+04").toString())
  /// Expect: Result.Ok(value: JsonValue.Number(value: Either.Right(right: -20000)))
  stdoutWriteln(JsonParser.parseString("-2e04").toString())
  /// Expect: Result.Ok(value: JsonValue.Number(value: Either.Right(right: 0.0002)))
  stdoutWriteln(JsonParser.parseString("2e-04").toString())
  /// Expect: Result.Ok(value: JsonValue.Number(value: Either.Right(right: -0.0002)))
  stdoutWriteln(JsonParser.parseString("-2e-04").toString())

  /// Expect: Result.Ok(value: JsonValue.Number(value: Either.Right(right: 2000)))
  stdoutWriteln(JsonParser.parseString("0.2e04").toString())
  /// Expect: Result.Ok(value: JsonValue.Number(value: Either.Right(right: 2000)))
  stdoutWriteln(JsonParser.parseString("0.2e+04").toString())
  /// Expect: Result.Ok(value: JsonValue.Number(value: Either.Right(right: -2000)))
  stdoutWriteln(JsonParser.parseString("-0.2e04").toString())
  /// Expect: Result.Ok(value: JsonValue.Number(value: Either.Right(right: 0.0002)))
  stdoutWriteln(JsonParser.parseString("0.2e-03").toString())
  /// Expect: Result.Ok(value: JsonValue.Number(value: Either.Right(right: -0.0002)))
  stdoutWriteln(JsonParser.parseString("-0.2e-03").toString())
})()

// Testing strings
(() => {
  // escape sequences
  /// Expect: Result.Ok(value: "JsonValue.String(value: "" \ \n \r \t /")")
  stdoutWriteln(
    JsonParser.parseString("\"\\\" \\\\ \\n \\r \\t \\/\"")
      .map(v => v.toString().replaceAll("\n", "\\n").replaceAll("\r", "\\r").replaceAll("\t", "\\t"))
      .toString()
  )

  // unicode escape sequence
  /// Expect: Result.Ok(value: JsonValue.String(value: "PH"))
  stdoutWriteln(JsonParser.parseString("\"\\u0050\\u0048\"").toString())

  // TODO: Uncomment when Strings support `bytelength`
  // // unicode characters
  // /// Expect: Result.Ok(value: JsonValue.String(value: "日"))
  // stdoutWriteln(JsonParser.parseString("\"日\""))
})()

// Testing array values
(() => {
  /// Expect: Result.Ok(value: JsonValue.Array(items: []))
  stdoutWriteln(JsonParser.parseString("[]").toString())
  /// Expect: Result.Ok(value: JsonValue.Array(items: [JsonValue.Number(value: Either.Left(left: 1))]))
  stdoutWriteln(JsonParser.parseString("[1]").toString())
  /// Expect: Result.Ok(value: JsonValue.Array(items: [JsonValue.Number(value: Either.Left(left: 1)), JsonValue.Number(value: Either.Left(left: 2)), JsonValue.Number(value: Either.Left(left: 3))]))
  stdoutWriteln(JsonParser.parseString("[1, 2, 3]").toString())
  /// Expect: Result.Ok(value: JsonValue.Array(items: [JsonValue.Number(value: Either.Right(right: 1.5))]))
  stdoutWriteln(JsonParser.parseString("[1.5]").toString())
  /// Expect: Result.Ok(value: JsonValue.Array(items: [JsonValue.Null]))
  stdoutWriteln(JsonParser.parseString("[null]").toString())
  /// Expect: Result.Ok(value: JsonValue.Array(items: [JsonValue.Boolean(value: true)]))
  stdoutWriteln(JsonParser.parseString("[true]").toString())
  /// Expect: Result.Ok(value: JsonValue.Array(items: [JsonValue.Boolean(value: false)]))
  stdoutWriteln(JsonParser.parseString("[false]").toString())
  /// Expect: Result.Ok(value: JsonValue.Array(items: [JsonValue.String(value: "hello")]))
  stdoutWriteln(JsonParser.parseString("[\"hello\"]").toString())
  /// Expect: Result.Ok(value: JsonValue.Array(items: [JsonValue.Number(value: Either.Left(left: 0))]))
  stdoutWriteln(JsonParser.parseString("[0]").toString())
  /// Expect: Result.Ok(value: JsonValue.Array(items: [JsonValue.Number(value: Either.Left(left: 0))]))
  stdoutWriteln(JsonParser.parseString("[ 0 ]").toString())
  /// Expect: Result.Ok(value: JsonValue.Array(items: [JsonValue.Array(items: [JsonValue.String(value: "hello")])]))
  stdoutWriteln(JsonParser.parseString("[[\"hello\"]]").toString())
  /// Expect: Result.Ok(value: JsonValue.Array(items: [JsonValue.Object(obj: JsonObject(_map: { foo: JsonValue.Number(value: Either.Left(left: 1)) }))]))
  stdoutWriteln(JsonParser.parseString("[{\"foo\": 1}]").toString())
})()

// Testing object values
(() => {
  /// Expect: Result.Ok(value: JsonValue.Object(obj: JsonObject(_map: {})))
  stdoutWriteln(JsonParser.parseString("{}").toString())
  /// Expect: Result.Ok(value: JsonValue.Object(obj: JsonObject(_map: { foo: JsonValue.Number(value: Either.Left(left: 1)) })))
  stdoutWriteln(JsonParser.parseString("{\"foo\": 1}").toString())
  /// Expect: Result.Ok(value: JsonValue.Object(obj: JsonObject(_map: { bar: JsonValue.Array(items: [JsonValue.String(value: "baz")]), foo: JsonValue.Number(value: Either.Left(left: 1)) })))
  stdoutWriteln(JsonParser.parseString("{ \"foo\" : 1 , \"bar\": [\"baz\"]}").toString())
  /// Expect: Result.Ok(value: "JsonValue.Object(obj: JsonObject(_map: { fo\no: JsonValue.Number(value: Either.Left(left: 1)) }))")
  stdoutWriteln(JsonParser.parseString("{\"fo\\no\": 1}").map(v => v.toString().replaceAll("\n", "\\n")).toString())
})()

// Testing parsing errors
(() => {
  /// Expect: Result.Err(error: JsonParseError.UnexpectedEndOfNumber)
  stdoutWriteln(JsonParser.parseString("2.").toString())

  /// Expect: Result.Err(error: JsonParseError.InvalidCharacterInString)
  stdoutWriteln(JsonParser.parseString("\"\\u123z\"").toString())

  /// Expect: Result.Err(error: JsonParseError.InvalidCharacterInString)
  stdoutWriteln(JsonParser.parseString("\"hello\nworld\"").toString())

  /// Expect: Result.Err(error: JsonParseError.ValueExpected)
  stdoutWriteln(JsonParser.parseString("[1,]").toString())
  /// Expect: Result.Err(error: JsonParseError.EofExpected)
  stdoutWriteln(JsonParser.parseString("[0]1").toString())
  /// Expect: Result.Err(error: JsonParseError.EofExpected)
  stdoutWriteln(JsonParser.parseString("[0] 1").toString())
  /// Expect: Result.Err(error: JsonParseError.CommaExpected)
  stdoutWriteln(JsonParser.parseString("[0 true]").toString())
  /// Expect: Result.Err(error: JsonParseError.CommaOrClosingBracketExpected)
  stdoutWriteln(JsonParser.parseString("[0 ").toString())

  /// Expect: Result.Err(error: JsonParseError.ObjectPropertyExpected)
  stdoutWriteln(JsonParser.parseString("{\"foo\": 1,}").toString())
  /// Expect: Result.Err(error: JsonParseError.ObjectPropertyExpected)
  stdoutWriteln(JsonParser.parseString("{1}").toString())
  /// Expect: Result.Err(error: JsonParseError.ColonExpected)
  stdoutWriteln(JsonParser.parseString("{ \"foo\" 1 }").toString())
  /// Expect: Result.Err(error: JsonParseError.ValueExpected)
  stdoutWriteln(JsonParser.parseString("{ \"foo\": }").toString())
  /// Expect: Result.Err(error: JsonParseError.CommaExpected)
  stdoutWriteln(JsonParser.parseString("{ \"foo\":  1 \"bar\": 2}").toString())
  /// Expect: Result.Err(error: JsonParseError.CommaOrClosingBracketExpected)
  stdoutWriteln(JsonParser.parseString("{ \"foo\":  1 ").toString())
})()
