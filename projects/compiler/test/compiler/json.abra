import JsonParser from "json"

// Testing basic values
(() => {
  /// Expect: Result.Ok(value: JsonValue.Number(value: Either.Left(left: 1)))
  printlnv2(JsonParser.parseString("1"))
  /// Expect: Result.Ok(value: JsonValue.Number(value: Either.Right(right: 2.5)))
  printlnv2(JsonParser.parseString("2.5"))
  /// Expect: Result.Ok(value: JsonValue.String(value: "hello"))
  printlnv2(JsonParser.parseString("\"hello\""))
  /// Expect: Result.Ok(value: JsonValue.Boolean(value: true))
  printlnv2(JsonParser.parseString("true"))
  /// Expect: Result.Ok(value: JsonValue.Boolean(value: false))
  printlnv2(JsonParser.parseString("false"))
  /// Expect: Result.Ok(value: JsonValue.Null)
  printlnv2(JsonParser.parseString("null"))
})()

// Testing numbers
(() => {
  /// Expect: Result.Ok(value: JsonValue.Number(value: Either.Left(left: -2)))
  printlnv2(JsonParser.parseString("-2"))
  /// Expect: Result.Ok(value: JsonValue.Number(value: Either.Right(right: -2.05)))
  printlnv2(JsonParser.parseString("-2.05"))

  /// Expect: Result.Ok(value: JsonValue.Number(value: Either.Right(right: 20000)))
  printlnv2(JsonParser.parseString("2e04"))
  /// Expect: Result.Ok(value: JsonValue.Number(value: Either.Right(right: 20000)))
  printlnv2(JsonParser.parseString("2e+04"))
  /// Expect: Result.Ok(value: JsonValue.Number(value: Either.Right(right: -20000)))
  printlnv2(JsonParser.parseString("-2e04"))
  /// Expect: Result.Ok(value: JsonValue.Number(value: Either.Right(right: 0.0002)))
  printlnv2(JsonParser.parseString("2e-04"))
  /// Expect: Result.Ok(value: JsonValue.Number(value: Either.Right(right: -0.0002)))
  printlnv2(JsonParser.parseString("-2e-04"))

  /// Expect: Result.Ok(value: JsonValue.Number(value: Either.Right(right: 2000)))
  printlnv2(JsonParser.parseString("0.2e04"))
  /// Expect: Result.Ok(value: JsonValue.Number(value: Either.Right(right: 2000)))
  printlnv2(JsonParser.parseString("0.2e+04"))
  /// Expect: Result.Ok(value: JsonValue.Number(value: Either.Right(right: -2000)))
  printlnv2(JsonParser.parseString("-0.2e04"))
  /// Expect: Result.Ok(value: JsonValue.Number(value: Either.Right(right: 0.0002)))
  printlnv2(JsonParser.parseString("0.2e-03"))
  /// Expect: Result.Ok(value: JsonValue.Number(value: Either.Right(right: -0.0002)))
  printlnv2(JsonParser.parseString("-0.2e-03"))
})()

// Testing strings
(() => {
  // escape sequences
  /// Expect: Result.Ok(value: "JsonValue.String(value: "" \ \n \r \t /")")
  printlnv2(
    JsonParser.parseString("\"\\\" \\\\ \\n \\r \\t \\/\"")
      .map(v => v.toString().replaceAll("\n", "\\n").replaceAll("\r", "\\r").replaceAll("\t", "\\t"))
  )

  // unicode escape sequence
  /// Expect: Result.Ok(value: JsonValue.String(value: "PH"))
  printlnv2(JsonParser.parseString("\"\\u0050\\u0048\""))

  // TODO: Uncomment when Strings support `bytelength`
  // // unicode characters
  // /// Expect: Result.Ok(value: JsonValue.String(value: "日"))
  // printlnv2(JsonParser.parseString("\"日\""))
})()

// Testing array values
(() => {
  /// Expect: Result.Ok(value: JsonValue.Array(items: []))
  printlnv2(JsonParser.parseString("[]"))
  /// Expect: Result.Ok(value: JsonValue.Array(items: [JsonValue.Number(value: Either.Left(left: 1))]))
  printlnv2(JsonParser.parseString("[1]"))
  /// Expect: Result.Ok(value: JsonValue.Array(items: [JsonValue.Number(value: Either.Left(left: 1)), JsonValue.Number(value: Either.Left(left: 2)), JsonValue.Number(value: Either.Left(left: 3))]))
  printlnv2(JsonParser.parseString("[1, 2, 3]"))
  /// Expect: Result.Ok(value: JsonValue.Array(items: [JsonValue.Number(value: Either.Right(right: 1.5))]))
  printlnv2(JsonParser.parseString("[1.5]"))
  /// Expect: Result.Ok(value: JsonValue.Array(items: [JsonValue.Null]))
  printlnv2(JsonParser.parseString("[null]"))
  /// Expect: Result.Ok(value: JsonValue.Array(items: [JsonValue.Boolean(value: true)]))
  printlnv2(JsonParser.parseString("[true]"))
  /// Expect: Result.Ok(value: JsonValue.Array(items: [JsonValue.Boolean(value: false)]))
  printlnv2(JsonParser.parseString("[false]"))
  /// Expect: Result.Ok(value: JsonValue.Array(items: [JsonValue.String(value: "hello")]))
  printlnv2(JsonParser.parseString("[\"hello\"]"))
  /// Expect: Result.Ok(value: JsonValue.Array(items: [JsonValue.Number(value: Either.Left(left: 0))]))
  printlnv2(JsonParser.parseString("[0]"))
  /// Expect: Result.Ok(value: JsonValue.Array(items: [JsonValue.Number(value: Either.Left(left: 0))]))
  printlnv2(JsonParser.parseString("[ 0 ]"))
  /// Expect: Result.Ok(value: JsonValue.Array(items: [JsonValue.Array(items: [JsonValue.String(value: "hello")])]))
  printlnv2(JsonParser.parseString("[[\"hello\"]]"))
  /// Expect: Result.Ok(value: JsonValue.Array(items: [JsonValue.Object(obj: JsonObject(_map: { foo: JsonValue.Number(value: Either.Left(left: 1)) }))]))
  printlnv2(JsonParser.parseString("[{\"foo\": 1}]"))
})()

// Testing object values
(() => {
  /// Expect: Result.Ok(value: JsonValue.Object(obj: JsonObject(_map: {})))
  printlnv2(JsonParser.parseString("{}"))
  /// Expect: Result.Ok(value: JsonValue.Object(obj: JsonObject(_map: { foo: JsonValue.Number(value: Either.Left(left: 1)) })))
  printlnv2(JsonParser.parseString("{\"foo\": 1}"))
  /// Expect: Result.Ok(value: JsonValue.Object(obj: JsonObject(_map: { bar: JsonValue.Array(items: [JsonValue.String(value: "baz")]), foo: JsonValue.Number(value: Either.Left(left: 1)) })))
  printlnv2(JsonParser.parseString("{ \"foo\" : 1 , \"bar\": [\"baz\"]}"))
  /// Expect: Result.Ok(value: "JsonValue.Object(obj: JsonObject(_map: { fo\no: JsonValue.Number(value: Either.Left(left: 1)) }))")
  printlnv2(JsonParser.parseString("{\"fo\\no\": 1}").map(v => v.toString().replaceAll("\n", "\\n")))
})()

// Testing parsing errors
(() => {
  /// Expect: Result.Err(error: JsonParseError.UnexpectedEndOfNumber)
  printlnv2(JsonParser.parseString("2."))

  /// Expect: Result.Err(error: JsonParseError.InvalidCharacterInString)
  printlnv2(JsonParser.parseString("\"\\u123z\""))

  /// Expect: Result.Err(error: JsonParseError.InvalidCharacterInString)
  printlnv2(JsonParser.parseString("\"hello\nworld\""))

  /// Expect: Result.Err(error: JsonParseError.ValueExpected)
  printlnv2(JsonParser.parseString("[1,]"))
  /// Expect: Result.Err(error: JsonParseError.EofExpected)
  printlnv2(JsonParser.parseString("[0]1"))
  /// Expect: Result.Err(error: JsonParseError.EofExpected)
  printlnv2(JsonParser.parseString("[0] 1"))
  /// Expect: Result.Err(error: JsonParseError.CommaExpected)
  printlnv2(JsonParser.parseString("[0 true]"))
  /// Expect: Result.Err(error: JsonParseError.CommaOrClosingBracketExpected)
  printlnv2(JsonParser.parseString("[0 "))

  /// Expect: Result.Err(error: JsonParseError.ObjectPropertyExpected)
  printlnv2(JsonParser.parseString("{\"foo\": 1,}"))
  /// Expect: Result.Err(error: JsonParseError.ObjectPropertyExpected)
  printlnv2(JsonParser.parseString("{1}"))
  /// Expect: Result.Err(error: JsonParseError.ColonExpected)
  printlnv2(JsonParser.parseString("{ \"foo\" 1 }"))
  /// Expect: Result.Err(error: JsonParseError.ValueExpected)
  printlnv2(JsonParser.parseString("{ \"foo\": }"))
  /// Expect: Result.Err(error: JsonParseError.CommaExpected)
  printlnv2(JsonParser.parseString("{ \"foo\":  1 \"bar\": 2}"))
  /// Expect: Result.Err(error: JsonParseError.CommaOrClosingBracketExpected)
  printlnv2(JsonParser.parseString("{ \"foo\":  1 "))
})()
