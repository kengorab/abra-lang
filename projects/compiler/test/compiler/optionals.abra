func f1(): Bool?[] = [None, Some(true), Some(false)]
/// Expect: [Option.None, Option.Some(value: true), Option.Some(value: false)]
printlnv2(f1())

func f2(): String?[] = if true { [Some("one"), None, Some("two")] } else []
/// Expect: [Option.Some(value: "one"), Option.None, Option.Some(value: "two")]
printlnv2(f2())

val arr1: Int?[] = [Some(1), None, Some(2), Some(3)]
/// Expect: [Option.Some(value: 1), Option.None, Option.Some(value: 2), Option.Some(value: 3)]
printlnv2(arr1)

val arr2: Int[]? = Some([1, 2, 3])
/// Expect: Option.Some(value: [1, 2, 3])
printlnv2(arr2)
val arr3: Int[]? = None
/// Expect: Option.None
printlnv2(arr3)

type Foo {
  f: String
}

// Workaround because optionals technically don't have _any_ directly-callable methods
func hash<T>(t: T): Int = t.hash()
// Hashes
(() => {
  val i: Int? = None
  /// Expect: 1
  printlnv2(hash(i))

  val x = Some(17)
  /// Expect: false
  printlnv2(hash(x) == (17).hash())
})()

// == operator
(() => {
  // Test with primitive
  val i1: Int? = None
  val i2 = Some(17)
  val i3 = Some(17)
  val i4 = Some(16)

  /// Expect: false
  printlnv2(i1 == i2)
  /// Expect: false
  printlnv2(i2 == i4)
  /// Expect: true
  printlnv2(i2 == i3)

  // Test with object
  val s1: String? = None
  val s2 = Some("str")
  val s3 = Some("str")
  val s4 = Some("hmm")

  /// Expect: false
  printlnv2(s1 == s2)
  /// Expect: false
  printlnv2(s2 == s4)
  /// Expect: true
  printlnv2(s2 == s3)
})()

// Coalescing (?:)
(() => {
  val i1: Int? = None
  /// Expect: 17
  printlnv2(i1 ?: 17)

  val i2 = Some(value: 9)
  /// Expect: 9
  printlnv2(i2 ?: 17)
})()

val xyz = "abc"
type TestOptChainingMethodInvocation {
  func unitMethod(self) = printlnv2("TestOptChainingMethodInvocation#unitMethod")
  func closure(self): Int = xyz.length
}

// Optional-chaining accessor
(() => {
  val arr = ["a", "b", "c", "d"]

//   // Getting field of known-non-None value
//   /// Expect: 4
//   printlnv2(arr?.length)
//   // Calling method of known-non-None value
//   /// Expect: [a, b, c, d]
//   printlnv2(arr?.toString())

  // Getting field of Option value
  /// Expect: Option.Some(value: 1)
  printlnv2(arr[0]?.length)
  /// Expect: Option.None
  printlnv2(arr[6]?.length)

  // Calling method of Option value
  /// Expect: Option.Some(value: false)
  printlnv2(arr[0]?.isEmpty())
  /// Expect: Option.None
  printlnv2(arr[6]?.isEmpty())

  // nested opt-safe accessors
  val foo = Foo(f: "abc")
  val fooArr = [foo]

  /// Expect: Option.Some(value: 3)
  printlnv2(fooArr[0]?.f?.length)
  /// Expect: Option.Some(value: 3)
  printlnv2(fooArr[0]?.f?.length?.abs())

  // Calling unit method of Option value
  val t1: TestOptChainingMethodInvocation? = None
  t1?.unitMethod()
  val t2 = Some(TestOptChainingMethodInvocation())
  /// Expect: TestOptChainingMethodInvocation#unitMethod
  t2?.unitMethod()

  // Calling closure method of Option value
  val t3: TestOptChainingMethodInvocation? = None
  /// Expect: Option.None
  printlnv2(t3?.closure())
  val t4 = Some(TestOptChainingMethodInvocation())
  /// Expect: Option.Some(value: 3)
  printlnv2(t4?.closure())
})()

// Negate operator
val someInt = Some(123)
val noneInt: Int? = None

/// Expect: true
printlnv2(!noneInt)
/// Expect: false
printlnv2(!someInt)

/// Expect: false
printlnv2(!!noneInt)
/// Expect: true
printlnv2(!!someInt)

// Optional enum instances

enum Color {
  Red
  Green
  Blue
}
(() => {
  val colors = [Color.Red, Color.Green, Color.Blue]
  /// Expect: Option.None
  printlnv2(colors[3]?.toString())
  /// Expect: Option.Some(value: "Color.Blue")
  printlnv2(colors[2]?.toString())
})()
