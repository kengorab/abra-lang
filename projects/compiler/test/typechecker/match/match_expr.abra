val wildcard = match 123 {
  _ => "abcd"
}
val _: String = wildcard

val arr = [1, 2, 3]
val item = arr[0]

val res1 = match item {
  None => 0
  _ s => s + 1
}
val _: Int = res1

val res2 = match item {
  None => 0
  1 a => a + 1
  _ s => s + 1
}
val _: Int = res2

val res3 = match item {
  1 a => a + 1
  _ => 0
}
val _: Int = res3

enum Color { Red, Green, Blue }
val colors = [Color.Red, Color.Green, Color.Blue]
val col = colors[0]

val res4 = match col {
  Color.Red c => c
  Color.Green c => c
  _ => Color.Blue
}
val _: Color = res4

enum Color2 { RGB(r: Int, g: Int, b: Int) }
val col2 = Color2.RGB(r: 0, g: 0, b: 0)
val res5 = match col2 {
  Color2.RGB(r, g, b) => r + g + b
}
val _: Int = res5

// Alternate (v2) syntax for wildcard/catchall case kind
val wildcard2 = match 123 {
  else => "abcd"
}
val _: String = wildcard2
