const { TestRunner, red, green, magenta } = require('./test-runner')

const LEXER_TESTS = [
  // Ints
  { test: "lexer/ints.abra", assertions: "lexer/ints.out.json" },
  { test: "lexer/ints_error_leading_zero.abra", assertions: "lexer/ints_error_leading_zero.out" },
  { test: "lexer/ints_error_invalid_hex_first.abra", assertions: "lexer/ints_error_invalid_hex_first.out" },
  { test: "lexer/ints_error_invalid_hex_eof.abra", assertions: "lexer/ints_error_invalid_hex_eof.out" },
  { test: "lexer/ints_error_invalid_binary_first.abra", assertions: "lexer/ints_error_invalid_binary_first.out" },
  { test: "lexer/ints_error_invalid_binary_eof.abra", assertions: "lexer/ints_error_invalid_binary_eof.out" },
  { test: "lexer/ints_error_invalid_octal_first.abra", assertions: "lexer/ints_error_invalid_octal_first.out" },
  { test: "lexer/ints_error_invalid_octal_eof.abra", assertions: "lexer/ints_error_invalid_octal_eof.out" },
  // Floats
  { test: "lexer/floats.abra", assertions: "lexer/floats.out.json" },
  { test: "lexer/floats_error_extra_period.abra", assertions: "lexer/floats_error_extra_period.out" },
  // Strings
  { test: "lexer/strings.abra", assertions: "lexer/strings.out.json" },
  { test: "lexer/strings_error_unterminated_newline.abra", assertions: "lexer/strings_error_unterminated_newline.out" },
  { test: "lexer/strings_error_unterminated_eof.abra", assertions: "lexer/strings_error_unterminated_eof.out" },
  { test: "lexer/strings_error_unsupported_escape_sequence.abra", assertions: "lexer/strings_error_unsupported_escape_sequence.out" },
  { test: "lexer/strings_error_invalid_unicode_seq_length.abra", assertions: "lexer/strings_error_invalid_unicode_seq_length.out" },
  { test: "lexer/strings_error_invalid_unicode_seq_eof.abra", assertions: "lexer/strings_error_invalid_unicode_seq_eof.out" },
  { test: "lexer/strings_error_invalid_unicode_seq_char.abra", assertions: "lexer/strings_error_invalid_unicode_seq_char.out" },
  { test: "lexer/strings_interpolation.1.abra", assertions: "lexer/strings_interpolation.1.out.json" },
  { test: "lexer/strings_interpolation.2.abra", assertions: "lexer/strings_interpolation.2.out.json" },
  { test: "lexer/strings_interpolation_error_unclosed_brace.abra", assertions: "lexer/strings_interpolation_error_unclosed_brace.out" },
  // Chars
  { test: "lexer/chars.abra", assertions: "lexer/chars.out.json" },
  { test: "lexer/chars_error_empty.abra", assertions: "lexer/chars_error_empty.out" },
  { test: "lexer/chars_error_too_big.abra", assertions: "lexer/chars_error_too_big.out" },
  { test: "lexer/chars_error_invalid_unicode_seq_char.abra", assertions: "lexer/chars_error_invalid_unicode_seq_char.out" },
  { test: "lexer/chars_error_invalid_unicode_seq_eof.abra", assertions: "lexer/chars_error_invalid_unicode_seq_eof.out" },
  { test: "lexer/chars_error_invalid_unicode_seq_length.abra", assertions: "lexer/chars_error_invalid_unicode_seq_length.out" },
  { test: "lexer/chars_error_unsupported_escape_sequence.abra", assertions: "lexer/chars_error_unsupported_escape_sequence.out" },
  { test: "lexer/chars_error_unterminated_eof.abra", assertions: "lexer/chars_error_unterminated_eof.out" },
  { test: "lexer/chars_error_unterminated_newline.abra", assertions: "lexer/chars_error_unterminated_newline.out" },
  // Keywords
  { test: "lexer/keywords.abra", assertions: "lexer/keywords.out.json" },
  // Symbols
  { test: "lexer/symbols.abra", assertions: "lexer/symbols.out.json" },
  { test: "lexer/symbols_error_ampersand_eof.abra", assertions: "lexer/symbols_error_ampersand_eof.out" },
  { test: "lexer/symbols_error_ampersand_other.abra", assertions: "lexer/symbols_error_ampersand_other.out" },
  { test: "lexer/symbols_error_hash_eof.abra", assertions: "lexer/symbols_error_hash_eof.out" },
  { test: "lexer/symbols_error_hash_other.abra", assertions: "lexer/symbols_error_hash_other.out" },
  // Comments
  { test: "lexer/comments_single_line.abra", assertions: "lexer/comments_single_line.out.json" },
  { test: "lexer/comments_multiline.abra", assertions: "lexer/comments_multiline.out.json" },
  { test: "lexer/comments_error_multiline_unclosed.abra", assertions: "lexer/comments_error_multiline_unclosed.out" },
]

const PARSER_TESTS = [
  { test: "parser/literals.abra", assertions: "parser/literals.out.json" },
  { test: "parser/strings_interpolation.abra", assertions: "parser/strings_interpolation.out.json" },
  { test: "parser/strings_interpolation_error_invalid_expression.1.abra", assertions: "parser/strings_interpolation_error_invalid_expression.1.out" },
  { test: "parser/strings_interpolation_error_invalid_expression.2.abra", assertions: "parser/strings_interpolation_error_invalid_expression.2.out" },

  // Binary
  { test: "parser/binary.abra", assertions: "parser/binary.out.json" },
  { test: "parser/binary_error_eof.abra", assertions: "parser/binary_error_eof.out" },
  // Unary
  { test: "parser/unary.abra", assertions: "parser/unary.out.json" },
  { test: "parser/unary_error_eof.abra", assertions: "parser/unary_error_eof.out" },
  // Grouped
  { test: "parser/grouped.abra", assertions: "parser/grouped.out.json" },
  { test: "parser/grouped_error_eof.abra", assertions: "parser/grouped_error_eof.out" },
  { test: "parser/grouped_error_wrong_closing.abra", assertions: "parser/grouped_error_wrong_closing.out" },
  // Identifiers
  { test: "parser/identifiers.abra", assertions: "parser/identifiers.out.json" },
  { test: "parser/invocation_transform_OptionSome.abra", assertions: "parser/invocation_transform_OptionSome.out.json" },
  // Accessors
  { test: "parser/accessor.abra", assertions: "parser/accessor.out.json" },
  { test: "parser/accessor_error_eof.abra", assertions: "parser/accessor_error_eof.out" },
  { test: "parser/accessor_error_self.abra", assertions: "parser/accessor_error_self.out" },
  { test: "parser/accessor_error_None.abra", assertions: "parser/accessor_error_None.out" },
  // Invocation
  { test: "parser/invocation.abra", assertions: "parser/invocation.out.json" },
  { test: "parser/invocation_error_eof.abra", assertions: "parser/invocation_error_eof.out" },
  { test: "parser/invocation_error_no_comma.abra", assertions: "parser/invocation_error_no_comma.out" },
  { test: "parser/invocation_error_no_rparen.abra", assertions: "parser/invocation_error_no_rparen.out" },
  { test: "parser/invocation_error_empty_typeargs.abra", assertions: "parser/invocation_error_empty_typeargs.out" },
  { test: "parser/invocation_error_invalid_typearg.abra", assertions: "parser/invocation_error_invalid_typearg.out" },
  { test: "parser/invocation_error_typeargs_eof.abra", assertions: "parser/invocation_error_typeargs_eof.out" },
  { test: "parser/invocation_error_typeargs_no_lparen.abra", assertions: "parser/invocation_error_typeargs_no_lparen.out" },
  // Array
  { test: "parser/array.abra", assertions: "parser/array.out.json" },
  { test: "parser/array_error_eof.abra", assertions: "parser/array_error_eof.out" },
  { test: "parser/array_error_no_comma.abra", assertions: "parser/array_error_no_comma.out" },
  { test: "parser/array_error_no_rbrack.abra", assertions: "parser/array_error_no_rbrack.out" },
  // Set
  { test: "parser/set.abra", assertions: "parser/set.out.json" },
  { test: "parser/set_error_eof.abra", assertions: "parser/set_error_eof.out" },
  { test: "parser/set_error_no_comma.abra", assertions: "parser/set_error_no_comma.out" },
  { test: "parser/set_error_no_rbrace.abra", assertions: "parser/set_error_no_rbrace.out" },
  // Map
  { test: "parser/map.abra", assertions: "parser/map.out.json" },
  { test: "parser/map_error_bad_key.abra", assertions: "parser/map_error_bad_key.out" },
  { test: "parser/map_error_no_colon.abra", assertions: "parser/map_error_no_colon.out" },
  { test: "parser/map_error_no_colon_eof.abra", assertions: "parser/map_error_no_colon_eof.out" },
  { test: "parser/map_error_no_comma.abra", assertions: "parser/map_error_no_comma.out" },
  { test: "parser/map_error_no_rbrace.abra", assertions: "parser/map_error_no_rbrace.out" },
  { test: "parser/map_error_no_value.abra", assertions: "parser/map_error_no_value.out" },
  { test: "parser/map_error_no_value_eof.abra", assertions: "parser/map_error_no_value_eof.out" },
  // Tuples
  { test: "parser/tuples.abra", assertions: "parser/tuples.out.json" },
  { test: "parser/tuples_error_eof.abra", assertions: "parser/tuples_error_eof.out" },
  { test: "parser/tuples_error_no_comma.abra", assertions: "parser/tuples_error_no_comma.out" },
  { test: "parser/tuples_error_no_rparen.abra", assertions: "parser/tuples_error_no_rparen.out" },
  // Lambdas
  { test: "parser/lambdas.abra", assertions: "parser/lambdas.out.json" },
  { test: "parser/lambdas_error_bad_arg.abra", assertions: "parser/lambdas_error_bad_arg.out" },
  { test: "parser/lambdas_error_badparam_None.abra", assertions: "parser/lambdas_error_badparam_None.out" },
  { test: "parser/lambdas_error_badparam_nonident.abra", assertions: "parser/lambdas_error_badparam_nonident.out" },
  { test: "parser/lambdas_error_badparam_self.abra", assertions: "parser/lambdas_error_badparam_self.out" },
  { test: "parser/lambdas_error_noargs_no_arrow.abra", assertions: "parser/lambdas_error_noargs_no_arrow.out" },
  { test: "parser/lambdas_error_statement_body.abra", assertions: "parser/lambdas_error_statement_body.out" },
  // Indexing
  { test: "parser/indexing.abra", assertions: "parser/indexing.out.json" },
  { test: "parser/indexing_error_eof.abra", assertions: "parser/indexing_error_eof.out" },
  { test: "parser/indexing_error_no_rbrack.abra", assertions: "parser/indexing_error_no_rbrack.out" },
  // Try
  { test: "parser/try.abra", assertions: "parser/try.out.json" },
  { test: "parser/try_error_eof.abra", assertions: "parser/try_error_eof.out" },
  { test: "parser/try_error_invalid_token.abra", assertions: "parser/try_error_invalid_token.out" },
  { test: "parser/try_else_error_eof.abra", assertions: "parser/try_else_error_eof.out" },
  // Assignment
  { test: "parser/assignment.abra", assertions: "parser/assignment.out.json" },
  { test: "parser/assignment_error_as_expr.abra", assertions: "parser/assignment_error_as_expr.out" },
  { test: "parser/assignment_error_assign_to_range.abra", assertions: "parser/assignment_error_assign_to_range.out" },
  { test: "parser/assignment_error_assignment_precedence.abra", assertions: "parser/assignment_error_assignment_precedence.out" },
  { test: "parser/assignment_error_illegal_target.abra", assertions: "parser/assignment_error_illegal_target.out" },
  // If
  { test: "parser/if.abra", assertions: "parser/if.out.json" },
  { test: "parser/if_error_no_closing_pipe.abra", assertions: "parser/if_error_no_closing_pipe.out" },
  { test: "parser/if_error_no_then_block.abra", assertions: "parser/if_error_no_then_block.out" },
  // Match
  { test: "parser/match.abra", assertions: "parser/match.out.json" },
  { test: "parser/match_error_case_bad_binding.abra", assertions: "parser/match_error_case_bad_binding.out" },
  { test: "parser/match_error_case_bad_path.abra", assertions: "parser/match_error_case_bad_path.out" },
  { test: "parser/match_error_case_bad_token.abra", assertions: "parser/match_error_case_bad_token.out" },
  { test: "parser/match_error_case_expr.abra", assertions: "parser/match_error_case_expr.out" },
  { test: "parser/match_error_case_no_case.abra", assertions: "parser/match_error_case_no_case.out" },
  { test: "parser/match_error_no_expr.abra", assertions: "parser/match_error_no_expr.out" },
  { test: "parser/match_error_no_lbrace.abra", assertions: "parser/match_error_no_lbrace.out" },
  { test: "parser/match_error_destructuring_case_empty_args.abra", assertions: "parser/match_error_destructuring_case_empty_args.out" },
  // Decorators
  { test: "parser/decorator_error_bad_ident.abra", assertions: "parser/decorator_error_bad_ident.out" },
  { test: "parser/decorator_error_before_expr.abra", assertions: "parser/decorator_error_before_expr.out" },
  { test: "parser/decorator_error_before_invalid_stmt.abra", assertions: "parser/decorator_error_before_invalid_stmt.out" },
  { test: "parser/decorator_error_non_constant_arg.abra", assertions: "parser/decorator_error_non_constant_arg.out" },
  { test: "parser/decorator.abra", assertions: "parser/decorator.out.json" },

  // Imports
  { test: "parser/import.abra", assertions: "parser/import.out.json" },
  { test: "parser/import_error_alias_bad_alias.abra", assertions: "parser/import_error_alias_bad_alias.out" },
  { test: "parser/import_error_alias_bad_module.abra", assertions: "parser/import_error_alias_bad_module.out" },
  { test: "parser/import_error_alias_no_alias_eof.abra", assertions: "parser/import_error_alias_no_alias_eof.out" },
  { test: "parser/import_error_alias_no_as.abra", assertions: "parser/import_error_alias_no_as.out" },
  { test: "parser/import_error_alias_no_module.abra", assertions: "parser/import_error_alias_no_module.out" },
  { test: "parser/import_error_forbidden.abra", assertions: "parser/import_error_forbidden.out" },
  { test: "parser/import_error_list_2nd_nonident.abra", assertions: "parser/import_error_list_2nd_nonident.out" },
  { test: "parser/import_error_list_2nd_underscore.abra", assertions: "parser/import_error_list_2nd_underscore.out" },
  { test: "parser/import_error_list_bad_module.abra", assertions: "parser/import_error_list_bad_module.out" },
  { test: "parser/import_error_list_first_nonident.abra", assertions: "parser/import_error_list_first_nonident.out" },
  { test: "parser/import_error_list_no_comma.abra", assertions: "parser/import_error_list_no_comma.out" },
  { test: "parser/import_error_list_no_from.abra", assertions: "parser/import_error_list_no_from.out" },
  { test: "parser/import_error_list_no_module_eof.abra", assertions: "parser/import_error_list_no_module_eof.out" },
  // Exports
  { test: "parser/export.abra", assertions: "parser/export.out.json" },
  { test: "parser/export_error_before_expr.abra", assertions: "parser/export_error_before_expr.out" },
  { test: "parser/export_error_before_invalid_statement.abra", assertions: "parser/export_error_before_invalid_statement.out" },

  // While
  { test: "parser/while.abra", assertions: "parser/while.out.json" },
  { test: "parser/while_error_as_expr.abra", assertions: "parser/while_error_as_expr.out" },
  // For
  { test: "parser/for.abra", assertions: "parser/for.out.json" },
  { test: "parser/for_error_no_in.abra", assertions: "parser/for_error_no_in.out" },
  { test: "parser/for_error_no_iterator.abra", assertions: "parser/for_error_no_iterator.out" },

  // Type identifiers
  { test: "parser/typeidentifiers.abra", assertions: "parser/typeidentifiers.out.json" },
  { test: "parser/typeidentifiers_error_empty_typeargs.abra", assertions: "parser/typeidentifiers_error_empty_typeargs.out" },
  { test: "parser/typeidentifiers_error_empty_tuple.abra", assertions: "parser/typeidentifiers_error_empty_tuple.out" },
  { test: "parser/typeidentifiers_error_misplaced_typeargs.abra", assertions: "parser/typeidentifiers_error_misplaced_typeargs.out" },
  { test: "parser/typeidentifiers_error_no_base_ident.abra", assertions: "parser/typeidentifiers_error_no_base_ident.out" },
  { test: "parser/typeidentifiers_error_no_rbrack.abra", assertions: "parser/typeidentifiers_error_no_rbrack.out" },
  // Binding declaration
  { test: "parser/bindingdecl.abra", assertions: "parser/bindingdecl.out.json" },
  { test: "parser/bindingdecl_error_bad_expr.abra", assertions: "parser/bindingdecl_error_bad_expr.out" },
  { test: "parser/bindingdecl_error_bad_ident.abra", assertions: "parser/bindingdecl_error_bad_ident.out" },
  { test: "parser/bindingdecl_error_no_expr.abra", assertions: "parser/bindingdecl_error_no_expr.out" },
  { test: "parser/bindingdecl_error_no_ident.abra", assertions: "parser/bindingdecl_error_no_ident.out" },
  // Function declaration
  { test: "parser/functiondecl.abra", assertions: "parser/functiondecl.out.json" },
  { test: "parser/functiondecl_error_bad_name.abra", assertions: "parser/functiondecl_error_bad_name.out" },
  { test: "parser/functiondecl_error_no_parens.abra", assertions: "parser/functiondecl_error_no_parens.out" },
  { test: "parser/functiondecl_error_empty_typeparams.abra", assertions: "parser/functiondecl_error_empty_typeparams.out" },
  { test: "parser/functiondecl_error_typeparam_invalid.abra", assertions: "parser/functiondecl_error_typeparam_invalid.out" },
  { test: "parser/functiondecl_error_no_body.abra", assertions: "parser/functiondecl_error_no_body.out" },
  { test: "parser/functiondecl_error_self_default_value.abra", assertions: "parser/functiondecl_error_self_default_value.out" },
  { test: "parser/functiondecl_error_self_type_annotation.abra", assertions: "parser/functiondecl_error_self_type_annotation.out" },
  { test: "parser/functiondecl_error_self_variadic.abra", assertions: "parser/functiondecl_error_self_variadic.out" },
  // Type declaration
  { test: "parser/typedecl.abra", assertions: "parser/typedecl.out.json" },
  { test: "parser/typedecl_error_field_after_method.abra", assertions: "parser/typedecl_error_field_after_method.out" },
  { test: "parser/typedecl_error_illegal_body_part.abra", assertions: "parser/typedecl_error_illegal_body_part.out" },
  // Enum declaration
  { test: "parser/enumdecl.abra", assertions: "parser/enumdecl.out.json" },
  { test: "parser/enumdecl_error_container_no_typeannotation.abra", assertions: "parser/enumdecl_error_container_no_typeannotation.out" },
  { test: "parser/enumdecl_error_empty_container_variant.abra", assertions: "parser/enumdecl_error_empty_container_variant.out" },
  // Returns
  { test: "parser/return.abra", assertions: "parser/return.out.json" },
  { test: "parser/return_error_nonexpr.abra", assertions: "parser/return_error_nonexpr.out" },
]

const TYPECHECKER_TESTS = [
  { test: "typechecker/_lexer_error.abra", assertions: "typechecker/_lexer_error.out" },
  { test: "typechecker/_parser_error.abra", assertions: "typechecker/_parser_error.out" },
  // Literals
  { test: "typechecker/literals/literals.abra", assertions: "typechecker/literals/literals.out.json" },
  { test: "typechecker/literals/string_interpolation.abra", assertions: "typechecker/literals/string_interpolation.out.json" },
  // Unary
  { test: "typechecker/unary/unary.abra", assertions: "typechecker/unary/unary.out.json" },
  { test: "typechecker/unary/error_minus.1.abra", assertions: "typechecker/unary/error_minus.1.out" },
  { test: "typechecker/unary/error_minus.2.abra", assertions: "typechecker/unary/error_minus.2.out" },
  { test: "typechecker/unary/error_neg.1.abra", assertions: "typechecker/unary/error_neg.1.out" },
  { test: "typechecker/unary/error_neg.2.abra", assertions: "typechecker/unary/error_neg.2.out" },
  // Binary
  { test: "typechecker/binary/and.abra", assertions: "typechecker/binary/and.out.json" },
  { test: "typechecker/binary/and_error.1.abra", assertions: "typechecker/binary/and_error.1.out" },
  { test: "typechecker/binary/and_error.2.abra", assertions: "typechecker/binary/and_error.2.out" },
  { test: "typechecker/binary/coalesce.1.abra", assertions: "typechecker/binary/coalesce.1.out.json" },
  { test: "typechecker/binary/coalesce.2.abra", assertions: "typechecker/binary/coalesce.2.out.json" },
  { test: "typechecker/binary/coalesce_error.1.abra", assertions: "typechecker/binary/coalesce_error.1.out" },
  { test: "typechecker/binary/coalesce_error.2.abra", assertions: "typechecker/binary/coalesce_error.2.out" },
  { test: "typechecker/binary/coalesce_error.3.abra", assertions: "typechecker/binary/coalesce_error.3.out" },
  { test: "typechecker/binary/divide.abra", assertions: "typechecker/binary/divide.out.json" },
  { test: "typechecker/binary/divide_error.1.abra", assertions: "typechecker/binary/divide_error.1.out" },
  { test: "typechecker/binary/divide_error.2.abra", assertions: "typechecker/binary/divide_error.2.out" },
  { test: "typechecker/binary/divide_error.3.abra", assertions: "typechecker/binary/divide_error.3.out" },
  { test: "typechecker/binary/eq.1.abra", assertions: "typechecker/binary/eq.1.out.json" },
  { test: "typechecker/binary/eq.2.abra", assertions: "typechecker/binary/eq.2.out.json" },
  { test: "typechecker/binary/eq_error.1.abra", assertions: "typechecker/binary/eq_error.1.out" },
  { test: "typechecker/binary/eq_error.2.abra", assertions: "typechecker/binary/eq_error.2.out" },
  { test: "typechecker/binary/eq_error.3.abra", assertions: "typechecker/binary/eq_error.3.out" },
  { test: "typechecker/binary/gt.abra", assertions: "typechecker/binary/gt.out.json" },
  { test: "typechecker/binary/gt_error.1.abra", assertions: "typechecker/binary/gt_error.1.out" },
  { test: "typechecker/binary/gt_error.2.abra", assertions: "typechecker/binary/gt_error.2.out" },
  { test: "typechecker/binary/gt_error.3.abra", assertions: "typechecker/binary/gt_error.3.out" },
  { test: "typechecker/binary/gte.abra", assertions: "typechecker/binary/gte.out.json" },
  { test: "typechecker/binary/gte_error.1.abra", assertions: "typechecker/binary/gte_error.1.out" },
  { test: "typechecker/binary/gte_error.2.abra", assertions: "typechecker/binary/gte_error.2.out" },
  { test: "typechecker/binary/gte_error.3.abra", assertions: "typechecker/binary/gte_error.3.out" },
  { test: "typechecker/binary/lt.abra", assertions: "typechecker/binary/lt.out.json" },
  { test: "typechecker/binary/lt_error.1.abra", assertions: "typechecker/binary/lt_error.1.out" },
  { test: "typechecker/binary/lt_error.2.abra", assertions: "typechecker/binary/lt_error.2.out" },
  { test: "typechecker/binary/lt_error.3.abra", assertions: "typechecker/binary/lt_error.3.out" },
  { test: "typechecker/binary/lte.abra", assertions: "typechecker/binary/lte.out.json" },
  { test: "typechecker/binary/lte_error.1.abra", assertions: "typechecker/binary/lte_error.1.out" },
  { test: "typechecker/binary/lte_error.2.abra", assertions: "typechecker/binary/lte_error.2.out" },
  { test: "typechecker/binary/lte_error.3.abra", assertions: "typechecker/binary/lte_error.3.out" },
  { test: "typechecker/binary/minus.abra", assertions: "typechecker/binary/minus.out.json" },
  { test: "typechecker/binary/minus_error.1.abra", assertions: "typechecker/binary/minus_error.1.out" },
  { test: "typechecker/binary/minus_error.2.abra", assertions: "typechecker/binary/minus_error.2.out" },
  { test: "typechecker/binary/minus_error.3.abra", assertions: "typechecker/binary/minus_error.3.out" },
  { test: "typechecker/binary/mod.abra", assertions: "typechecker/binary/mod.out.json" },
  { test: "typechecker/binary/mod_error.1.abra", assertions: "typechecker/binary/mod_error.1.out" },
  { test: "typechecker/binary/mod_error.2.abra", assertions: "typechecker/binary/mod_error.2.out" },
  { test: "typechecker/binary/mod_error.3.abra", assertions: "typechecker/binary/mod_error.3.out" },
  { test: "typechecker/binary/neq.1.abra", assertions: "typechecker/binary/neq.1.out.json" },
  { test: "typechecker/binary/neq.2.abra", assertions: "typechecker/binary/neq.2.out.json" },
  { test: "typechecker/binary/neq_error.1.abra", assertions: "typechecker/binary/neq_error.1.out" },
  { test: "typechecker/binary/neq_error.2.abra", assertions: "typechecker/binary/neq_error.2.out" },
  { test: "typechecker/binary/or.abra", assertions: "typechecker/binary/or.out.json" },
  { test: "typechecker/binary/or_error.1.abra", assertions: "typechecker/binary/or_error.1.out" },
  { test: "typechecker/binary/or_error.2.abra", assertions: "typechecker/binary/or_error.2.out" },
  { test: "typechecker/binary/plus_error.1.abra", assertions: "typechecker/binary/plus_error.1.out" },
  { test: "typechecker/binary/plus_error.2.abra", assertions: "typechecker/binary/plus_error.2.out" },
  { test: "typechecker/binary/plus_error.3.abra", assertions: "typechecker/binary/plus_error.3.out" },
  { test: "typechecker/binary/plus_numeric.abra", assertions: "typechecker/binary/plus_numeric.out.json" },
  { test: "typechecker/binary/plus_string_concat.abra", assertions: "typechecker/binary/plus_string_concat.out.json" },
  { test: "typechecker/binary/pow.abra", assertions: "typechecker/binary/pow.out.json" },
  { test: "typechecker/binary/pow_error.1.abra", assertions: "typechecker/binary/pow_error.1.out" },
  { test: "typechecker/binary/pow_error.2.abra", assertions: "typechecker/binary/pow_error.2.out" },
  { test: "typechecker/binary/pow_error.3.abra", assertions: "typechecker/binary/pow_error.3.out" },
  { test: "typechecker/binary/shl.abra", assertions: "typechecker/binary/shl.out.json" },
  { test: "typechecker/binary/shl_error.1.abra", assertions: "typechecker/binary/shl_error.1.out" },
  { test: "typechecker/binary/shl_error.2.abra", assertions: "typechecker/binary/shl_error.2.out" },
  { test: "typechecker/binary/shl_error.3.abra", assertions: "typechecker/binary/shl_error.3.out" },
  { test: "typechecker/binary/shl_error.4.abra", assertions: "typechecker/binary/shl_error.4.out" },
  { test: "typechecker/binary/shr.abra", assertions: "typechecker/binary/shr.out.json" },
  { test: "typechecker/binary/shr_error.1.abra", assertions: "typechecker/binary/shr_error.1.out" },
  { test: "typechecker/binary/shr_error.2.abra", assertions: "typechecker/binary/shr_error.2.out" },
  { test: "typechecker/binary/shr_error.3.abra", assertions: "typechecker/binary/shr_error.3.out" },
  { test: "typechecker/binary/shr_error.4.abra", assertions: "typechecker/binary/shr_error.4.out" },
  { test: "typechecker/binary/times.abra", assertions: "typechecker/binary/times.out.json" },
  { test: "typechecker/binary/times_error.1.abra", assertions: "typechecker/binary/times_error.1.out" },
  { test: "typechecker/binary/times_error.2.abra", assertions: "typechecker/binary/times_error.2.out" },
  { test: "typechecker/binary/times_error.3.abra", assertions: "typechecker/binary/times_error.3.out" },
  { test: "typechecker/binary/and_eq.abra", assertions: "typechecker/binary/and_eq.out.json" },
  { test: "typechecker/binary/and_eq_error.1.abra", assertions: "typechecker/binary/and_eq_error.1.out" },
  { test: "typechecker/binary/and_eq_error.2.abra", assertions: "typechecker/binary/and_eq_error.2.out" },
  { test: "typechecker/binary/divide_eq.abra", assertions: "typechecker/binary/divide_eq.out.json" },
  { test: "typechecker/binary/divide_eq_error.1.abra", assertions: "typechecker/binary/divide_eq_error.1.out" },
  { test: "typechecker/binary/divide_eq_error.2.abra", assertions: "typechecker/binary/divide_eq_error.2.out" },
  { test: "typechecker/binary/divide_eq_error.3.abra", assertions: "typechecker/binary/divide_eq_error.3.out" },
  { test: "typechecker/binary/minus_eq.abra", assertions: "typechecker/binary/minus_eq.out.json" },
  { test: "typechecker/binary/minus_eq_error.1.abra", assertions: "typechecker/binary/minus_eq_error.1.out" },
  { test: "typechecker/binary/minus_eq_error.2.abra", assertions: "typechecker/binary/minus_eq_error.2.out" },
  { test: "typechecker/binary/mod_eq.abra", assertions: "typechecker/binary/mod_eq.out.json" },
  { test: "typechecker/binary/mod_eq_error.1.abra", assertions: "typechecker/binary/mod_eq_error.1.out" },
  { test: "typechecker/binary/mod_eq_error.2.abra", assertions: "typechecker/binary/mod_eq_error.2.out" },
  { test: "typechecker/binary/or_eq.abra", assertions: "typechecker/binary/or_eq.out.json" },
  { test: "typechecker/binary/or_eq_error.1.abra", assertions: "typechecker/binary/or_eq_error.1.out" },
  { test: "typechecker/binary/or_eq_error.2.abra", assertions: "typechecker/binary/or_eq_error.2.out" },
  { test: "typechecker/binary/plus_eq.abra", assertions: "typechecker/binary/plus_eq.out.json" },
  { test: "typechecker/binary/plus_eq_error.1.abra", assertions: "typechecker/binary/plus_eq_error.1.out" },
  { test: "typechecker/binary/plus_eq_error.2.abra", assertions: "typechecker/binary/plus_eq_error.2.out" },
  { test: "typechecker/binary/times_eq.abra", assertions: "typechecker/binary/times_eq.out.json" },
  { test: "typechecker/binary/times_eq_error.1.abra", assertions: "typechecker/binary/times_eq_error.1.out" },
  { test: "typechecker/binary/times_eq_error.2.abra", assertions: "typechecker/binary/times_eq_error.2.out" },

  // Identifier
  { test: "typechecker/identifier/identifier.abra", assertions: "typechecker/identifier/identifier.out.json" },
  { test: "typechecker/identifier/identifier_transform_OptionNone.abra", assertions: "typechecker/identifier/identifier_transform_OptionNone.out.json" },
  { test: "typechecker/identifier/error_discard.abra", assertions: "typechecker/identifier/error_discard.out" },
  { test: "typechecker/identifier/error_type_mismatch.abra", assertions: "typechecker/identifier/error_type_mismatch.out" },
  { test: "typechecker/identifier/error_type_mismatch_None.abra", assertions: "typechecker/identifier/error_type_mismatch_None.out" },
  { test: "typechecker/identifier/error_unknown_ident.abra", assertions: "typechecker/identifier/error_unknown_ident.out" },
  // Array
  { test: "typechecker/array/array.abra", assertions: "typechecker/array/array.out.json" },
  { test: "typechecker/array/error_bindingdecl_empty.abra", assertions: "typechecker/array/error_bindingdecl_empty.out" },
  { test: "typechecker/array/error_type_mismatch_bindingdecl.1.abra", assertions: "typechecker/array/error_type_mismatch_bindingdecl.1.out" },
  { test: "typechecker/array/error_type_mismatch_bindingdecl.2.abra", assertions: "typechecker/array/error_type_mismatch_bindingdecl.2.out" },
  { test: "typechecker/array/error_type_mismatch_bindingdecl.3.abra", assertions: "typechecker/array/error_type_mismatch_bindingdecl.3.out" },
  { test: "typechecker/array/error_type_mismatch_item.1.abra", assertions: "typechecker/array/error_type_mismatch_item.1.out" },
  { test: "typechecker/array/error_type_mismatch_item.2.abra", assertions: "typechecker/array/error_type_mismatch_item.2.out" },
  { test: "typechecker/array/error_type_mismatch_item.3.abra", assertions: "typechecker/array/error_type_mismatch_item.3.out" },
  { test: "typechecker/array/error_type_mismatch_item.4.abra", assertions: "typechecker/array/error_type_mismatch_item.4.out" },
  // Set
  { test: "typechecker/set/set.abra", assertions: "typechecker/set/set.out.json" },
  { test: "typechecker/set/error_bindingdecl_empty.abra", assertions: "typechecker/set/error_bindingdecl_empty.out" },
  { test: "typechecker/set/error_type_mismatch_bindingdecl.1.abra", assertions: "typechecker/set/error_type_mismatch_bindingdecl.1.out" },
  { test: "typechecker/set/error_type_mismatch_bindingdecl.2.abra", assertions: "typechecker/set/error_type_mismatch_bindingdecl.2.out" },
  { test: "typechecker/set/error_type_mismatch_bindingdecl.3.abra", assertions: "typechecker/set/error_type_mismatch_bindingdecl.3.out" },
  { test: "typechecker/set/error_type_mismatch_item.1.abra", assertions: "typechecker/set/error_type_mismatch_item.1.out" },
  { test: "typechecker/set/error_type_mismatch_item.2.abra", assertions: "typechecker/set/error_type_mismatch_item.2.out" },
  { test: "typechecker/set/error_type_mismatch_item.3.abra", assertions: "typechecker/set/error_type_mismatch_item.3.out" },
  { test: "typechecker/set/error_type_mismatch_item.4.abra", assertions: "typechecker/set/error_type_mismatch_item.4.out" },
  // Map
  { test: "typechecker/map/map.abra", assertions: "typechecker/map/map.out.json" },
  { test: "typechecker/map/error_bindingdecl_empty.abra", assertions: "typechecker/map/error_bindingdecl_empty.out" },
  { test: "typechecker/map/error_type_mismatch_bindingdecl.1.abra", assertions: "typechecker/map/error_type_mismatch_bindingdecl.1.out" },
  { test: "typechecker/map/error_type_mismatch_bindingdecl.2.abra", assertions: "typechecker/map/error_type_mismatch_bindingdecl.2.out" },
  { test: "typechecker/map/error_type_mismatch_bindingdecl.3.abra", assertions: "typechecker/map/error_type_mismatch_bindingdecl.3.out" },
  { test: "typechecker/map/error_type_mismatch_bindingdecl.4.abra", assertions: "typechecker/map/error_type_mismatch_bindingdecl.4.out" },
  { test: "typechecker/map/error_type_mismatch_key.1.abra", assertions: "typechecker/map/error_type_mismatch_key.1.out" },
  { test: "typechecker/map/error_type_mismatch_value.1.abra", assertions: "typechecker/map/error_type_mismatch_value.1.out" },
  { test: "typechecker/map/error_type_mismatch_value.2.abra", assertions: "typechecker/map/error_type_mismatch_value.2.out" },
  { test: "typechecker/map/error_unfilled_holes.1.abra", assertions: "typechecker/map/error_unfilled_holes.1.out" },
  { test: "typechecker/map/error_unfilled_holes.2.abra", assertions: "typechecker/map/error_unfilled_holes.2.out" },
  // Tuple
  { test: "typechecker/tuple/tuple.abra", assertions: "typechecker/tuple/tuple.out.json" },
  { test: "typechecker/tuple/error_type_mismatch.1.abra", assertions: "typechecker/tuple/error_type_mismatch.1.out" },
  { test: "typechecker/tuple/error_type_mismatch.2.abra", assertions: "typechecker/tuple/error_type_mismatch.2.out" },
  { test: "typechecker/tuple/error_type_mismatch_too_big.1.abra", assertions: "typechecker/tuple/error_type_mismatch_too_big.1.out" },
  { test: "typechecker/tuple/error_type_mismatch_too_big.2.abra", assertions: "typechecker/tuple/error_type_mismatch_too_big.2.out" },
  { test: "typechecker/tuple/error_type_mismatch_too_small.1.abra", assertions: "typechecker/tuple/error_type_mismatch_too_small.1.out" },
  // Indexing
  { test: "typechecker/indexing/error_indexing_array_nullable.abra", assertions: "typechecker/indexing/error_indexing_array_nullable.out" },
  { test: "typechecker/indexing/error_indexing_string_nullable.abra", assertions: "typechecker/indexing/error_indexing_string_nullable.out" },
  { test: "typechecker/indexing/error_indexing_tuple_nullable.abra", assertions: "typechecker/indexing/error_indexing_tuple_nullable.out" },
  { test: "typechecker/indexing/error_indexing_map_nullable.abra", assertions: "typechecker/indexing/error_indexing_map_nullable.out" },
  { test: "typechecker/indexing/error_unindexable_type.1.abra", assertions: "typechecker/indexing/error_unindexable_type.1.out" },
  { test: "typechecker/indexing/error_unindexable_type.2.abra", assertions: "typechecker/indexing/error_unindexable_type.2.out" },
  { test: "typechecker/indexing/array_error_idx_non_int.abra", assertions: "typechecker/indexing/array_error_idx_non_int.out" },
  { test: "typechecker/indexing/array_error_idx_nullable.abra", assertions: "typechecker/indexing/array_error_idx_nullable.out" },
  { test: "typechecker/indexing/array_error_range_non_int.1.abra", assertions: "typechecker/indexing/array_error_range_non_int.1.out" },
  { test: "typechecker/indexing/array_error_range_non_int.2.abra", assertions: "typechecker/indexing/array_error_range_non_int.2.out" },
  { test: "typechecker/indexing/array_error_range_nullable.1.abra", assertions: "typechecker/indexing/array_error_range_nullable.1.out" },
  { test: "typechecker/indexing/array_error_range_nullable.2.abra", assertions: "typechecker/indexing/array_error_range_nullable.2.out" },
  { test: "typechecker/indexing/indexing_array.abra", assertions: "typechecker/indexing/indexing_array.out.json" },
  { test: "typechecker/indexing/indexing_map.abra", assertions: "typechecker/indexing/indexing_map.out.json" },
  { test: "typechecker/indexing/indexing_string.abra", assertions: "typechecker/indexing/indexing_string.out.json" },
  { test: "typechecker/indexing/indexing_tuple.abra", assertions: "typechecker/indexing/indexing_tuple.out.json" },
  { test: "typechecker/indexing/map_error_key_type_mismatch.abra", assertions: "typechecker/indexing/map_error_key_type_mismatch.out" },
  { test: "typechecker/indexing/string_error_idx_non_int.abra", assertions: "typechecker/indexing/string_error_idx_non_int.out" },
  { test: "typechecker/indexing/string_error_idx_nullable.abra", assertions: "typechecker/indexing/string_error_idx_nullable.out" },
  { test: "typechecker/indexing/string_error_range_non_int.1.abra", assertions: "typechecker/indexing/string_error_range_non_int.1.out" },
  { test: "typechecker/indexing/string_error_range_non_int.2.abra", assertions: "typechecker/indexing/string_error_range_non_int.2.out" },
  { test: "typechecker/indexing/string_error_range_nullable.1.abra", assertions: "typechecker/indexing/string_error_range_nullable.1.out" },
  { test: "typechecker/indexing/string_error_range_nullable.2.abra", assertions: "typechecker/indexing/string_error_range_nullable.2.out" },
  { test: "typechecker/indexing/tuple_error_hole.abra", assertions: "typechecker/indexing/tuple_error_hole.out" },
  { test: "typechecker/indexing/tuple_error_negative.abra", assertions: "typechecker/indexing/tuple_error_negative.out" },
  { test: "typechecker/indexing/tuple_error_non_int_literal.abra", assertions: "typechecker/indexing/tuple_error_non_int_literal.out" },
  { test: "typechecker/indexing/tuple_error_non_literal.abra", assertions: "typechecker/indexing/tuple_error_non_literal.out" },
  { test: "typechecker/indexing/tuple_error_out_of_bounds.abra", assertions: "typechecker/indexing/tuple_error_out_of_bounds.out" },
  { test: "typechecker/indexing/tuple_error_range.abra", assertions: "typechecker/indexing/tuple_error_range.out" },
  { test: "typechecker/indexing/tuple_error_type_mismatch.abra", assertions: "typechecker/indexing/tuple_error_type_mismatch.out" },
  // If expressions & statements
  { test: "typechecker/if/error_binding_invalid_destructuring_tuple.abra", assertions: "typechecker/if/error_binding_invalid_destructuring_tuple.out" },
  { test: "typechecker/if/error_bad_cond_type.abra", assertions: "typechecker/if/error_bad_cond_type.out" },
  { test: "typechecker/if/error_block_mismatch.1.abra", assertions: "typechecker/if/error_block_mismatch.1.out" },
  { test: "typechecker/if/error_block_mismatch.2.abra", assertions: "typechecker/if/error_block_mismatch.2.out" },
  { test: "typechecker/if/error_empty_else_block.abra", assertions: "typechecker/if/error_empty_else_block.out" },
  { test: "typechecker/if/error_empty_if_block.abra", assertions: "typechecker/if/error_empty_if_block.out" },
  { test: "typechecker/if/error_mismatch_bindingdecl.1.abra", assertions: "typechecker/if/error_mismatch_bindingdecl.1.out" },
  { test: "typechecker/if/error_mismatch_bindingdecl.2.abra", assertions: "typechecker/if/error_mismatch_bindingdecl.2.out" },
  { test: "typechecker/if/error_mismatch_bindingdecl.3.abra", assertions: "typechecker/if/error_mismatch_bindingdecl.3.out" },
  { test: "typechecker/if/error_no_else_block.abra", assertions: "typechecker/if/error_no_else_block.out" },
  { test: "typechecker/if/error_unfilled_holes_bindingdecl.1.abra", assertions: "typechecker/if/error_unfilled_holes_bindingdecl.1.out" },
  { test: "typechecker/if/error_unfilled_holes_bindingdecl.2.abra", assertions: "typechecker/if/error_unfilled_holes_bindingdecl.2.out" },
  { test: "typechecker/if/error_unfilled_holes_bindingdecl.3.abra", assertions: "typechecker/if/error_unfilled_holes_bindingdecl.3.out" },
  { test: "typechecker/if/error_unfilled_holes_bindingdecl.4.abra", assertions: "typechecker/if/error_unfilled_holes_bindingdecl.4.out" },
  { test: "typechecker/if/expr.abra", assertions: "typechecker/if/expr.out.json" },
  { test: "typechecker/if/stmt.abra", assertions: "typechecker/if/stmt.out.json" },
  // Match expressions & statements
  { test: "typechecker/match/match_expr.abra", assertions: "typechecker/match/match_expr.out.json" },
  { test: "typechecker/match/match_stmt.abra", assertions: "typechecker/match/match_stmt.out.json" },
  { test: "typechecker/match/match_Result.abra", assertions: "typechecker/match/match_Result.out.json" },
  { test: "typechecker/match/match_expr_terminators.abra", assertions: "typechecker/match/match_expr_terminators.out.json" },
  { test: "typechecker/match/error_expr_empty_block.abra", assertions: "typechecker/match/error_expr_empty_block.out" },
  { test: "typechecker/match/error_unfilled_holes.1.abra", assertions: "typechecker/match/error_unfilled_holes.1.out" },
  { test: "typechecker/match/error_alreadycovered_None.abra", assertions: "typechecker/match/error_alreadycovered_None.out" },
  { test: "typechecker/match/error_duplicate_literal.abra", assertions: "typechecker/match/error_duplicate_literal.out" },
  { test: "typechecker/match/error_invalid_else_type.abra", assertions: "typechecker/match/error_invalid_else_type.out" },
  { test: "typechecker/match/error_nooverlap_None.abra", assertions: "typechecker/match/error_nooverlap_None.out" },
  { test: "typechecker/match/error_nooverlap_literal.1.abra", assertions: "typechecker/match/error_nooverlap_literal.1.out" },
  { test: "typechecker/match/error_nooverlap_literal.2.abra", assertions: "typechecker/match/error_nooverlap_literal.2.out" },
  { test: "typechecker/match/error_alreadycovered_literal_after_type.1.abra", assertions: "typechecker/match/error_alreadycovered_literal_after_type.1.out" },
  { test: "typechecker/match/error_alreadycovered_literal_after_type.2.abra", assertions: "typechecker/match/error_alreadycovered_literal_after_type.2.out" },
  { test: "typechecker/match/error_duplicate_Enum_variant.abra", assertions: "typechecker/match/error_duplicate_Enum_variant.out" },
  { test: "typechecker/match/error_exhaustive_Bool_literal.abra", assertions: "typechecker/match/error_exhaustive_Bool_literal.out" },
  { test: "typechecker/match/error_exhaustive_Enum_variants.1.abra", assertions: "typechecker/match/error_exhaustive_Enum_variants.1.out" },
  { test: "typechecker/match/error_exhaustive_Enum_variants.2.abra", assertions: "typechecker/match/error_exhaustive_Enum_variants.2.out" },
  { test: "typechecker/match/error_exhaustive_after_else.abra", assertions: "typechecker/match/error_exhaustive_after_else.out" },
  { test: "typechecker/match/error_exhaustive_type.1.abra", assertions: "typechecker/match/error_exhaustive_type.1.out" },
  { test: "typechecker/match/error_exhaustive_type.2.abra", assertions: "typechecker/match/error_exhaustive_type.2.out" },
  { test: "typechecker/match/error_nonexhaustive_literal.1.abra", assertions: "typechecker/match/error_nonexhaustive_literal.1.out" },
  { test: "typechecker/match/error_nonexhaustive_literal.2.abra", assertions: "typechecker/match/error_nonexhaustive_literal.2.out" },
  { test: "typechecker/match/error_nooverlap_Enum.abra", assertions: "typechecker/match/error_nooverlap_Enum.out" },
  { test: "typechecker/match/error_nooverlap_Type.abra", assertions: "typechecker/match/error_nooverlap_Type.out" },
  { test: "typechecker/match/error_destructuring_constant_variant.abra", assertions: "typechecker/match/error_destructuring_constant_variant.out" },
  { test: "typechecker/match/error_destructuring_type.abra", assertions: "typechecker/match/error_destructuring_type.out" },
  { test: "typechecker/match/error_destructuring_variant_duplicate_variable.1.abra", assertions: "typechecker/match/error_destructuring_variant_duplicate_variable.1.out" },
  { test: "typechecker/match/error_destructuring_variant_duplicate_variable.2.abra", assertions: "typechecker/match/error_destructuring_variant_duplicate_variable.2.out" },
  { test: "typechecker/match/error_destructuring_variant_too_few.abra", assertions: "typechecker/match/error_destructuring_variant_too_few.out" },
  { test: "typechecker/match/error_destructuring_variant_too_many.abra", assertions: "typechecker/match/error_destructuring_variant_too_many.out" },
  { test: "typechecker/match/error_forbidden_type_all_branches_never.abra", assertions: "typechecker/match/error_forbidden_type_all_branches_never.out" },

  // Invocation
  { test: "typechecker/invocation/invocation.1.abra", assertions: "typechecker/invocation/invocation.1.out.json" },
  { test: "typechecker/invocation/invocation.2.abra", assertions: "typechecker/invocation/invocation.2.out.json" },
  { test: "typechecker/invocation/invocation.3.abra", assertions: "typechecker/invocation/invocation.3.out.json" },
  { test: "typechecker/invocation/invocation.4.abra", assertions: "typechecker/invocation/invocation.4.out.json" },
  { test: "typechecker/invocation/invocation.5.abra", assertions: "typechecker/invocation/invocation.5.out.json" },
  { test: "typechecker/invocation/error_incorrect_label.abra", assertions: "typechecker/invocation/error_incorrect_label.out" },
  { test: "typechecker/invocation/error_mixed_label_optional.abra", assertions: "typechecker/invocation/error_mixed_label_optional.out" },
  { test: "typechecker/invocation/error_optional_param_type_mismatch.abra", assertions: "typechecker/invocation/error_optional_param_type_mismatch.out" },
  { test: "typechecker/invocation/error_optional_param_unknown.abra", assertions: "typechecker/invocation/error_optional_param_unknown.out" },
  { test: "typechecker/invocation/error_too_few_args.abra", assertions: "typechecker/invocation/error_too_few_args.out" },
  { test: "typechecker/invocation/error_too_many_args.abra", assertions: "typechecker/invocation/error_too_many_args.out" },
  { test: "typechecker/invocation/error_expr_illegal_label.abra", assertions: "typechecker/invocation/error_expr_illegal_label.out" },
  { test: "typechecker/invocation/error_expr_not_callable.abra", assertions: "typechecker/invocation/error_expr_not_callable.out" },
  { test: "typechecker/invocation/error_expr_too_few_args.abra", assertions: "typechecker/invocation/error_expr_too_few_args.out" },
  { test: "typechecker/invocation/error_expr_too_many_args.abra", assertions: "typechecker/invocation/error_expr_too_many_args.out" },
  { test: "typechecker/invocation/function_as_param.1.abra", assertions: "typechecker/invocation/function_as_param.1.out.json" },
  { test: "typechecker/invocation/function_as_param.2.abra", assertions: "typechecker/invocation/function_as_param.2.out.json" },
  { test: "typechecker/invocation/function_as_param.3.abra", assertions: "typechecker/invocation/function_as_param.3.out.json" },
  { test: "typechecker/invocation/function_as_param_generic.abra", assertions: "typechecker/invocation/function_as_param_generic.out.json" },
  { test: "typechecker/invocation/function_as_param_error_arity.abra", assertions: "typechecker/invocation/function_as_param_error_arity.out" },
  { test: "typechecker/invocation/function_value.abra", assertions: "typechecker/invocation/function_value.out.json" },
  { test: "typechecker/invocation/invocation_generics.1.abra", assertions: "typechecker/invocation/invocation_generics.1.out.json" },
  { test: "typechecker/invocation/invocation_generics.2.abra", assertions: "typechecker/invocation/invocation_generics.2.out.json" },
  { test: "typechecker/invocation/invocation_generics.3.abra", assertions: "typechecker/invocation/invocation_generics.3.out.json" },
  { test: "typechecker/invocation/invocation_generics.4.abra", assertions: "typechecker/invocation/invocation_generics.4.out.json" },
  { test: "typechecker/invocation/invocation_generics.5.abra", assertions: "typechecker/invocation/invocation_generics.5.out.json" },
  { test: "typechecker/invocation/generics_error_inferred_from_ret.1.abra", assertions: "typechecker/invocation/generics_error_inferred_from_ret.1.out" },
  { test: "typechecker/invocation/generics_error_inferred_from_ret.2.abra", assertions: "typechecker/invocation/generics_error_inferred_from_ret.2.out" },
  { test: "typechecker/invocation/generics_error_type_mismatch.abra", assertions: "typechecker/invocation/generics_error_type_mismatch.out" },
  { test: "typechecker/invocation/generics_error_unfilled_holes.abra", assertions: "typechecker/invocation/generics_error_unfilled_holes.out" },
  { test: "typechecker/invocation/generics_given_error_type_mismatch.abra", assertions: "typechecker/invocation/generics_given_error_type_mismatch.out" },
  { test: "typechecker/invocation/error_field_not_callable.abra", assertions: "typechecker/invocation/error_field_not_callable.out" },
  { test: "typechecker/invocation/error_instantiation_generics.1.abra", assertions: "typechecker/invocation/error_instantiation_generics.1.out" },
  { test: "typechecker/invocation/error_instantiation_generics.2.abra", assertions: "typechecker/invocation/error_instantiation_generics.2.out" },
  { test: "typechecker/invocation/error_instantiation_missing_labels.abra", assertions: "typechecker/invocation/error_instantiation_missing_labels.out" },
  { test: "typechecker/invocation/error_instantiation_too_few_args.1.abra", assertions: "typechecker/invocation/error_instantiation_too_few_args.1.out" },
  { test: "typechecker/invocation/error_instantiation_too_few_args.2.abra", assertions: "typechecker/invocation/error_instantiation_too_few_args.2.out" },
  { test: "typechecker/invocation/error_instantiation_non_pub_field.abra", assertions: "typechecker/invocation/error_instantiation_non_pub_field.out" },
  { test: "typechecker/invocation/error_enum_variant_constant.abra", assertions: "typechecker/invocation/error_enum_variant_constant.out" },
  { test: "typechecker/invocation/invocation_arbitrary_expr.1.abra", assertions: "typechecker/invocation/invocation_arbitrary_expr.1.out.json" },
  { test: "typechecker/invocation/invocation_arbitrary_expr.2.abra", assertions: "typechecker/invocation/invocation_arbitrary_expr.2.out.json" },
  { test: "typechecker/invocation/invocation_field.abra", assertions: "typechecker/invocation/invocation_field.out.json" },
  { test: "typechecker/invocation/invocation_instantiation.1.abra", assertions: "typechecker/invocation/invocation_instantiation.1.out.json" },
  { test: "typechecker/invocation/invocation_instantiation_generics.1.abra", assertions: "typechecker/invocation/invocation_instantiation_generics.1.out.json" },
  { test: "typechecker/invocation/invocation_instantiation_generics.2.abra", assertions: "typechecker/invocation/invocation_instantiation_generics.2.out.json" },
  { test: "typechecker/invocation/invocation_method.1.abra", assertions: "typechecker/invocation/invocation_method.1.out.json" },
  { test: "typechecker/invocation/invocation_method.2.abra", assertions: "typechecker/invocation/invocation_method.2.out.json" },
  { test: "typechecker/invocation/generics_error_method.1.abra", assertions: "typechecker/invocation/generics_error_method.1.out" },
  { test: "typechecker/invocation/generics_error_method.2.abra", assertions: "typechecker/invocation/generics_error_method.2.out" },
  { test: "typechecker/invocation/generics_error_field.1.abra", assertions: "typechecker/invocation/generics_error_field.1.out" },
  { test: "typechecker/invocation/invocation_method_generics.1.abra", assertions: "typechecker/invocation/invocation_method_generics.1.out.json" },
  { test: "typechecker/invocation/invocation_method_generics.2.abra", assertions: "typechecker/invocation/invocation_method_generics.2.out.json" },
  { test: "typechecker/invocation/invocation_enum_variant.1.abra", assertions: "typechecker/invocation/invocation_enum_variant.1.out.json" },
  { test: "typechecker/invocation/invocation_enum_variant.2.abra", assertions: "typechecker/invocation/invocation_enum_variant.2.out.json" },
  { test: "typechecker/invocation/invocation_enum_variant.3.abra", assertions: "typechecker/invocation/invocation_enum_variant.3.out.json" },
  { test: "typechecker/invocation/invocation_enum_variant.4.abra", assertions: "typechecker/invocation/invocation_enum_variant.4.out.json" },
  { test: "typechecker/invocation/invocation_field_generics.1.abra", assertions: "typechecker/invocation/invocation_field_generics.1.out.json" },
  { test: "typechecker/invocation/error_variadic_generic_type_mismatch.abra", assertions: "typechecker/invocation/error_variadic_generic_type_mismatch.out" },
  { test: "typechecker/invocation/error_variadic_labeled_generic_type_mismatch.abra", assertions: "typechecker/invocation/error_variadic_labeled_generic_type_mismatch.out" },
  { test: "typechecker/invocation/error_variadic_labeled_too_many_args.abra", assertions: "typechecker/invocation/error_variadic_labeled_too_many_args.out" },
  { test: "typechecker/invocation/error_variadic_labeled_type_mismatch.abra", assertions: "typechecker/invocation/error_variadic_labeled_type_mismatch.out" },
  { test: "typechecker/invocation/error_variadic_type_mismatch.abra", assertions: "typechecker/invocation/error_variadic_type_mismatch.out" },
  { test: "typechecker/invocation/invocation_variadic.1.abra", assertions: "typechecker/invocation/invocation_variadic.1.out.json" },
  { test: "typechecker/invocation/invocation_variadic.2.abra", assertions: "typechecker/invocation/invocation_variadic.2.out.json" },
  // Accessor
  { test: "typechecker/accessor/accessor.1.abra", assertions: "typechecker/accessor/accessor.1.out.json" },
  { test: "typechecker/accessor/accessor.2.abra", assertions: "typechecker/accessor/accessor.2.out.json" },
  { test: "typechecker/accessor/accessor.3.abra", assertions: "typechecker/accessor/accessor.3.out.json" },
  { test: "typechecker/accessor/error_non_pub_field.abra", assertions: "typechecker/accessor/error_non_pub_field.out" },
  { test: "typechecker/accessor/error_unknown_field.abra", assertions: "typechecker/accessor/error_unknown_field.out" },
  { test: "typechecker/accessor/error_unknown_field_fn.abra", assertions: "typechecker/accessor/error_unknown_field_fn.out" },
  { test: "typechecker/accessor/error_unknown_field_opt_known.abra", assertions: "typechecker/accessor/error_unknown_field_opt_known.out" },
  { test: "typechecker/accessor/error_unknown_field_opt_unknown.abra", assertions: "typechecker/accessor/error_unknown_field_opt_unknown.out" },
  { test: "typechecker/accessor/error_unknown_field_unit.abra", assertions: "typechecker/accessor/error_unknown_field_unit.out" },
  { test: "typechecker/accessor/error_unnecessary_optsafe.abra", assertions: "typechecker/accessor/error_unnecessary_optsafe.out" },
  { test: "typechecker/accessor/error_unknown_field_chain_opt_known.abra", assertions: "typechecker/accessor/error_unknown_field_chain_opt_known.out" },
  { test: "typechecker/accessor/error_unknown_field_chain_opt_unknown.abra", assertions: "typechecker/accessor/error_unknown_field_chain_opt_unknown.out" },
  { test: "typechecker/accessor/error_static_member_referenced_by_instance.abra", assertions: "typechecker/accessor/error_static_member_referenced_by_instance.out" },
  { test: "typechecker/accessor/accessor.4.abra", assertions: "typechecker/accessor/accessor.4.out.json" },
  { test: "typechecker/accessor/error_unknown_enum_variant.1.abra", assertions: "typechecker/accessor/error_unknown_enum_variant.1.out" },
  // Lambda
  { test: "typechecker/lambda/lambda.1.abra", assertions: "typechecker/lambda/lambda.1.out.json" },
  { test: "typechecker/lambda/lambda.2.abra", assertions: "typechecker/lambda/lambda.2.out.json" },
  { test: "typechecker/lambda/lambda_generic_inference.1.abra", assertions: "typechecker/lambda/lambda_generic_inference.1.out.json" },
  { test: "typechecker/lambda/lambda_generic_inference.2.abra", assertions: "typechecker/lambda/lambda_generic_inference.2.out.json" },
  { test: "typechecker/lambda/error_type_mismatch.1.abra", assertions: "typechecker/lambda/error_type_mismatch.1.out" },
  { test: "typechecker/lambda/error_type_mismatch.2.abra", assertions: "typechecker/lambda/error_type_mismatch.2.out" },
  { test: "typechecker/lambda/error_type_mismatch.3.abra", assertions: "typechecker/lambda/error_type_mismatch.3.out" },
  { test: "typechecker/lambda/error_type_mismatch.4.abra", assertions: "typechecker/lambda/error_type_mismatch.4.out" },
  { test: "typechecker/lambda/error_type_mismatch.5.abra", assertions: "typechecker/lambda/error_type_mismatch.5.out" },
  { test: "typechecker/lambda/error_unknown_type_for_parameter.1.abra", assertions: "typechecker/lambda/error_unknown_type_for_parameter.1.out" },
  { test: "typechecker/lambda/error_unknown_type_for_parameter.2.abra", assertions: "typechecker/lambda/error_unknown_type_for_parameter.2.out" },
  { test: "typechecker/lambda/error_unknown_type_for_parameter.3.abra", assertions: "typechecker/lambda/error_unknown_type_for_parameter.3.out" },
  // Try
  { test: "typechecker/try/try.1.abra", assertions: "typechecker/try/try.1.out.json" },
  { test: "typechecker/try/try.2.abra", assertions: "typechecker/try/try.2.out.json" },
  { test: "typechecker/try/try.3.abra", assertions: "typechecker/try/try.3.out.json" },
  { test: "typechecker/try/try.4.abra", assertions: "typechecker/try/try.4.out.json" },
  { test: "typechecker/try/try.5.abra", assertions: "typechecker/try/try.5.out.json" },
  { test: "typechecker/try/try.6.abra", assertions: "typechecker/try/try.6.out.json" },
  { test: "typechecker/try/error_bad_location.1.abra", assertions: "typechecker/try/error_bad_location.1.out" },
  { test: "typechecker/try/error_bad_location.2.abra", assertions: "typechecker/try/error_bad_location.2.out" },
  { test: "typechecker/try/error_bad_return_type_result.abra", assertions: "typechecker/try/error_bad_return_type_result.out" },
  { test: "typechecker/try/error_bad_return_type_option.abra", assertions: "typechecker/try/error_bad_return_type_option.out" },
  { test: "typechecker/try/error_return_type_err_mismatch.abra", assertions: "typechecker/try/error_return_type_err_mismatch.out" },
  { test: "typechecker/try/error_return_type_err_mismatch_generic.abra", assertions: "typechecker/try/error_return_type_err_mismatch_generic.out" },
  { test: "typechecker/try/error_untryable_type.abra", assertions: "typechecker/try/error_untryable_type.out" },
  { test: "typechecker/try/error_else_bad_destructuring.abra", assertions: "typechecker/try/error_else_bad_destructuring.out" },
  { test: "typechecker/try/error_else_block_empty.abra", assertions: "typechecker/try/error_else_block_empty.out" },
  { test: "typechecker/try/error_else_return_type_mismatch.1.abra", assertions: "typechecker/try/error_else_return_type_mismatch.1.out" },
  { test: "typechecker/try/error_else_return_type_mismatch.2.abra", assertions: "typechecker/try/error_else_return_type_mismatch.2.out" },
  { test: "typechecker/try/error_else_return_type_mismatch.3.abra", assertions: "typechecker/try/error_else_return_type_mismatch.3.out" },
  { test: "typechecker/try/error_else_return_type_mismatch.4.abra", assertions: "typechecker/try/error_else_return_type_mismatch.4.out" },
  { test: "typechecker/try/error_else_type_mismatch.abra", assertions: "typechecker/try/error_else_type_mismatch.out" },

  // Type identifiers
  { test: "typechecker/typeidentifier/error_typearg_unknown.abra", assertions: "typechecker/typeidentifier/error_typearg_unknown.out" },
  { test: "typechecker/typeidentifier/error_typeargs_missing.abra", assertions: "typechecker/typeidentifier/error_typeargs_missing.out" },
  { test: "typechecker/typeidentifier/error_typeargs_too_few.abra", assertions: "typechecker/typeidentifier/error_typeargs_too_few.out" },
  { test: "typechecker/typeidentifier/error_typeargs_too_many.abra", assertions: "typechecker/typeidentifier/error_typeargs_too_many.out" },
  { test: "typechecker/typeidentifier/error_typeargs_unexpected.abra", assertions: "typechecker/typeidentifier/error_typeargs_unexpected.out" },
  { test: "typechecker/typeidentifier/error_unknown_type.abra", assertions: "typechecker/typeidentifier/error_unknown_type.out" },
  { test: "typechecker/typeidentifier/error_modalias_name_not_type.abra", assertions: "typechecker/typeidentifier/error_modalias_name_not_type.out" },
  { test: "typechecker/typeidentifier/error_modalias_path_too_long.abra", assertions: "typechecker/typeidentifier/error_modalias_path_too_long.out" },
  { test: "typechecker/typeidentifier/error_modalias_typeargs_missing.abra", assertions: "typechecker/typeidentifier/error_modalias_typeargs_missing.out" },
  { test: "typechecker/typeidentifier/error_modalias_typeargs_too_few.abra", assertions: "typechecker/typeidentifier/error_modalias_typeargs_too_few.out" },
  { test: "typechecker/typeidentifier/error_modalias_typeargs_too_many.abra", assertions: "typechecker/typeidentifier/error_modalias_typeargs_too_many.out" },
  { test: "typechecker/typeidentifier/error_modalias_typeargs_unexpected.abra", assertions: "typechecker/typeidentifier/error_modalias_typeargs_unexpected.out" },
  { test: "typechecker/typeidentifier/error_modalias_unknown_module.abra", assertions: "typechecker/typeidentifier/error_modalias_unknown_module.out" },
  { test: "typechecker/typeidentifier/error_modalias_unknown_type.abra", assertions: "typechecker/typeidentifier/error_modalias_unknown_type.out" },

  // Assignment
  { test: "typechecker/assignment/assignment_accessor.abra", assertions: "typechecker/assignment/assignment_accessor.out.json" },
  { test: "typechecker/assignment/assignment_indexing.abra", assertions: "typechecker/assignment/assignment_indexing.out.json" },
  { test: "typechecker/assignment/assignment_variable.abra", assertions: "typechecker/assignment/assignment_variable.out.json" },
  { test: "typechecker/assignment/accessor_error_method.1.abra", assertions: "typechecker/assignment/accessor_error_method.1.out" },
  { test: "typechecker/assignment/accessor_error_method.2.abra", assertions: "typechecker/assignment/accessor_error_method.2.out" },
  { test: "typechecker/assignment/accessor_error_enum_variant.abra", assertions: "typechecker/assignment/accessor_error_enum_variant.out" },
  { test: "typechecker/assignment/accessor_error_type_mismatch.1.abra", assertions: "typechecker/assignment/accessor_error_type_mismatch.1.out" },
  { test: "typechecker/assignment/accessor_error_type_mismatch.2.abra", assertions: "typechecker/assignment/accessor_error_type_mismatch.2.out" },
  { test: "typechecker/assignment/variable_error_alias_fn.abra", assertions: "typechecker/assignment/variable_error_alias_fn.out" },
  { test: "typechecker/assignment/indexing_error_type_mismatch.1.abra", assertions: "typechecker/assignment/indexing_error_type_mismatch.1.out" },
  { test: "typechecker/assignment/indexing_error_type_mismatch.2.abra", assertions: "typechecker/assignment/indexing_error_type_mismatch.2.out" },
  { test: "typechecker/assignment/variable_error_alias_type.abra", assertions: "typechecker/assignment/variable_error_alias_type.out" },
  { test: "typechecker/assignment/variable_error_immutable.abra", assertions: "typechecker/assignment/variable_error_immutable.out" },
  { test: "typechecker/assignment/variable_error_type_mismatch.1.abra", assertions: "typechecker/assignment/variable_error_type_mismatch.1.out" },
  { test: "typechecker/assignment/variable_error_type_mismatch.2.abra", assertions: "typechecker/assignment/variable_error_type_mismatch.2.out" },
  { test: "typechecker/assignment/variable_error_unknown.abra", assertions: "typechecker/assignment/variable_error_unknown.out" },

  // Break
  { test: "typechecker/break/break_as_expr.abra", assertions: "typechecker/break/break_as_expr.out.json" },
  { test: "typechecker/break/error_location_module.abra", assertions: "typechecker/break/error_location_module.out" },
  { test: "typechecker/break/error_location_module_func.abra", assertions: "typechecker/break/error_location_module_func.out" },
  { test: "typechecker/break/error_location_module_if.abra", assertions: "typechecker/break/error_location_module_if.out" },
  { test: "typechecker/break/error_unreachable_inside_while.abra", assertions: "typechecker/break/error_unreachable_inside_while.out" },
  { test: "typechecker/break/error_unreachable_inside_for.abra", assertions: "typechecker/break/error_unreachable_inside_for.out" },
  // Continue
  { test: "typechecker/continue/continue_as_expr.abra", assertions: "typechecker/continue/continue_as_expr.out.json" },
  { test: "typechecker/continue/error_location_module.abra", assertions: "typechecker/continue/error_location_module.out" },
  { test: "typechecker/continue/error_location_module_func.abra", assertions: "typechecker/continue/error_location_module_func.out" },
  { test: "typechecker/continue/error_location_module_if.abra", assertions: "typechecker/continue/error_location_module_if.out" },
  { test: "typechecker/continue/error_unreachable_inside_while.abra", assertions: "typechecker/continue/error_unreachable_inside_while.out" },
  { test: "typechecker/continue/error_unreachable_inside_for.abra", assertions: "typechecker/continue/error_unreachable_inside_for.out" },
  // While
  { test: "typechecker/while/while.1.abra", assertions: "typechecker/while/while.1.out.json" },
  { test: "typechecker/while/while.2.abra", assertions: "typechecker/while/while.2.out.json" },
  { test: "typechecker/while/while.3.abra", assertions: "typechecker/while/while.3.out.json" },
  { test: "typechecker/while/while.4.abra", assertions: "typechecker/while/while.4.out.json" },
  { test: "typechecker/while/error_bad_cond_type.abra", assertions: "typechecker/while/error_bad_cond_type.out" },
  { test: "typechecker/while/error_condition_invalid_destructuring_tuple.abra", assertions: "typechecker/while/error_condition_invalid_destructuring_tuple.out" },

  // For
  { test: "typechecker/for/for.1.abra", assertions: "typechecker/for/for.1.out.json" },
  { test: "typechecker/for/for.2.abra", assertions: "typechecker/for/for.2.out.json" },
  { test: "typechecker/for/for.3.abra", assertions: "typechecker/for/for.3.out.json" },
  { test: "typechecker/for/for.4.abra", assertions: "typechecker/for/for.4.out.json" },
  { test: "typechecker/for/error_bad_iterator_option_type.abra", assertions: "typechecker/for/error_bad_iterator_option_type.out" },
  { test: "typechecker/for/error_bad_iterator.abra", assertions: "typechecker/for/error_bad_iterator.out" },
  { test: "typechecker/for/error_bad_range_end.abra", assertions: "typechecker/for/error_bad_range_end.out" },
  { test: "typechecker/for/error_bad_range_start.abra", assertions: "typechecker/for/error_bad_range_start.out" },
  { test: "typechecker/for/error_bad_iterator_unfilled_hole.abra", assertions: "typechecker/for/error_bad_iterator_unfilled_hole.out" },
  { test: "typechecker/for/error_duplicate_ident.abra", assertions: "typechecker/for/error_duplicate_ident.out" },
  { test: "typechecker/for/error_iteratee_invalid_destructuring_tuple.abra", assertions: "typechecker/for/error_iteratee_invalid_destructuring_tuple.out" },
  // Binding declaration
  { test: "typechecker/bindingdecl/bindingdecl.abra", assertions: "typechecker/bindingdecl/bindingdecl.out.json" },
  { test: "typechecker/bindingdecl/bindingdecl_exported.abra", assertions: "typechecker/bindingdecl/bindingdecl_exported.out.json" },
  { test: "typechecker/bindingdecl/error_bare_var.abra", assertions: "typechecker/bindingdecl/error_bare_var.out" },
  { test: "typechecker/bindingdecl/error_duplicate_name.abra", assertions: "typechecker/bindingdecl/error_duplicate_name.out" },
  { test: "typechecker/bindingdecl/error_invalid_destructuring_tuple_non_tuple.1.abra", assertions: "typechecker/bindingdecl/error_invalid_destructuring_tuple_non_tuple.1.out" },
  { test: "typechecker/bindingdecl/error_invalid_destructuring_tuple_non_tuple.2.abra", assertions: "typechecker/bindingdecl/error_invalid_destructuring_tuple_non_tuple.2.out" },
  { test: "typechecker/bindingdecl/error_invalid_destructuring_tuple_non_tuple.3.abra", assertions: "typechecker/bindingdecl/error_invalid_destructuring_tuple_non_tuple.3.out" },
  { test: "typechecker/bindingdecl/error_invalid_destructuring_tuple_too_few.1.abra", assertions: "typechecker/bindingdecl/error_invalid_destructuring_tuple_too_few.1.out" },
  { test: "typechecker/bindingdecl/error_invalid_destructuring_tuple_too_few.2.abra", assertions: "typechecker/bindingdecl/error_invalid_destructuring_tuple_too_few.2.out" },
  { test: "typechecker/bindingdecl/error_invalid_destructuring_tuple_too_many.1.abra", assertions: "typechecker/bindingdecl/error_invalid_destructuring_tuple_too_many.1.out" },
  { test: "typechecker/bindingdecl/error_invalid_destructuring_tuple_too_many.2.abra", assertions: "typechecker/bindingdecl/error_invalid_destructuring_tuple_too_many.2.out" },
  { test: "typechecker/bindingdecl/error_type_mismatch_val_destructured_tuple.abra", assertions: "typechecker/bindingdecl/error_type_mismatch_val_destructured_tuple.out" },
  { test: "typechecker/bindingdecl/error_uninitialized_val_destructured_tuple_no_annotation.abra", assertions: "typechecker/bindingdecl/error_uninitialized_val_destructured_tuple_no_annotation.out" },
  { test: "typechecker/bindingdecl/error_uninitialized_val_destructured_tuple_with_annotation.abra", assertions: "typechecker/bindingdecl/error_uninitialized_val_destructured_tuple_with_annotation.out" },
  { test: "typechecker/bindingdecl/error_uninitialized_val_no_annotation.abra", assertions: "typechecker/bindingdecl/error_uninitialized_val_no_annotation.out" },
  { test: "typechecker/bindingdecl/error_uninitialized_val_with_annotation.abra", assertions: "typechecker/bindingdecl/error_uninitialized_val_with_annotation.out" },
  { test: "typechecker/bindingdecl/error_type_mismatch_val.abra", assertions: "typechecker/bindingdecl/error_type_mismatch_val.out" },
  { test: "typechecker/bindingdecl/error_type_mismatch_var.abra", assertions: "typechecker/bindingdecl/error_type_mismatch_var.out" },
  { test: "typechecker/bindingdecl/error_type_mismatch_option.abra", assertions: "typechecker/bindingdecl/error_type_mismatch_option.out" },
  { test: "typechecker/bindingdecl/error_unfilled_holes.abra", assertions: "typechecker/bindingdecl/error_unfilled_holes.out" },
  { test: "typechecker/bindingdecl/error_illegal_value_type_enum.abra", assertions: "typechecker/bindingdecl/error_illegal_value_type_enum.out" },
  { test: "typechecker/bindingdecl/error_illegal_value_type_enum_container_variant.abra", assertions: "typechecker/bindingdecl/error_illegal_value_type_enum_container_variant.out" },
  { test: "typechecker/bindingdecl/error_illegal_value_type_type.abra", assertions: "typechecker/bindingdecl/error_illegal_value_type_type.out" },
  { test: "typechecker/bindingdecl/error_export_bad_scope.abra", assertions: "typechecker/bindingdecl/error_export_bad_scope.out" },
  // Function declaration
  { test: "typechecker/funcdecl/funcdecl.1.abra", assertions: "typechecker/funcdecl/funcdecl.1.out.json" },
  { test: "typechecker/funcdecl/funcdecl.2.abra", assertions: "typechecker/funcdecl/funcdecl.2.out.json" },
  { test: "typechecker/funcdecl/funcdecl.3.abra", assertions: "typechecker/funcdecl/funcdecl.3.out.json" },
  { test: "typechecker/funcdecl/funcdecl.4.abra", assertions: "typechecker/funcdecl/funcdecl.4.out.json" },
  { test: "typechecker/funcdecl/funcdecl.5.abra", assertions: "typechecker/funcdecl/funcdecl.5.out.json" },
  { test: "typechecker/funcdecl/funcdecl.6.abra", assertions: "typechecker/funcdecl/funcdecl.6.out.json" },
  { test: "typechecker/funcdecl/funcdecl.7.abra", assertions: "typechecker/funcdecl/funcdecl.7.out.json" },
  { test: "typechecker/funcdecl/funcdecl_exported.abra", assertions: "typechecker/funcdecl/funcdecl_exported.out.json" },
  { test: "typechecker/funcdecl/funcdecl_generics.abra", assertions: "typechecker/funcdecl/funcdecl_generics.out.json" },
  { test: "typechecker/funcdecl/error_duplicate_func.abra", assertions: "typechecker/funcdecl/error_duplicate_func.out" },
  { test: "typechecker/funcdecl/error_duplicate_param.abra", assertions: "typechecker/funcdecl/error_duplicate_param.out" },
  { test: "typechecker/funcdecl/error_duplicate_variable.abra", assertions: "typechecker/funcdecl/error_duplicate_variable.out" },
  { test: "typechecker/funcdecl/error_invalid_param_type.abra", assertions: "typechecker/funcdecl/error_invalid_param_type.out" },
  { test: "typechecker/funcdecl/error_invalid_req_param_position.abra", assertions: "typechecker/funcdecl/error_invalid_req_param_position.out" },
  { test: "typechecker/funcdecl/error_invalid_return_type.abra", assertions: "typechecker/funcdecl/error_invalid_return_type.out" },
  { test: "typechecker/funcdecl/error_invalid_vararg_position.abra", assertions: "typechecker/funcdecl/error_invalid_vararg_position.out" },
  { test: "typechecker/funcdecl/error_invalid_vararg_type.abra", assertions: "typechecker/funcdecl/error_invalid_vararg_type.out" },
  { test: "typechecker/funcdecl/error_param_unfilled_holes.1.abra", assertions: "typechecker/funcdecl/error_param_unfilled_holes.1.out" },
  { test: "typechecker/funcdecl/error_param_unfilled_holes.2.abra", assertions: "typechecker/funcdecl/error_param_unfilled_holes.2.out" },
  { test: "typechecker/funcdecl/error_type_mismatch_param_default_value.1.abra", assertions: "typechecker/funcdecl/error_type_mismatch_param_default_value.1.out" },
  { test: "typechecker/funcdecl/error_type_mismatch_param_default_value.2.abra", assertions: "typechecker/funcdecl/error_type_mismatch_param_default_value.2.out" },
  { test: "typechecker/funcdecl/error_type_mismatch_param_default_value.3.abra", assertions: "typechecker/funcdecl/error_type_mismatch_param_default_value.3.out" },
  { test: "typechecker/funcdecl/error_type_mismatch_param_default_value.4.abra", assertions: "typechecker/funcdecl/error_type_mismatch_param_default_value.4.out" },
  { test: "typechecker/funcdecl/error_alias_type_mismatch.abra", assertions: "typechecker/funcdecl/error_alias_type_mismatch.out" },
  { test: "typechecker/funcdecl/error_invalid_vararg_type_option.abra", assertions: "typechecker/funcdecl/error_invalid_vararg_type_option.out" },
  { test: "typechecker/funcdecl/error_param_default_value_ident.abra", assertions: "typechecker/funcdecl/error_param_default_value_ident.out" },
  { test: "typechecker/funcdecl/error_return_type_mismatch.abra", assertions: "typechecker/funcdecl/error_return_type_mismatch.out" },
  { test: "typechecker/funcdecl/error_return_type_mismatch_empty.abra", assertions: "typechecker/funcdecl/error_return_type_mismatch_empty.out" },
  { test: "typechecker/funcdecl/error_return_type_mismatch_stmt.abra", assertions: "typechecker/funcdecl/error_return_type_mismatch_stmt.out" },
  { test: "typechecker/funcdecl/default_param_value_call.1.abra", assertions: "typechecker/funcdecl/default_param_value_call.1.out.json" },
  { test: "typechecker/funcdecl/default_param_value_call.2.abra", assertions: "typechecker/funcdecl/default_param_value_call.2.out.json" },
  { test: "typechecker/funcdecl/default_param_value_call.3.abra", assertions: "typechecker/funcdecl/default_param_value_call.3.out.json" },
  { test: "typechecker/funcdecl/default_param_value_call.4.abra", assertions: "typechecker/funcdecl/default_param_value_call.4.out.json" },
  { test: "typechecker/funcdecl/default_param_value_call.5.abra", assertions: "typechecker/funcdecl/default_param_value_call.5.out.json" },
  { test: "typechecker/funcdecl/default_param_value_call.6.abra", assertions: "typechecker/funcdecl/default_param_value_call.6.out.json" },
  { test: "typechecker/funcdecl/default_param_value_call.7.abra", assertions: "typechecker/funcdecl/default_param_value_call.7.out.json" },
  { test: "typechecker/funcdecl/default_param_value_call.8.abra", assertions: "typechecker/funcdecl/default_param_value_call.8.out.json" },
  { test: "typechecker/funcdecl/default_param_value_call.9.abra", assertions: "typechecker/funcdecl/default_param_value_call.9.out.json" },
  { test: "typechecker/funcdecl/default_param_value_accessor.abra", assertions: "typechecker/funcdecl/default_param_value_accessor.out.json" },
  { test: "typechecker/funcdecl/error_self_standalone.abra", assertions: "typechecker/funcdecl/error_self_standalone.out" },
  { test: "typechecker/funcdecl/error_generics_param_type_mismatch.abra", assertions: "typechecker/funcdecl/error_generics_param_type_mismatch.out" },
  { test: "typechecker/funcdecl/error_generics_return_type_mismatch.abra", assertions: "typechecker/funcdecl/error_generics_return_type_mismatch.out" },

  // Type declaration
  { test: "typechecker/typedecl/typedecl_exported.abra", assertions: "typechecker/typedecl/typedecl_exported.out.json" },
  { test: "typechecker/typedecl/typedecl.1.abra", assertions: "typechecker/typedecl/typedecl.1.out.json" },
  { test: "typechecker/typedecl/typedecl.2.abra", assertions: "typechecker/typedecl/typedecl.2.out.json" },
  { test: "typechecker/typedecl/typedecl.3.abra", assertions: "typechecker/typedecl/typedecl.3.out.json" },
  { test: "typechecker/typedecl/error_duplicate_field.abra", assertions: "typechecker/typedecl/error_duplicate_field.out" },
  { test: "typechecker/typedecl/error_method_bad_self_position.abra", assertions: "typechecker/typedecl/error_method_bad_self_position.out" },
  { test: "typechecker/typedecl/error_field_initializer_type_mismatch.abra", assertions: "typechecker/typedecl/error_field_initializer_type_mismatch.out" },
  { test: "typechecker/typedecl/error_invalid_eq_signature.1.abra", assertions: "typechecker/typedecl/error_invalid_eq_signature.1.out" },
  { test: "typechecker/typedecl/error_invalid_eq_signature.2.abra", assertions: "typechecker/typedecl/error_invalid_eq_signature.2.out" },
  { test: "typechecker/typedecl/error_invalid_hash_signature.abra", assertions: "typechecker/typedecl/error_invalid_hash_signature.out" },
  { test: "typechecker/typedecl/error_invalid_tostring_signature.abra", assertions: "typechecker/typedecl/error_invalid_tostring_signature.out" },
  { test: "typechecker/typedecl/error_duplicate_type_func.abra", assertions: "typechecker/typedecl/error_duplicate_type_func.out" },
  { test: "typechecker/typedecl/error_duplicate_type_type.abra", assertions: "typechecker/typedecl/error_duplicate_type_type.out" },
  { test: "typechecker/typedecl/error_duplicate_type_enum.abra", assertions: "typechecker/typedecl/error_duplicate_type_enum.out" },
  // Enum declaration
  { test: "typechecker/enumdecl/enumdecl_exported.abra", assertions: "typechecker/enumdecl/enumdecl_exported.out.json" },
  { test: "typechecker/enumdecl/enumdecl.1.abra", assertions: "typechecker/enumdecl/enumdecl.1.out.json" },
  { test: "typechecker/enumdecl/enumdecl_Result_shorthand.abra", assertions: "typechecker/enumdecl/enumdecl_Result_shorthand.out.json" },
  { test: "typechecker/enumdecl/error_duplicate_enum_enum.abra", assertions: "typechecker/enumdecl/error_duplicate_enum_enum.out" },
  { test: "typechecker/enumdecl/error_duplicate_enum_func.abra", assertions: "typechecker/enumdecl/error_duplicate_enum_func.out" },
  { test: "typechecker/enumdecl/error_duplicate_enum_type.abra", assertions: "typechecker/enumdecl/error_duplicate_enum_type.out" },
  { test: "typechecker/enumdecl/error_duplicate_variant.abra", assertions: "typechecker/enumdecl/error_duplicate_variant.out" },
  { test: "typechecker/enumdecl/error_duplicate_variant_field.abra", assertions: "typechecker/enumdecl/error_duplicate_variant_field.out" },
  { test: "typechecker/enumdecl/error_invalid_eq_signature.1.abra", assertions: "typechecker/enumdecl/error_invalid_eq_signature.1.out" },
  { test: "typechecker/enumdecl/error_invalid_eq_signature.2.abra", assertions: "typechecker/enumdecl/error_invalid_eq_signature.2.out" },
  { test: "typechecker/enumdecl/error_invalid_hash_signature.abra", assertions: "typechecker/enumdecl/error_invalid_hash_signature.out" },
  { test: "typechecker/enumdecl/error_invalid_tostring_signature.abra", assertions: "typechecker/enumdecl/error_invalid_tostring_signature.out" },
  { test: "typechecker/enumdecl/error_method_bad_self_position.abra", assertions: "typechecker/enumdecl/error_method_bad_self_position.out" },
  { test: "typechecker/enumdecl/error_variant_field_initializer_type_mismatch.abra", assertions: "typechecker/enumdecl/error_variant_field_initializer_type_mismatch.out" },
  // Decorator declaration
  { test: "typechecker/decorators/error_enum_as_decorator.abra", assertions: "typechecker/decorators/error_enum_as_decorator.out" },
  { test: "typechecker/decorators/error_noncomptime_field.abra", assertions: "typechecker/decorators/error_noncomptime_field.out" },
  { test: "typechecker/decorators/error_too_few_args.abra", assertions: "typechecker/decorators/error_too_few_args.out" },
  { test: "typechecker/decorators/error_too_many_args.abra", assertions: "typechecker/decorators/error_too_many_args.out" },
  { test: "typechecker/decorators/error_type_as_decorator.abra", assertions: "typechecker/decorators/error_type_as_decorator.out" },
  { test: "typechecker/decorators/error_unlabeled_args.abra", assertions: "typechecker/decorators/error_unlabeled_args.out" },
  { test: "typechecker/decorators/function_decorator.abra", assertions: "typechecker/decorators/function_decorator.out.json" },

  // Returns
  { test: "typechecker/return/return.1.abra", assertions: "typechecker/return/return.1.out.json" },
  { test: "typechecker/return/return.2.abra", assertions: "typechecker/return/return.2.out.json" },
  { test: "typechecker/return/return.3.abra", assertions: "typechecker/return/return.3.out.json" },
  { test: "typechecker/return/as_expr_error_never.abra", assertions: "typechecker/return/as_expr_error_never.out" },
  { test: "typechecker/return/error_location.abra", assertions: "typechecker/return/error_location.out" },
  { test: "typechecker/return/error_type_mismatch.1.abra", assertions: "typechecker/return/error_type_mismatch.1.out" },
  { test: "typechecker/return/error_type_mismatch.2.abra", assertions: "typechecker/return/error_type_mismatch.2.out" },
  { test: "typechecker/return/error_type_mismatch.3.abra", assertions: "typechecker/return/error_type_mismatch.3.out" },
  { test: "typechecker/return/error_type_mismatch_unit.abra", assertions: "typechecker/return/error_type_mismatch_unit.out" },
  { test: "typechecker/return/error_unreachable_stmt_plain.abra", assertions: "typechecker/return/error_unreachable_stmt_plain.out" },
  { test: "typechecker/return/error_unreachable_stmt_if_inside.abra", assertions: "typechecker/return/error_unreachable_stmt_if_inside.out" },
  { test: "typechecker/return/error_unreachable_stmt_if_outside.abra", assertions: "typechecker/return/error_unreachable_stmt_if_outside.out" },
  { test: "typechecker/return/error_unreachable_stmt_match_inside.abra", assertions: "typechecker/return/error_unreachable_stmt_match_inside.out" },
  { test: "typechecker/return/error_unreachable_stmt_match_outside.abra", assertions: "typechecker/return/error_unreachable_stmt_match_outside.out" },
  { test: "typechecker/return/error_unreachable_stmt_while_inside.1.abra", assertions: "typechecker/return/error_unreachable_stmt_while_inside.1.out" },
  { test: "typechecker/return/error_unreachable_stmt_while_inside.2.abra", assertions: "typechecker/return/error_unreachable_stmt_while_inside.2.out" },
  { test: "typechecker/return/error_unreachable_stmt_while_outside.1.abra", assertions: "typechecker/return/error_unreachable_stmt_while_outside.1.out" },
  { test: "typechecker/return/error_unreachable_stmt_while_outside.2.abra", assertions: "typechecker/return/error_unreachable_stmt_while_outside.2.out" },
  { test: "typechecker/return/error_unreachable_stmt_for_inside.1.abra", assertions: "typechecker/return/error_unreachable_stmt_for_inside.1.out" },
  { test: "typechecker/return/error_unreachable_stmt_for_inside.2.abra", assertions: "typechecker/return/error_unreachable_stmt_for_inside.2.out" },
  { test: "typechecker/return/error_unreachable_stmt_for_outside.1.abra", assertions: "typechecker/return/error_unreachable_stmt_for_outside.1.out" },
  { test: "typechecker/return/error_unreachable_stmt_for_outside.2.abra", assertions: "typechecker/return/error_unreachable_stmt_for_outside.2.out" },

  // Imports
  { test: "typechecker/import/import.1.abra", assertions: "typechecker/import/import.1.out.json" },
  { test: "typechecker/import/import.2.abra", assertions: "typechecker/import/import.2.out.json" },
  { test: "typechecker/import/error_assignment_to_aliased_imported_variable.abra", assertions: "typechecker/import/error_assignment_to_aliased_imported_variable.out" },
  { test: "typechecker/import/error_assignment_to_imported_variable.abra", assertions: "typechecker/import/error_assignment_to_imported_variable.out" },
  { test: "typechecker/import/error_no_file_exists.abra", assertions: "typechecker/import/error_no_file_exists.out" },
  { test: "typechecker/import/error_nonrelative_not_found.abra", assertions: "typechecker/import/error_nonrelative_not_found.out" },
  { test: "typechecker/import/error_circular_dependency.1/mod.1.abra", assertions: "typechecker/import/error_circular_dependency.1/mod.1.out" },
  { test: "typechecker/import/error_circular_dependency.2/mod.1.abra", assertions: "typechecker/import/error_circular_dependency.2/mod.1.out" },
  { test: "typechecker/import/error_duplicate_import_name.1.abra", assertions: "typechecker/import/error_duplicate_import_name.1.out" },
  { test: "typechecker/import/error_duplicate_import_name.2.abra", assertions: "typechecker/import/error_duplicate_import_name.2.out" },
  { test: "typechecker/import/error_duplicate_variable_name.1.abra", assertions: "typechecker/import/error_duplicate_variable_name.1.out" },
  { test: "typechecker/import/error_duplicate_variable_name.2.abra", assertions: "typechecker/import/error_duplicate_variable_name.2.out" },
  { test: "typechecker/import/error_duplicate_func_name.1.abra", assertions: "typechecker/import/error_duplicate_func_name.1.out" },
  { test: "typechecker/import/error_duplicate_func_name.2.abra", assertions: "typechecker/import/error_duplicate_func_name.2.out" },
  { test: "typechecker/import/error_imported_value_type_mismatch.abra", assertions: "typechecker/import/error_imported_value_type_mismatch.out" },
  { test: "typechecker/import/error_no_exported_value.abra", assertions: "typechecker/import/error_no_exported_value.out" },
  { test: "typechecker/import/error_duplicate_enum_name.1.abra", assertions: "typechecker/import/error_duplicate_enum_name.1.out" },
  { test: "typechecker/import/error_duplicate_enum_name.2.abra", assertions: "typechecker/import/error_duplicate_enum_name.2.out" },
  { test: "typechecker/import/error_duplicate_enum_name.3.abra", assertions: "typechecker/import/error_duplicate_enum_name.3.out" },
  { test: "typechecker/import/error_duplicate_enum_name.4.abra", assertions: "typechecker/import/error_duplicate_enum_name.4.out" },
  { test: "typechecker/import/error_duplicate_func_name.3.abra", assertions: "typechecker/import/error_duplicate_func_name.3.out" },
  { test: "typechecker/import/error_duplicate_func_name.4.abra", assertions: "typechecker/import/error_duplicate_func_name.4.out" },
  { test: "typechecker/import/error_duplicate_import_name.3.abra", assertions: "typechecker/import/error_duplicate_import_name.3.out" },
  { test: "typechecker/import/error_duplicate_import_name.4.abra", assertions: "typechecker/import/error_duplicate_import_name.4.out" },
  { test: "typechecker/import/error_duplicate_type_name.1.abra", assertions: "typechecker/import/error_duplicate_type_name.1.out" },
  { test: "typechecker/import/error_duplicate_type_name.2.abra", assertions: "typechecker/import/error_duplicate_type_name.2.out" },
  { test: "typechecker/import/error_duplicate_type_name.3.abra", assertions: "typechecker/import/error_duplicate_type_name.3.out" },
  { test: "typechecker/import/error_duplicate_type_name.4.abra", assertions: "typechecker/import/error_duplicate_type_name.4.out" },
  { test: "typechecker/import/error_duplicate_variable_name.3.abra", assertions: "typechecker/import/error_duplicate_variable_name.3.out" },
  { test: "typechecker/import/error_duplicate_variable_name.4.abra", assertions: "typechecker/import/error_duplicate_variable_name.4.out" },
  { test: "typechecker/import/error_imported_type_mismatch.1.abra", assertions: "typechecker/import/error_imported_type_mismatch.1.out" },
  { test: "typechecker/import/import_type_identifier.1.abra", assertions: "typechecker/import/import_type_identifier.1.out.json" },
  { test: "typechecker/import/import_type_identifier.2.abra", assertions: "typechecker/import/import_type_identifier.2.out.json" },
  { test: "typechecker/import/error_alias_duplicate_name.abra", assertions: "typechecker/import/error_alias_duplicate_name.out" },
  { test: "typechecker/import/error_alias_questiondot_access.abra", assertions: "typechecker/import/error_alias_questiondot_access.out" },
  { test: "typechecker/import/error_alias_unknown_import.abra", assertions: "typechecker/import/error_alias_unknown_import.out" },

  // Testing error reporting
  { test: "typechecker/multi_error_reporting/bad_pub_location.abra", assertions: "typechecker/multi_error_reporting/bad_pub_location.out" },
  { test: "typechecker/multi_error_reporting/duplicate_toplevel_decls.abra", assertions: "typechecker/multi_error_reporting/duplicate_toplevel_decls.out" },
  { test: "typechecker/multi_error_reporting/imports.abra", assertions: "typechecker/multi_error_reporting/imports.out" },

  // Not typos; two assertions are run for these files to validate that the `CouldNotDetermine` type is passed around correctly and that the proper errors are surfaced
  { test: "typechecker/multi_error_reporting/could_not_resolve_types.abra", assertions: "typechecker/multi_error_reporting/could_not_resolve_types.out" },
  { test: "typechecker/multi_error_reporting/could_not_resolve_types.abra", assertions: "typechecker/multi_error_reporting/could_not_resolve_types.out.json", printModulesOnErr: true },

  { test: "typechecker/multi_error_reporting/binding_decl.abra", assertions: "typechecker/multi_error_reporting/binding_decl.out" },
  { test: "typechecker/multi_error_reporting/binding_decl.abra", assertions: "typechecker/multi_error_reporting/binding_decl.out.json", printModulesOnErr: true },
]

const COMPILER_TESTS = [
  { test: "compiler/ints.abra" },
  { test: "compiler/floats.abra" },
  { test: "compiler/bools.abra" },
  { test: "compiler/chars.abra" },
  { test: "compiler/strings.abra" },
  { test: "compiler/arrays.abra" },
  { test: "compiler/functions.abra" },
  { test: "compiler/optionals.abra" },
  { test: "compiler/ifs.abra" },
  { test: "compiler/loops.abra" },
  { test: "compiler/types.abra" },
  { test: "compiler/enums.abra" },
  { test: "compiler/tuples.abra" },
  { test: "compiler/maps.abra" },
  { test: "compiler/sets.abra" },
  { test: "compiler/match.abra" },
  { test: "compiler/try_result.abra" },
  { test: "compiler/try_option.abra" },
  { test: "compiler/process.abra", args: ['-f', 'bar', '--baz', 'qux'], env: { FOO: 'bar' } },
  { test: "compiler/process_callstack.abra" },
  { test: "compiler/json.abra" },
]

const IR_COMPILER_TESTS = [
  { test: "compiler/ints.abra" },
  { test: "compiler/floats.abra" },
  { test: "compiler/bools.abra" },
  { test: "compiler/chars.abra" },
  // { test: "compiler/strings.abra" },
  // { test: "compiler/arrays.abra" },
  { test: "compiler/functions.abra" },
  // { test: "compiler/optionals.abra" },
  { test: "compiler/ifs.abra" },
  { test: "compiler/loops.abra" },
  // { test: "compiler/types.abra" },
  // { test: "compiler/enums.abra" },
  { test: "compiler/tuples.abra" },
  // { test: "compiler/maps.abra" },
  // { test: "compiler/sets.abra" },
  // { test: "compiler/match.abra" },
  // { test: "compiler/try_result.abra" },
  // { test: "compiler/try_option.abra" },
  // { test: "compiler/process.abra", args: ['-f', 'bar', '--baz', 'qux'], env: { FOO: 'bar' } },
  // { test: "compiler/process_callstack.abra" },
  // { test: "compiler/json.abra" },
]

async function main() {
  let numPass = 0
  let numFail = 0
  let numErr = 0
  let numTests = 0

  const runners = [
    // {
    //   runner: new TestRunner('lexer_test', `${__dirname}/../src/lexer.test.abra`),
    //   tests: LEXER_TESTS,
    // },
    // {
    //   runner: new TestRunner('parser_test', `${__dirname}/../src/parser.test.abra`),
    //   tests: PARSER_TESTS,
    // },
    // {
    //   runner: new TestRunner('typechecker_test', `${__dirname}/../src/typechecker.test.abra`),
    //   tests: TYPECHECKER_TESTS,
    // },
    // {
    //   runner: new TestRunner('compiler_test', `${__dirname}/../src/compiler.test.abra`),
    //   tests: COMPILER_TESTS,
    // },
    {
      runner: new TestRunner('vm_test', `${__dirname}/../src/ir_vm.test.abra`, { target: 'vm' }),
      tests: IR_COMPILER_TESTS,
    },
    {
      runner: new TestRunner('native_ir_compiler_test', `${__dirname}/../src/ir_compiler.test.abra`, { target: 'native' }),
      tests: IR_COMPILER_TESTS,
    },
    {
      runner: new TestRunner('js_ir_compiler_test', `${__dirname}/../src/ir_compiler_js.test.abra`, { target: 'js' }),
      tests: IR_COMPILER_TESTS,
    },
  ]

  for (const { runner, tests } of runners) {
    numTests += tests.length
    const results = await runner.runTests(tests)
    numPass += results.numPass
    numFail += results.numFail
    numErr += results.numErr
  }

  console.log('\nTotals:')
  const passMsg = `  Pass: ${numPass} / ${numTests}`
  console.log(numPass === numTests ? green(passMsg) : passMsg)
  const failMsg = `  Fail: ${numFail} / ${numTests}`
  console.log(numFail > 0 ? magenta(failMsg) : failMsg)
  const errMsg = `  Error: ${numErr} / ${numTests}`
  console.log(numErr > 0 ? magenta(errMsg) : errMsg)

  if (numPass !== numTests)
    return process.exit(1)
}

main()
