import File from "fs"
import IR, IrFunction, IrType, Instruction, Operation, Value, IdentKind, GlobalVariable, Builtin from "./ir"
import ModuleBuilder, QbeType from "./qbe"
import "./qbe" as qbe
import i64ToString from "./ir_compiler_builtins"

pub type CompilationResult {
  builder: ModuleBuilder
  builtinI64ToStringUsed: Bool

  pub func writeToFile(self, file: File) {
    self.builder.writeToFile(file)

    if self.builtinI64ToStringUsed {
      file.write(i64ToString.code)
    }
  }
}

pub type Compiler {
  ir: IR
  builder: ModuleBuilder
  currentFn: qbe.QbeFunction
  numTemps: Int = 0
  builtinI64ToStringUsed: Bool = false
  mallocFn: qbe.QbeFunction = qbe.QbeFunction.spec(name: "GC_malloc", returnType: Some(QbeType.Pointer))
  reallocFn: qbe.QbeFunction = qbe.QbeFunction.spec(name: "GC_realloc", returnType: Some(QbeType.Pointer))
  memcpyFn: qbe.QbeFunction = qbe.QbeFunction.spec(name: "memcpy", returnType: None)

  pub func compile(ir: IR): CompilationResult {
    val builder = ModuleBuilder()

    val compiler = Compiler(
      ir: ir,
      builder: builder,
      currentFn: qbe.QbeFunction.spec(name: "dummy"),
    )

    compiler.compileMainFunction(ir.mainFunction)

    for g in ir.globals {
      compiler.compileGlobal(g)
    }

    for fn in ir.functions {
      compiler.compileFunction(fn)
    }

    CompilationResult(
      builder: builder,
      builtinI64ToStringUsed: compiler.builtinI64ToStringUsed
    )
  }

  func compileGlobal(self, global: GlobalVariable) {
    if !global.referenced return

    val globalTy = self.irTypeToQbeType(global.ty)
    val globalData = if global.initialValue |init| {
      self.irValueToQbeValue(init)
    } else {
      globalTy.zeroValue()
    }
    self.builder.addData(qbe.QbeData(name: global.name, kind: qbe.QbeDataKind.Constants([(globalTy, globalData)])))
  }

  func compileMainFunction(self, fn: IrFunction) {
    val f = self.builder.buildFunction(name: fn.name, returnType: Some(qbe.QbeType.U64), exported: true)
    self.currentFn = f

    // TODO: persist to globals
    val argcVal = f.addParameter("argc", qbe.QbeType.U64)
    val argvVal = f.addParameter("argv", qbe.QbeType.U64)

    f.block.buildVoidCallRaw("GC_init", [])

    for inst in fn.block[1] {
      self.compileInstruction(inst)
    }
  }

  func compileFunction(self, fn: IrFunction) {
    if fn.extern return

    val returnType = self.irTypeToQbeReturnType(fn.ret)
    val f = self.builder.buildFunction(name: fn.name, returnType: returnType)
    self.currentFn = f
    self.numTemps = 0

    for param in fn.params {
      val ty = self.irTypeToQbeType(param.ty)
      val paramName = match param.kind { IdentKind.Named(name) => name, else => unreachable("expected IdentKind.Named for param") }
      f.addParameter(paramName, ty)
    }

    for inst in fn.block[1] {
      self.compileInstruction(inst)
    }
  }

  func compileInstruction(self, inst: Instruction) {
    val dst = match inst.assignee?.kind {
      IdentKind.Anon(idx) => Some("_$idx")
      IdentKind.Named(name) => Some(name)
      else => None
    }

    match inst.op {
      Operation.NewLocal(ty, initialValue) => {
        if !dst unreachable("Operation.NewLocal requires a destination")

        val qbeTy = self.irTypeToQbeType(ty)
        val slot = match qbeTy {
          QbeType.U8 => self.currentFn.block.buildAlloc8(1, dst)      // 'b'
          QbeType.U16 => self.currentFn.block.buildAlloc4(1, dst)     // 'h' (should be unreachable)
          QbeType.U32 => self.currentFn.block.buildAlloc4(1, dst)     // 'w' (should be unreachable)
          QbeType.U64 => self.currentFn.block.buildAlloc8(1, dst)     // 'l'
          QbeType.Pointer => self.currentFn.block.buildAlloc8(1, dst) // 'l'
          QbeType.F32 => self.currentFn.block.buildAlloc4(1, dst)     // 's' (should be unreachable)
          QbeType.F64 => self.currentFn.block.buildAlloc8(1, dst)     // 'd'
        }

        if initialValue |initialValue| {
          val v = self.irValueToQbeValue(initialValue)
          self.currentFn.block.buildStore(qbeTy, v, slot)
        }
      }
      Operation.ConstInt(int) => {
        self.currentFn.block.buildAdd(qbe.Value.Int(0), qbe.Value.Int(int), dst)
      }
      Operation.ConstString(str) => {
        val slot = self.makeConstString(str)
        try self.currentFn.block.buildAdd(qbe.Value.Int(0), slot, dst) else |e| unreachable(e)
      }
      Operation.ConstBool(b) => {
        if b {
          self.currentFn.block.buildAdd(qbe.Value.Int(0), qbe.Value.Int(1), dst)
        } else {
          self.currentFn.block.buildAdd(qbe.Value.Int(0), qbe.Value.Int(0), dst)
        }
      }
      Operation.Add(l, r) => {
        val left = self.irValueToQbeValue(l)
        val right = self.irValueToQbeValue(r)

        if left.ty() != right.ty() unreachable("Operation.Add: left.ty (${left.ty()}) != right.ty (${right.ty()})")

        self.currentFn.block.buildAdd(left, right, dst)
      }
      Operation.Sub(l, r) => {
        val left = self.irValueToQbeValue(l)
        val right = self.irValueToQbeValue(r)

        if left.ty() != right.ty() unreachable("Operation.Sub: left.ty (${left.ty()}) != right.ty (${right.ty()})")

        self.currentFn.block.buildSub(left, right, dst)
      }
      Operation.Mul(l, r) => {
        val left = self.irValueToQbeValue(l)
        val right = self.irValueToQbeValue(r)

        if left.ty() != right.ty() unreachable("Operation.Mul: left.ty (${left.ty()}) != right.ty (${right.ty()})")

        self.currentFn.block.buildMul(left, right, dst)
      }
      Operation.Eq(primitive, negate, l, r) => {
        if !primitive todo("non-primitive Eq operation")

        val left = self.irValueToQbeValue(l)
        val right = self.irValueToQbeValue(r)

        val res = if negate {
          try self.currentFn.block.buildCompareNeq(left, right, Some(self.nextTemp())) else |e| unreachable(e)
        } else {
          try self.currentFn.block.buildCompareEq(left, right, Some(self.nextTemp())) else |e| unreachable(e)
        }
        self.currentFn.block.buildExt(res, false, dst)
      }
      Operation.Lt(l, r) => {
        val left = self.irValueToQbeValue(l)
        val right = self.irValueToQbeValue(r)

        if left.ty() != right.ty() unreachable("Operation.Lt: left.ty (${left.ty()}) != right.ty (${right.ty()})")

        self.currentFn.block.buildCompareLt(left, right, dst)
      }
      Operation.Load(ty, mem) => {
        val ptr = self.irValueToQbeValue(mem)
        self.currentFn.block.buildLoad(self.irTypeToQbeType(ty), ptr, dst)
      }
      Operation.LoadField(ty, mem, _, offset) => {
        val ptr = if offset == 0 {
          self.irValueToQbeValue(mem)
        } else {
          val memVal = self.irValueToQbeValue(mem)
          try self.currentFn.block.buildAdd(qbe.Value.Int(offset), memVal, Some(self.nextTemp())) else |e| unreachable(e)
        }
        self.currentFn.block.buildLoad(self.irTypeToQbeType(ty), ptr, dst)
      }
      Operation.Store(ty, value, mem) => {
        val ptr = self.irValueToQbeValue(mem)
        val v = self.irValueToQbeValue(value)
        self.currentFn.block.buildStore(self.irTypeToQbeType(ty), v, ptr)
      }
      Operation.StoreField(ty, value, mem, _, offset) => {
        val ptr = if offset == 0 {
          self.irValueToQbeValue(mem)
        } else {
          val memVal = self.irValueToQbeValue(mem)
          try self.currentFn.block.buildAdd(qbe.Value.Int(offset), memVal, Some(self.nextTemp())) else |e| unreachable(e)
        }

        val v = self.irValueToQbeValue(value)
        self.currentFn.block.buildStore(self.irTypeToQbeType(ty), v, ptr)
      }
      Operation.If(ty, cond, thenBlock, elseBlock) => {
        val isStmt = ty == IrType.Unit
        val condVal = self.irValueToQbeValue(cond)

        val labelThen = self.currentFn.block.addLabel(thenBlock.name)
        val labelCont = self.currentFn.block.addLabel("cont")

        if !elseBlock.body.isEmpty() || !!elseBlock.result {
          val labelElse = self.currentFn.block.addLabel(elseBlock.name)

          self.currentFn.block.buildJnz(condVal, labelThen, labelElse)
          self.currentFn.block.registerLabel(labelThen)
          for inst in thenBlock.body {
            self.compileInstruction(inst)
          }
          if !thenBlock.terminates {
            self.currentFn.block.buildJmp(labelCont)
          }

          val thenPhiValue = if thenBlock.result |v| {
            val label = self.currentFn.block.currentLabel
            val thenVal = self.irValueToQbeValue(v)
            Some((label, thenVal))
          } else {
            None
          }

          self.currentFn.block.registerLabel(labelElse)
          for inst in elseBlock.body {
            self.compileInstruction(inst)
          }
          if !elseBlock.terminates {
            self.currentFn.block.buildJmp(labelCont)
          }
          val elsePhiValue = if elseBlock.result |v| {
            val label = self.currentFn.block.currentLabel
            val elseVal = self.irValueToQbeValue(v)
            Some((label, elseVal))
          } else {
            None
          }

          self.currentFn.block.registerLabel(labelCont)

          if !thenBlock.result && !elseBlock.result {
            // in if-exprs that are missing both then- and else-values, emit unreachable
            if !isStmt self.currentFn.block.buildHalt()
          } else {
            val phiCases: (qbe.Label, qbe.Value)[] = []
            if thenPhiValue |(label, v)| phiCases.push((label, v))
            if elsePhiValue |(label, v)| phiCases.push((label, v))

            try self.currentFn.block.buildPhi(phiCases, dst) else |e| unreachable(e)
          }
        } else {
          if !isStmt unreachable("must be a statement at this point")

          self.currentFn.block.buildJnz(condVal, labelThen, labelCont)
          self.currentFn.block.registerLabel(labelThen)
          for inst in thenBlock.body {
            self.compileInstruction(inst)
          }
          if !thenBlock.terminates {
            self.currentFn.block.buildJmp(labelCont)
          }

          self.currentFn.block.registerLabel(labelCont)
        }
      }
      Operation.While(_, cond, body) => {
        val labelCond = self.currentFn.block.addLabel("${body.name}_cond")
        val labelBody = self.currentFn.block.addLabel("${body.name}_body")
        val labelCont = self.currentFn.block.addLabel("${body.name}_cont")

        self.currentFn.block.registerLabel(labelCond)
        for inst in cond.body {
          self.compileInstruction(inst)
        }
        val condVal = self.irValueToQbeValue(cond.result)
        self.currentFn.block.buildJnz(condVal, labelBody, labelCont)

        self.currentFn.block.registerLabel(labelBody)
        for inst in body.body {
          self.compileInstruction(inst)
        }
        if !body.terminates {
          self.currentFn.block.buildJmp(labelCond)
        }

        self.currentFn.block.registerLabel(labelCont)
      }
      Operation.Call(ret, fnName, args) => {
        val argVals = args.map(a => self.irValueToQbeValue(a))
        if self.irTypeToQbeReturnType(ret) |ret| {
          try self.currentFn.block.buildCallRaw(fnName, ret, argVals, dst) else |e| unreachable(e)
        } else {
          self.currentFn.block.buildVoidCallRaw(fnName, argVals)
        }
      }
      Operation.Return(value) => {
        if value |v| {
          self.currentFn.block.buildReturn(Some(self.irValueToQbeValue(v)))
        } else {
          self.currentFn.block.buildReturn()
        }
      }
      Operation.Builtin(ret, builtin) => {
        val sizeOfType = (irType: IrType) => {
          match irType {
            IrType.Unit => unreachable("values cannot be of type unit")
            IrType.I64 => (8, QbeType.U64)
            IrType.Bool => (8, QbeType.U64)
            IrType.Byte => (1, QbeType.U8)
            IrType.Composite => (8, QbeType.U64)
            IrType.Ptr => (8, QbeType.U64)
          }
        }

        match builtin {
          Builtin.Malloc(count, itemTy) => {
            val countVal = self.irValueToQbeValue(count)
            val sizeVal = if itemTy |itemTy| {
              val (size, _) = sizeOfType(itemTy)
              try self.currentFn.block.buildMul(qbe.Value.Int(size), countVal, Some(self.nextTemp())) else |e| unreachable(e)
            } else {
              countVal
            }

            self.callMalloc(sizeVal, dst)
          }
          Builtin.Realloc(ptr, count, itemTy) => {
            val ptrVal = self.irValueToQbeValue(ptr)
            val countVal = self.irValueToQbeValue(count)
            val sizeVal = if itemTy |itemTy| {
              val (size, _) = sizeOfType(itemTy)
              try self.currentFn.block.buildMul(qbe.Value.Int(size), countVal, Some(self.nextTemp())) else |e| unreachable(e)
            } else {
              countVal
            }

            self.callRealloc(ptrVal, sizeVal, dst)
          }
          Builtin.Store(ptr, value, offset, itemTy) => {
            val ptrVal = self.irValueToQbeValue(ptr)
            val valueVal = self.irValueToQbeValue(value)
            val offsetVal = self.irValueToQbeValue(offset)

            val (size, qbeTy) = sizeOfType(itemTy)
            val sizeVal = try self.currentFn.block.buildMul(qbe.Value.Int(size), offsetVal, Some(self.nextTemp())) else |e| unreachable(e)
            val mem = try self.currentFn.block.buildAdd(sizeVal, ptrVal, Some(self.nextTemp())) else |e| unreachable(e)

            if size == 1 {
              self.currentFn.block.buildStoreB(valueVal, mem)
            } else {
              self.currentFn.block.buildStore(qbeTy, valueVal, mem)
            }
          }
          Builtin.Load(ptr, offset, itemTy) => {
            val ptrVal = self.irValueToQbeValue(ptr)
            val offsetVal = self.irValueToQbeValue(offset)

            val (size, qbeTy) = sizeOfType(itemTy)
            val sizeVal = try self.currentFn.block.buildMul(qbe.Value.Int(size), offsetVal, Some(self.nextTemp())) else |e| unreachable(e)
            val mem = try self.currentFn.block.buildAdd(sizeVal, ptrVal, Some(self.nextTemp())) else |e| unreachable(e)

            if size == 1 {
              todo("Builtin.Load Byte")
            } else {
              self.currentFn.block.buildLoad(qbeTy, mem, dst)
            }
          }
          Builtin.CopyFrom(dst, dstOffset, src, srcOffset, count, itemTy) => {
            val dstVal = self.irValueToQbeValue(dst)
            val dstOffsetVal = self.irValueToQbeValue(dstOffset)
            val srcVal = self.irValueToQbeValue(src)
            val srcOffsetVal = self.irValueToQbeValue(srcOffset)
            val countVal = self.irValueToQbeValue(count)

            val (size, qbeTy) = sizeOfType(itemTy)

            val dstMem = try self.currentFn.block.buildAdd(
              try self.currentFn.block.buildMul(qbe.Value.Int(size), dstOffsetVal, Some(self.nextTemp())) else |e| unreachable(e),
              dstVal,
              Some(self.nextTemp()),
            ) else |e| unreachable(e)
            val srcMem = try self.currentFn.block.buildAdd(
              try self.currentFn.block.buildMul(qbe.Value.Int(size), srcOffsetVal, Some(self.nextTemp())) else |e| unreachable(e),
              srcVal,
              Some(self.nextTemp()),
            ) else |e| unreachable(e)

            self.currentFn.block.buildVoidCall(qbe.Callable.Function(self.memcpyFn), [dstMem, srcMem, countVal])
          }
          Builtin.I64ToString(int) => {
            self.builtinI64ToStringUsed = true

            val intVal = self.irValueToQbeValue(int)
            val lenPtr = self.currentFn.block.buildAlloc8(1, Some("lenptr"))
            val mem = try self.currentFn.block.buildCallRaw(i64ToString.name, qbe.QbeType.Pointer, [intVal, lenPtr], Some(self.nextTemp())) else |e| unreachable(e)
            val lenVal = self.currentFn.block.buildLoadL(lenPtr, Some(self.nextTemp()))
            self.constructString(mem, lenVal, dst)
          }
        }
      }
    }
  }

  func nextTemp(self): String {
    val name = "_t${self.numTemps}"
    self.numTemps += 1
    name
  }

  func irTypeToQbeType(self, irType: IrType): qbe.QbeType {
    match irType {
      IrType.I64 => QbeType.U64
      IrType.Bool => QbeType.U64
      IrType.Composite => QbeType.U64 // pointer to GC'd object
      IrType.Ptr => QbeType.U64 // raw pointer
      IrType.Unit => unreachable("values cannot be of type Unit")
      IrType.Byte => QbeType.U64 // treat bytes as longs when they're ordinary values; but use `loadb`/`storeb`
    }
  }

  func irTypeToQbeReturnType(self, irType: IrType): qbe.QbeType? = match irType { IrType.Unit => None, else t => Some(self.irTypeToQbeType(t)) }

  func irValueToQbeValue(self, v: Value): qbe.Value {
    match v {
      Value.Unit => unreachable("values cannot be of type unit")
      Value.ConstInt(i) => qbe.Value.Int(i)
      Value.ConstBool(b) => qbe.Value.Int(if b 1 else 0)
      Value.ConstChar(c) => qbe.Value.Int(c)
      Value.ConstString(s) => self.makeConstString(s)
      Value.Ident(i) => {
        val ty = self.irTypeToQbeType(i.ty)
        val name = match i.kind {
          IdentKind.Anon(idx) => "_$idx"
          IdentKind.Named(name) => name
        }
        qbe.Value.Ident(name: name, ty: ty)
      }
      Value.Global(g) => {
        val ty = self.irTypeToQbeType(g.ty)
        self.currentFn.block.buildLoad(ty, qbe.Value.Global(name: g.name, ty: ty), Some(self.nextTemp()))
      }
    }
  }

  func makeConstString(self, s: String): qbe.Value {
    val str = s.replaceAll("\\", "\\\\").replaceAll("\"", "\\\"").replaceAll("\n", "\\n").replaceAll("\r", "\\r")
    val (dataPtr, data, newlyAdded) = self.builder.buildGlobalString(str)

    val globalName = "${data.name}str"
    if newlyAdded {
      val (slot, _) = self.builder.addData(qbe.QbeData(
        name: globalName,
        kind: qbe.QbeDataKind.Constants([(qbe.QbeType.U64, qbe.Value.Int(s.length)), (qbe.QbeType.Pointer, dataPtr)])
      ))
      slot
    } else {
      qbe.Value.Global(name: globalName, ty: qbe.QbeType.Pointer)
    }
  }

  func constructString(self, ptrVal: qbe.Value, lenVal: qbe.Value, dst: String? = None): qbe.Value {
    val strTy = self.irTypeToQbeType(IrType.Composite(self.ir.knowns.stringType().name))
    val strInitFn = self.ir.knowns.stringInitializerFn()
    try self.currentFn.block.buildCallRaw(strInitFn.name, strTy, [lenVal, ptrVal], dst) else |e| unreachable(e)
  }

  func callMalloc(self, sizeVal: qbe.Value, dst: String? = None): qbe.Value {
    try self.currentFn.block.buildCall(qbe.Callable.Function(self.mallocFn), [sizeVal], dst) else |e| unreachable(e)
  }

  func callRealloc(self, ptrVal: qbe.Value, sizeVal: qbe.Value, dst: String? = None): qbe.Value {
    try self.currentFn.block.buildCall(qbe.Callable.Function(self.reallocFn), [ptrVal, sizeVal], dst) else |e| unreachable(e)
  }
}
