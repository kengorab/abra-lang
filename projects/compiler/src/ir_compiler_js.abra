import File from "fs"
import StringBuilder, IR, IrFunction, IrType, Instruction, Operation, Value, Const, IdentKind, GlobalVariable, Builtin from "./ir"
import ModuleBuilder, QbeType from "./qbe"
import "./qbe" as qbe
import i64ToString from "./ir_compiler_builtins"

pub type CompilationResult {
  sb: StringBuilder

  pub func writeToFile(self, file: File) {
    file.writeln(self.sb.build())
  }
}

pub type Compiler {
  ir: IR
  sb: StringBuilder
  numTemps: Int = 0
  indentLevel: Int = 0

  pub func compile(ir: IR): CompilationResult {
    val sb = StringBuilder()

    val compiler = Compiler(ir: ir, sb: sb)

    sb.writeln("export default function(externs) {")
    sb.write("const { ")
    for fn in ir.functions {
      if !fn.extern continue
      sb.write(fn.name)
      sb.write(", ")
    }
    sb.writeln("} = externs;")

    for g in ir.globals {
      compiler.compileGlobal(g)
    }
    sb.writeln()

    compiler.compileMainFunction(ir.mainFunction)
    sb.writeln()

    sb.writeln("${ir.mainFunction.name}();")

    for fn in ir.functions {
      compiler.compileFunction(fn)
      sb.writeln()
    }

    sb.writeln("}")

    CompilationResult(sb: sb)
  }

  func compileGlobal(self, global: GlobalVariable) {
    if !global.referenced return

    if global.initialValue |init| {
      self.sb.write("const ${global.name} = ")
      self.emitIrConstToJsValue(init)
      self.sb.writeln(";")
    } else {
      self.sb.writeln("let ${global.name};")
    }
  }

  func compileMainFunction(self, fn: IrFunction) {
    self.sb
      .write("function ")
      .write(fn.name)
      .writeln("() {")

    self.indentLevel += 1
    for inst in fn.block[1] {
      self.compileInstruction(inst)
    }
    self.indentLevel -= 1

    self.sb.writeln("}")
  }

  func compileFunction(self, fn: IrFunction) {
    if fn.extern return

    self.numTemps = 0

    self.sb
      .write("function ")
      .write(fn.name)
      .write("(")
    for param, idx in fn.params {
      val paramName = match param.kind { IdentKind.Named(name) => name, else => unreachable("expected IdentKind.Named for param") }
      self.sb.write(paramName)
      if idx != fn.params.length - 1 {
        self.sb.write(", ")
      }
    }
    self.sb.writeln(") {")

    self.indentLevel += 1
    for inst in fn.block[1] {
      self.compileInstruction(inst)
    }
    self.indentLevel -= 1

    self.sb.writeln("}")
  }

  func genConst(self, dst: String, const: Const) {
    self.sb.write("const $dst = ")
    self.emitIrConstToJsValue(const)
    self.sb.writeln(";")
  }

  func genBinary(self, dst: String, op: String, left: Value, right: Value) {
    self.sb.write("const $dst = ")
    self.emitIrValueToJsValue(left)
    self.sb.write(" $op ")
    self.emitIrValueToJsValue(right)
    self.sb.writeln(";")
  }

  func compileInstruction(self, inst: Instruction) {
    val dst = inst.assignee?.kind?.name() ?: self.nextTemp()

    self.emitIndent()

    match inst.op {
      Operation.NewLocal(ty, initialValue) => {
        self.sb.write("let $dst")
        if initialValue |init| {
          self.sb.write(" = ")
          self.emitIrValueToJsValue(init)
        } else {
        }
        self.sb.writeln(";")
      }
      Operation.ConstInt(int) => self.genConst(dst, Const.Int(int))
      Operation.ConstFloat(float) => self.genConst(dst, Const.Float(float))
      Operation.ConstBool(bool) => self.genConst(dst, Const.Bool(bool))
      Operation.ConstChar(char) => self.genConst(dst, Const.Char(char))
      Operation.ConstString(str) => self.genConst(dst, Const.String(str))
      Operation.Minus(v) => {
        self.sb.write("const $dst = -")
        self.emitIrValueToJsValue(v)
        self.sb.writeln(";")
      }
      Operation.Negate(v) => {
        self.sb.write("const $dst = !")
        self.emitIrValueToJsValue(v)
        self.sb.writeln(";")
      }
      Operation.Add(l, r) => self.genBinary(dst, "+", l, r)
      Operation.Sub(l, r) => self.genBinary(dst, "-", l, r)
      Operation.Mul(l, r) => self.genBinary(dst, "*", l, r)
      Operation.Div(l, r) => self.genBinary(dst, "/", l, r)
      Operation.Mod(l, r) => self.genBinary(dst, "%", l, r)
      Operation.Pow(l, r) => self.genBinary(dst, "**", l, r)
      Operation.BitAnd(l, r) => self.genBinary(dst, "&", l, r)
      Operation.BoolAnd(l, r) => self.genBinary(dst, "&&", l, r)
      Operation.BitOr(l, r) => self.genBinary(dst, "|", l, r)
      Operation.BoolOr(l, r) => self.genBinary(dst, "||", l, r)
      Operation.Xor(l, r) => self.genBinary(dst, "^", l, r)
      Operation.Eq(primitive, negate, l, r) => {
        if !primitive todo("non-primitive Eq operation")

        self.genBinary(dst, if negate "!==" else "===", l, r)
      }
      Operation.Lt(l, r) => self.genBinary(dst, "<", l, r)
      Operation.Lte(l, r) => self.genBinary(dst, "<=", l, r)
      Operation.Shl(l, r) => self.genBinary(dst, "<<", l, r)
      Operation.Gt(l, r) => self.genBinary(dst, ">", l, r)
      Operation.Gte(l, r) => self.genBinary(dst, ">=", l, r)
      Operation.Shr(l, r) => self.genBinary(dst, ">>", l, r)
      Operation.Load(ty, mem) => {
        self.sb.write("const $dst = ")
        self.emitIrValueToJsValue(mem)
        self.sb.writeln(";")
      }
      Operation.LoadField(ty, mem, name, _) => {
        self.sb.write("const $dst = ")
        self.emitIrValueToJsValue(mem)
        self.sb.writeln(".$name;")
      }
      Operation.Store(ty, value, mem) => {
        self.emitIrValueToJsValue(mem)
        self.sb.write(" = ")
        self.emitIrValueToJsValue(value)
        self.sb.writeln(";")
      }
      Operation.StoreField(ty, value, mem, name, _) => {
        self.emitIrValueToJsValue(mem)
        self.sb.write(".$name = ")
        self.emitIrValueToJsValue(value)
        self.sb.writeln(";")
      }
      Operation.If(ty, cond, thenBlock, elseBlock) => {
        val isStmt = ty == IrType.Unit

        if !isStmt {
          self.sb.writeln("let $dst;")
          self.emitIndent()
        }

        val condVal = self.irValueToJsValue(cond)
        self.sb.writeln("if ($condVal) {")
        self.indentLevel += 1
        for inst, idx in thenBlock.body {
          self.compileInstruction(inst)
        }
        if thenBlock.result |v| {
          self.emitIndent()
          self.sb.write("$dst = ")
          self.emitIrValueToJsValue(v)
          self.sb.writeln(";")
        }
        self.indentLevel -= 1

        if !elseBlock.body.isEmpty() || !!elseBlock.result {
          self.emitIndent()
          self.sb.writeln("} else {")

          self.indentLevel += 1
          for inst, idx in elseBlock.body {
            self.compileInstruction(inst)
          }
          if elseBlock.result |v| {
            self.emitIndent()
            self.sb.write("$dst = ")
            self.emitIrValueToJsValue(v)
            self.sb.writeln(";")
          }
          self.indentLevel -= 1
        }

        self.emitIndent()
        self.sb.writeln("}")
      }
      Operation.While(_, cond, body) => {
        self.sb.writeln("while (true) {")
        self.indentLevel += 1
        for inst in cond.body {
          self.compileInstruction(inst)
        }
        self.emitIndent()
        self.sb.write("if (!")
        self.emitIrValueToJsValue(cond.result)
        self.sb.writeln(") break;")

        for inst in body.body {
          self.compileInstruction(inst)
        }
        self.indentLevel -= 1

        self.emitIndent()
        self.sb.writeln("}")
      }
      Operation.Call(ret, fnName, args) => {
        if ret != IrType.Unit {
          self.sb.write("const $dst = ")
        }

        self.sb.write(fnName)
          .write("(")
        for arg, idx in args {
          self.emitIrValueToJsValue(arg)
          if idx != args.length - 1 {
            self.sb.write(", ")
          }
        }
        self.sb.writeln(");")
      }
      Operation.Return(value) => {
        self.sb.write("return")
        if value |v| {
          self.sb.write(" ")
          self.emitIrValueToJsValue(v)
        }
        self.sb.writeln(";")
      }
      Operation.Builtin(ret, builtin) => {
        match builtin {
          Builtin.Malloc(count, itemTy) => {
            self.sb.write("const $dst = ")
            // If no itemTy present then it's a "void*", which can be thought of as an array; if there is a type being malloc'd, then it's an object
            if !itemTy {
              self.sb.writeln("{}; // builtin(malloc)")
            } else {
              self.sb.writeln("[]; // builtin(malloc)")
            }
          }
          Builtin.Realloc(ptr, count, _) => {
            self.sb.write("const $dst = ")
            self.emitIrValueToJsValue(ptr)
            self.sb.writeln("; // realloc (no-op)")
          }
          Builtin.Store(ptr, value, offset, _) => {
            self.emitIrValueToJsValue(ptr)
            self.sb.write("[")
            self.emitIrValueToJsValue(offset)
            self.sb.write("] = ")
            self.emitIrValueToJsValue(value)
            self.sb.writeln("; // builtin(ptr_store)")
          }
          Builtin.Load(ptr, offset, _) => {
            self.sb.write("const $dst = ")
            self.emitIrValueToJsValue(ptr)
            self.sb.write("[")
            self.emitIrValueToJsValue(offset)
            self.sb.writeln("]; // builtin(ptr_load)")
          }
          Builtin.CopyFrom(dst, dstOffset, src, srcOffset, count, _) => {
            val countVal = self.irValueToJsValue(count)
            self.sb.writeln("for (let i = 0; i < $countVal; i++) {")
            self.indentLevel += 1

            self.emitIndent()
            self.emitIrValueToJsValue(dst)
            self.sb.write("[")
            self.emitIrValueToJsValue(dstOffset)
            self.sb.write(" + i] = ")
            self.emitIrValueToJsValue(src)
            self.sb.write("[")
            self.emitIrValueToJsValue(srcOffset)
            self.sb.writeln(" + i]; // builtin(copy_from)")

            self.indentLevel -= 1
            self.emitIndent()
            self.sb.writeln("}")
          }
          Builtin.I64ToString(int) => {
            val strInitFn = self.ir.knowns.stringInitializerFn()

            val strTmp = self.nextTemp()
            self.sb.write("const $strTmp = ")
            self.emitIrValueToJsValue(int)
            self.sb.writeln(".toString().split('');")

            self.emitIndent()
            self.sb.writeln("const $dst = ${strInitFn.name}($strTmp.length, $strTmp);")
          }
          Builtin.U64ToString(int) => {
            val strInitFn = self.ir.knowns.stringInitializerFn()

            val strTmp = self.nextTemp()
            self.sb.write("const $strTmp = BigInt.asUintN(64, BigInt(")
            self.emitIrValueToJsValue(int)
            self.sb.writeln(")).toString().split('');")

            self.emitIndent()
            self.sb.writeln("const $dst = ${strInitFn.name}($strTmp.length, $strTmp);")
          }
          Builtin.F64ToString(float) => {
            val strInitFn = self.ir.knowns.stringInitializerFn()

            val strTmp = self.nextTemp()
            self.sb.write("const $strTmp = ")
            self.emitIrValueToJsValue(float)
            self.sb.writeln(".toFixed(5).replace(/0+$/, '').replace(/\\.$/, '').split('');")

            self.emitIndent()
            self.sb.writeln("const $dst = ${strInitFn.name}($strTmp.length, $strTmp);")
          }
          Builtin.BoolToString(bool) => {
            val strInitFn = self.ir.knowns.stringInitializerFn()

            val strTmp = self.nextTemp()
            self.sb.write("const $strTmp = ")
            self.emitIrValueToJsValue(bool)
            self.sb.writeln(".toString().split('');")

            self.emitIndent()
            self.sb.writeln("const $dst = ${strInitFn.name}($strTmp.length, $strTmp);")
          }
        }
      }
    }
  }

  func nextTemp(self): String {
    val name = "_t${self.numTemps}"
    self.numTemps += 1
    name
  }

  func emitIndent(self) {
    self.sb.write("  ".repeat(self.indentLevel))
  }

  func emitIrConstToJsValue(self, c: Const) = self.sb.write(self.irConstToJsValue(c))

  func irConstToJsValue(self, const: Const): String = match const {
    Const.Int(i) => {
      // val mask = 0b1111111111100000000000000000000000000000000000000000000000000000
      val mask = 0x7ff << 53
      if (i && mask) == 0 {
        i.toString()
      } else {
        "BigInt(${i.toString()})"
      }
    }
    Const.Float(f) => f.toString()
    Const.Bool(b) => b.toString()
    Const.Char(c) => "'${Char.fromInt(c).toString()}'"
    Const.String(s) => self.makeConstString(s)
  }

  func makeConstString(self, s: String): String {
    val str = s.replaceAll("\\", "\\\\").replaceAll("\"", "\\\"").replaceAll("\n", "\\n").replaceAll("\r", "\\r")
    "{ length: ${s.length}, _buffer: \"$str\".split('') }"
  }

  func emitIrValueToJsValue(self, v: Value) = self.sb.write(self.irValueToJsValue(v))

  func irValueToJsValue(self, v: Value): String {
    match v {
      Value.Unit => unreachable("values cannot be of type unit")
      Value.Const(const) => self.irConstToJsValue(const)
      Value.Ident(i) => {
        match i.kind {
          IdentKind.Anon(idx) => "_$idx"
          IdentKind.Named(name) => name
        }
      }
      Value.Global(g) => g.name
    }
  }
}
