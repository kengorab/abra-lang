import File from "fs"
import StringBuilder, IR, IrFunction, IrType, Instruction, Operation, Value, Const, Ident, IdentKind, GlobalVariable, Builtin, CaptureSource, ClosureEnvLocation from "./ir"
import ModuleBuilder, QbeType from "./qbe"
import "./qbe" as qbe
import builtins from "./ir_compiler_builtins_js"

pub type CompilationResult {
  sb: StringBuilder

  pub func writeToFile(self, file: File) {
    file.writeln(self.sb.build())
  }
}

pub type Compiler {
  ir: IR
  sb: StringBuilder
  numTemps: Int = 0
  indentLevel: Int = 0

  pub func compile(ir: IR): CompilationResult {
    val sb = StringBuilder()

    val compiler = Compiler(ir: ir, sb: sb)

    sb.writeln("export default function(externs) {")
    sb.write("const { ")
    for fn in ir.functions {
      if !fn.extern continue
      sb.write(fn.name)
      sb.write(", ")
    }
    sb.writeln("} = externs;")

    sb.writeln(builtins)

    for g in ir.globals {
      compiler.compileGlobal(g)
    }
    sb.writeln()

    compiler.compileMainFunction(ir.mainFunction)
    sb.writeln()

    sb.writeln("${ir.mainFunction.name}();")

    for fn in ir.functions {
      compiler.compileFunction(fn)
      sb.writeln()
    }

    sb.writeln("}")

    CompilationResult(sb: sb)
  }

  func compileGlobal(self, global: GlobalVariable) {
    if !global.referenced return

    if global.initialValue |init| {
      self.sb.write("const ${global.name} = ")
      self.emitIrConstToJsValue(init)
      self.sb.writeln(";")
    } else {
      self.sb.writeln("let ${global.name};")
    }
  }

  func compileMainFunction(self, fn: IrFunction) {
    self.sb
      .write("function ")
      .write(fn.name)
      .writeln("() {")

    self.indentLevel += 1
    for inst in fn.block[1] {
      self.compileInstruction(inst)
    }
    self.indentLevel -= 1

    self.sb.writeln("}")
  }

  func compileFunction(self, fn: IrFunction) {
    if fn.extern return

    self.numTemps = 0

    self.sb.write("function ${fn.name}(")
    if fn.isClosure {
      self.sb.write("__env__")
      if !fn.params.isEmpty() self.sb.write(", ")
    }
    for param, idx in fn.params {
      val paramName = match param.kind { IdentKind.Named(name, _) => name, else => unreachable("expected IdentKind.Named for param") }
      self.sb.write(paramName)
      if idx != fn.params.length - 1 {
        self.sb.write(", ")
      }
    }
    self.sb.writeln(") {")

    self.indentLevel += 1
    for inst in fn.block[1] {
      self.compileInstruction(inst)
    }
    self.indentLevel -= 1

    self.sb.writeln("}")
  }

  func genConst(self, dst: String, const: Const) {
    self.sb.write("const $dst = ")
    self.emitIrConstToJsValue(const)
    self.sb.writeln(";")
  }

  func genBinary(self, dst: String, op: String, left: Value, right: Value) {
    self.sb.write("const $dst = ")
    self.emitIrValueToJsValue(left)
    self.sb.write(" $op ")
    self.emitIrValueToJsValue(right)
    self.sb.writeln(";")
  }

  func compileInstruction(self, inst: Instruction) {
    val dst = inst.assignee?.kind?.name() ?: self.nextTemp()

    self.emitIndent()

    match inst.op {
      Operation.NewLocal(ty, isCaptured, initialValue) => {
        self.sb.write("let $dst")
        if initialValue |init| {
          self.sb.write(" = ")
          if isCaptured {
            self.sb.write("{\$:")
            self.emitIrValueToJsValue(init)
            self.sb.write("}")
          } else {
            self.emitIrValueToJsValue(init)
          }
        } else {
          // no initial value to emit
        }
        self.sb.writeln(";")
      }
      Operation.ConstInt(int) => self.genConst(dst, Const.Int(int))
      Operation.ConstFloat(float) => self.genConst(dst, Const.Float(float))
      Operation.ConstBool(bool) => self.genConst(dst, Const.Bool(bool))
      Operation.ConstChar(char) => self.genConst(dst, Const.Char(char))
      Operation.ConstString(str) => self.genConst(dst, Const.String(str))
      Operation.Minus(v) => {
        self.sb.write("const $dst = -")
        self.emitIrValueToJsValue(v)
        self.sb.writeln(";")
      }
      Operation.Negate(v) => {
        self.sb.write("const $dst = !")
        self.emitIrValueToJsValue(v)
        self.sb.writeln(";")
      }
      Operation.Add(l, r) => self.genBinary(dst, "+", l, r)
      Operation.Sub(l, r) => self.genBinary(dst, "-", l, r)
      Operation.Mul(l, r) => self.genBinary(dst, "*", l, r)
      Operation.Div(l, r) => self.genBinary(dst, "/", l, r)
      Operation.Mod(l, r) => self.genBinary(dst, "%", l, r)
      Operation.Pow(l, r) => self.genBinary(dst, "**", l, r)
      Operation.BitAnd(l, r) => self.genBinary(dst, "&", l, r)
      Operation.BoolAnd(l, r) => {
        self.sb.writeln("let $dst;")

        self.emitIndent()
        val lTmp = self.nextTemp()
        self.sb.write("const $lTmp = ")
        self.emitIrValueToJsValue(l)
        self.sb.writeln(";")

        self.emitIndent()
        self.sb.writeln("if (!$lTmp)")
        self.emitIndent()
        self.sb.writeln("  $dst = false;")
        self.emitIndent()
        self.sb.writeln("else {")
        for inst in r.body {
          self.emitIndent()
          self.compileInstruction(inst)
        }
        self.sb.write("  $dst = ")
        self.emitIrValueToJsValue(r.result)
        self.sb.writeln(";")
        self.emitIndent()
        self.sb.writeln("}")

      }
      Operation.BitOr(l, r) => self.genBinary(dst, "|", l, r)
      Operation.BoolOr(l, r) => {
        self.sb.writeln("let $dst;")

        self.emitIndent()
        val lTmp = self.nextTemp()
        self.sb.write("const $lTmp = ")
        self.emitIrValueToJsValue(l)
        self.sb.writeln(";")

        self.emitIndent()
        self.sb.writeln("if ($lTmp)")
        self.emitIndent()
        self.sb.writeln("  $dst = true;")
        self.emitIndent()
        self.sb.writeln("else {")
        for inst in r.body {
          self.emitIndent()
          self.compileInstruction(inst)
        }
        self.sb.write("  $dst = ")
        self.emitIrValueToJsValue(r.result)
        self.sb.writeln(";")
        self.emitIndent()
        self.sb.writeln("}")
      }
      Operation.Xor(bitwise, l, r) => {
        if bitwise {
          self.sb.write("const $dst = (")
        } else {
          self.sb.write("const $dst = !!(")
        }
        self.emitIrValueToJsValue(l)
        self.sb.write(" ^ ")
        self.emitIrValueToJsValue(r)
        self.sb.writeln(");")
      }
      Operation.Eq(negate, l, r) => self.genBinary(dst, if negate "!==" else "===", l, r)
      Operation.Lt(l, r) => self.genBinary(dst, "<", l, r)
      Operation.Lte(l, r) => self.genBinary(dst, "<=", l, r)
      Operation.Shl(l, r) => self.genBinary(dst, "<<", l, r)
      Operation.Gt(l, r) => self.genBinary(dst, ">", l, r)
      Operation.Gte(l, r) => self.genBinary(dst, ">=", l, r)
      Operation.Shr(l, r) => self.genBinary(dst, ">>", l, r)
      Operation.LoadVar(ty, ident) => {
        self.sb.writeln("const $dst = ${ident.kind.name()};")
      }
      Operation.LoadCapturedVar(ty, src, deref) => {
        match src {
          CaptureSource.WithinCapturingFn(idx, _, mutable) => {
            if mutable {
              if deref {
                self.sb.writeln("const {\$:$dst} = __env__[$idx];")
              } else {
                self.sb.writeln("const $dst = __env__[$idx];")
              }
            } else {
              self.sb.writeln("const $dst = __env__[$idx];")
            }
          }
          CaptureSource.OutsideFn(ident) => {
            if deref {
              self.sb.writeln("const {\$:$dst} = ${ident.kind.name()};")
            } else {
              self.sb.writeln("const $dst = ${ident.kind.name()};")
            }
          }
        }
      }
      Operation.LoadField(ty, mem, name, _) => {
        self.sb.write("const $dst = ")
        self.emitIrValueToJsValue(mem)
        self.sb.writeln(".$name;")
      }
      Operation.StoreVar(ty, value, ident) => {
        self.sb.write(ident.kind.name())
        self.sb.write(" = ")
        self.emitIrValueToJsValue(value)
        self.sb.writeln(";")
      }
      Operation.StoreCapturedVar(ty, value, src) => {
        val name = match src {
          CaptureSource.WithinCapturingFn(idx, _, _) => "__env__[$idx]"
          CaptureSource.OutsideFn(ident) => ident.kind.name()
        }
        self.sb.write("$name.\$ = ")
        self.emitIrValueToJsValue(value)
        self.sb.writeln(";")
      }
      Operation.StoreGlobal(ty, value, global) => {
        self.sb.write(global.name)
        self.sb.write(" = ")
        self.emitIrValueToJsValue(value)
        self.sb.writeln(";")
      }
      Operation.StoreField(ty, value, mem, name, _) => {
        self.emitIrValueToJsValue(mem)
        self.sb.write(".$name = ")
        self.emitIrValueToJsValue(value)
        self.sb.writeln(";")
      }
      Operation.If(ty, cond, thenBlock, elseBlock) => {
        val isStmt = ty == IrType.Unit

        if !isStmt {
          self.sb.writeln("let $dst;")
          self.emitIndent()
        }

        val condVal = self.irValueToJsValue(cond)
        self.sb.writeln("if ($condVal) {")
        self.indentLevel += 1
        for inst, idx in thenBlock.body {
          self.compileInstruction(inst)
        }
        if thenBlock.result |v| {
          self.emitIndent()
          self.sb.write("$dst = ")
          self.emitIrValueToJsValue(v)
          self.sb.writeln(";")
        }
        self.indentLevel -= 1

        if !elseBlock.body.isEmpty() || !!elseBlock.result {
          self.emitIndent()
          self.sb.writeln("} else {")

          self.indentLevel += 1
          for inst, idx in elseBlock.body {
            self.compileInstruction(inst)
          }
          if elseBlock.result |v| {
            self.emitIndent()
            self.sb.write("$dst = ")
            self.emitIrValueToJsValue(v)
            self.sb.writeln(";")
          }
          self.indentLevel -= 1
        }

        self.emitIndent()
        self.sb.writeln("}")
      }
      Operation.WhileLoopStart => {
        self.sb.writeln("while (true) {")
        self.indentLevel += 1
      }
      Operation.While(cond, body) => {
        self.emitIndent()
        self.sb.write("if (!")
        self.emitIrValueToJsValue(cond)
        self.sb.writeln(") break;")

        for inst in body.body {
          self.compileInstruction(inst)
        }
        self.indentLevel -= 1

        self.emitIndent()
        self.sb.writeln("}")
      }
      Operation.ForRanged(start, end, iteratee, idx, body) => {
        self.sb.write("for (let ${iteratee.kind.name()} = ")
        self.emitIrValueToJsValue(start)
        if idx |idx| {
          self.sb.write(", ${idx.kind.name()} = 0")
        }

        self.sb.write(";; ${iteratee.kind.name()} += 1")
        if idx |idx| {
          self.sb.write(", ${idx.kind.name()} += 1")
        }
        self.sb.writeln(") {")
        self.indentLevel += 1

        for inst in end.body {
          self.compileInstruction(inst)
        }

        self.emitIndent()
        self.sb.write("if (${iteratee.kind.name()} >= ")
        self.emitIrValueToJsValue(end.result)
        self.sb.writeln(") break;")

        for inst in body.body {
          self.compileInstruction(inst)
        }

        self.indentLevel -= 1
        self.sb.writeln("}")
      }
      Operation.FunctionPointer(fnName) => {
        self.sb.writeln("const $dst = $fnName;")
      }
      Operation.CreateClosure(fnName, captures) => {
        self.sb.write("const $dst = (...args) => $fnName([")
        for c, idx in captures {
          self.emitIrValueToJsValue(c)
          if idx != captures.length - 1 {
            self.sb.write(", ")
          }
        }
        self.sb.writeln("], ...args);")
      }
      Operation.Call(ret, fnName, args, envLocation) => {
        if ret != IrType.Unit {
          self.sb.write("const $dst = ")
        }

        self.sb.write("$fnName(")
        match envLocation {
          None => {}
          ClosureEnvLocation.Passthrough => {
            self.sb.write("__env__")
            if !args.isEmpty() {
              self.sb.write(", ")
            }
          }
        }
        for arg, idx in args {
          self.emitIrValueToJsValue(arg)
          if idx != args.length - 1 {
            self.sb.write(", ")
          }
        }
        self.sb.writeln(");")
      }
      Operation.CallValue(ret, fn, args) => {
        if ret != IrType.Unit {
          self.sb.write("const $dst = ")
        }

        self.emitIrValueToJsValue(fn)
        self.sb.write("(")
        for arg, idx in args {
          self.emitIrValueToJsValue(arg)
          if idx != args.length - 1 {
            self.sb.write(", ")
          }
        }
        self.sb.writeln(");")
      }
      Operation.Break => self.sb.writeln("break;")
      Operation.Continue => self.sb.writeln("continue;")
      Operation.Return(value) => {
        self.sb.write("return")
        if value |v| {
          self.sb.write(" ")
          self.emitIrValueToJsValue(v)
        }
        self.sb.writeln(";")
      }
      Operation.OptionNone => {
        self.sb.writeln("const $dst = null;")
      }
      Operation.OptionSome(_, value) => {
        self.sb.write("const $dst = ")
        self.emitIrValueToJsValue(value)
        self.sb.writeln(";")
      }
      Operation.OptionIsNone(value) => {
        self.sb.write("const $dst = ")
        self.emitIrValueToJsValue(value)
        self.sb.writeln(" === null;")
      }
      Operation.OptionUnwrap(_, value) => {
        self.sb.write("const $dst = ")
        self.emitIrValueToJsValue(value)
        self.sb.writeln(";")
      }
      Operation.StructuredToString(prefix, lenVal, fields) => {
        val strIrTy = IrType.Composite(self.ir.knowns.stringType().name)
        val strTemplateLiteralParts = ["`$prefix("]

        for (fieldIrType, fieldName, fieldStrValue), idx in fields {
          val fieldValue = self.irValueToJsValue(fieldStrValue)

          val fieldPart = if fieldIrType == strIrTy { "\"\${$fieldValue}\"" } else { "\${$fieldValue}" }
          val sepPart = if idx == fields.length - 1 { ")" } else { ", " }
          if fieldName.isEmpty() {
            strTemplateLiteralParts.push("$fieldPart$sepPart")
          } else {
            strTemplateLiteralParts.push("$fieldName: $fieldPart$sepPart")
          }
        }
        strTemplateLiteralParts.push("`")

        val buf = self.nextTemp()
        self.sb.writeln("const $buf = \$interp${strTemplateLiteralParts.join()};")

        val strInitFn = self.ir.knowns.stringInitializerFn()
        self.emitIndent()
        val len = self.irValueToJsValue(lenVal)
        self.sb.writeln("const $dst = ${strInitFn.name}($len, $buf);")
      }
      Operation.Builtin(ret, builtin) => {
        match builtin {
          Builtin.Malloc(count, itemTy) => {
            self.sb.write("const $dst = ")
            // If there's no type being malloc'd, then it can be modeled as an object. If the type is Byte then it's
            // modeled as a Uint8Array; otherwise it's just a simple array.
            match itemTy {
              None => self.sb.write("{};")
              IrType.Byte => {
                self.sb.write("new Uint8Array(")
                self.emitIrValueToJsValue(count)
                self.sb.write(");")
              }
              else => self.sb.write("[];")
            }
            self.sb.writeln(" // builtin(malloc)")
          }
          Builtin.Realloc(ptr, count, _) => {
            self.sb.write("const $dst = ")
            self.emitIrValueToJsValue(ptr)
            self.sb.writeln("; // realloc (no-op)")
          }
          Builtin.Store(ptr, value, offset, _) => {
            self.emitIrValueToJsValue(ptr)
            self.sb.write("[")
            self.emitIrValueToJsValue(offset)
            self.sb.write("] = ")
            self.emitIrValueToJsValue(value)
            self.sb.writeln("; // builtin(ptr_store)")
          }
          Builtin.Load(ptr, offset, _) => {
            self.sb.write("const $dst = ")
            self.emitIrValueToJsValue(ptr)
            self.sb.write("[")
            self.emitIrValueToJsValue(offset)
            self.sb.writeln("]; // builtin(ptr_load)")
          }
          Builtin.CopyFrom(dst, dstOffset, src, srcOffset, count, _) => {
            val countVal = self.irValueToJsValue(count)
            self.sb.writeln("for (let i = 0; i < $countVal; i++) {")
            self.indentLevel += 1

            self.emitIndent()
            self.emitIrValueToJsValue(dst)
            self.sb.write("[")
            self.emitIrValueToJsValue(dstOffset)
            self.sb.write(" + i] = ")
            self.emitIrValueToJsValue(src)
            self.sb.write("[")
            self.emitIrValueToJsValue(srcOffset)
            self.sb.writeln(" + i]; // builtin(copy_from)")

            self.indentLevel -= 1
            self.emitIndent()
            self.sb.writeln("}")
          }
          Builtin.I64ToString(int) => {
            val strInitFn = self.ir.knowns.stringInitializerFn()

            val strTmp = self.nextTemp()
            self.sb.write("const $strTmp = \$te.encode(")
            self.emitIrValueToJsValue(int)
            self.sb.writeln(".toString());")

            self.emitIndent()
            self.sb.writeln("const $dst = ${strInitFn.name}($strTmp.length, $strTmp);")
          }
          Builtin.U64ToString(int) => {
            val strInitFn = self.ir.knowns.stringInitializerFn()

            val strTmp = self.nextTemp()
            self.sb.write("const $strTmp = \$te.encode(BigInt.asUintN(64, BigInt(")
            self.emitIrValueToJsValue(int)
            self.sb.writeln(")).toString());")

            self.emitIndent()
            self.sb.writeln("const $dst = ${strInitFn.name}($strTmp.length, $strTmp);")
          }
          Builtin.F64ToString(float) => {
            val strInitFn = self.ir.knowns.stringInitializerFn()

            val floatVal = self.irValueToJsValue(float)

            self.sb.writeln("let $dst;")
            self.emitIndent()
            self.sb.writeln("if ($floatVal === -0) {")
            self.emitIndent()
            self.sb.writeln("  $dst = ${self.makeConstString("-0")};")
            self.emitIndent()
            self.sb.writeln("} else {")

            self.indentLevel += 1
            val strTmp = self.nextTemp()
            self.emitIndent()
            self.sb.writeln("const $strTmp = \$te.encode($floatVal.toPrecision(6).replace(/0+$/, '').replace(/\\.$/, ''));")

            self.emitIndent()
            self.sb.writeln("$dst = ${strInitFn.name}($strTmp.length, $strTmp);")
            self.indentLevel -= 1

            self.emitIndent()
            self.sb.writeln("}")
          }
          Builtin.BoolToString(bool) => {
            val strInitFn = self.ir.knowns.stringInitializerFn()

            val strTmp = self.nextTemp()
            self.sb.write("const $strTmp = \$te.encode(")
            self.emitIrValueToJsValue(bool)
            self.sb.writeln(".toString());")

            self.emitIndent()
            self.sb.writeln("const $dst = ${strInitFn.name}($strTmp.length, $strTmp);")
          }
          Builtin.IntAsFloat(int) => {
            self.sb.write("const $dst = ")
            self.emitIrValueToJsValue(int)
            self.sb.writeln(";")
          }
          Builtin.FloatAsInt(float) => {
            self.sb.write("const $dst = Math.trunc(")
            self.emitIrValueToJsValue(float)
            self.sb.writeln(");")
          }
          Builtin.FloatCeil(float) => {
            self.sb.write("const $dst = Math.ceil(")
            self.emitIrValueToJsValue(float)
            self.sb.writeln(");")
          }
          Builtin.FloatFloor(float) => {
            self.sb.write("const $dst = Math.floor(")
            self.emitIrValueToJsValue(float)
            self.sb.writeln(");")
          }
          Builtin.FloatRound(float) => {
            self.sb.write("const $dst = Math.round(")
            self.emitIrValueToJsValue(float)
            self.sb.writeln(");")
          }
          Builtin.FloatBitsToInt(float) => {
            val floatArray = self.nextTemp()
            self.sb.writeln("const $floatArray = new Float32Array(1);")
            val intArray = self.nextTemp()
            self.sb.writeln("const $intArray = new Uint32Array($floatArray.buffer);")
            self.sb.write("$floatArray[0] = ")
            self.emitIrValueToJsValue(float)
            self.sb.writeln(";")

            self.sb.writeln("const $dst = $intArray[0];")
          }
          Builtin.Uninitialized => {
            self.sb.writeln("const $dst = undefined;")
          }
        }
      }
    }
  }

  func nextTemp(self): String {
    val name = "_t${self.numTemps}"
    self.numTemps += 1
    name
  }

  func emitIndent(self) {
    self.sb.write("  ".repeat(self.indentLevel))
  }

  func emitIrConstToJsValue(self, c: Const) = self.sb.write(self.irConstToJsValue(c))

  func irConstToJsValue(self, const: Const): String = match const {
    Const.Int(i) => {
      // JS can only accurately represent integer literals up to 53 bits; otherwise BigInt is required (see `Number.MAX_SAFE_INTEGER` in JS)
      val jsMaxSafeInteger = (1 << 53) + 1
      if i.abs() > jsMaxSafeInteger {
        "${i}n"
      } else {
        i.toString()
      }
    }
    Const.Float(f) => f.toString()
    Const.Bool(b) => b.toString()
    Const.Char(c) => c.toString()
    Const.String(s) => self.makeConstString(s)
  }

  func makeConstString(self, s: String): String {
    val str = s.replaceAll("\\", "\\\\").replaceAll("\"", "\\\"").replaceAll("\n", "\\n").replaceAll("\r", "\\r")
    "\$mkstr(${s.length}, \"$str\")"
  }

  func emitIrValueToJsValue(self, v: Value) = self.sb.write(self.irValueToJsValue(v))

  func irValueToJsValue(self, v: Value): String {
    match v {
      Value.Unit => unreachable("values cannot be of type unit")
      Value.Const(const) => self.irConstToJsValue(const)
      Value.Ident(i) => i.kind.name()
      Value.Global(g) => g.name
    }
  }
}
