// When executed directly, this will perform typechecking, starting at the module at the given path
// and recursively loading and typechecking imported modules. When typechecking is complete, the
// Project will be filled in with TypedModules, each of which contain a typed AST and other useful
// data.
// This is split out into a separate runnable file so that the test-specific code is never compiled into
// the actual resulting binary; this results in a separate binary being compiled which is only used for
// testing.

import "process" as process
import getAbsolutePath from "./utils"
import ModuleLoader, Project, Typechecker, TypedModule from "./typechecker"
import Jsonifier from "./typechecker_test_utils"

func verifyStdModule(modulesSortedById: TypedModule[], expectedId: Int, name: String): Bool {
  if modulesSortedById[expectedId] |m| {
    if !m.name.endsWith("/$name.abra") {
      println("Error: $name module misconfigured")
      return false
    }
  } else {
    println("Error: no $name module defined!")
    return false
  }

  true
}

func main() {
  val abraStdRoot = try process.getEnvVar("ABRA_HOME") else {
    println("Could not find ABRA_HOME (make sure \$ABRA_HOME environment variable is set)")
    return
  }

  val args = process.args()

  if args[1] |fileName| {
    val printModulesOnError = if args[2] |arg| arg == "--print-mods-on-err" else false

    val absPathSegs = getAbsolutePath(fileName)
    val filePathAbs = "/" + absPathSegs.join("/")

    val moduleLoader = ModuleLoader(stdRoot: abraStdRoot)
    val project = Project()
    val typechecker = Typechecker(moduleLoader: moduleLoader, project: project)
    typechecker.typecheckEntrypoint(filePathAbs)

    if !printModulesOnError {
      val readFileErrors: String[] = []
      val errorMessages: String[] = []
      for mod in project.modules.values().sortBy(m => -m.id) {
        if mod.readFileError {
          readFileErrors.push(mod.name)
          continue
        }

        val contents = try moduleLoader.loadFileContents(mod.name) else {
          // Any unreadable modules should have had the `readFileError` field set, which is checked above
          unreachable("Could not read file '${mod.name}'")
        }

        for err in mod.lexParseErrors {
          errorMessages.push(err.getMessage(mod.name, contents))
        }

        for err in mod.typeErrors {
          errorMessages.push(err.getMessage(mod.name, contents))
        }
      }

      if !errorMessages.isEmpty() {
        for msg, idx in errorMessages {
          println(msg)
          if idx != errorMessages.length - 1 println() // spacer
        }

        return
      } else if !readFileErrors.isEmpty() {
        for path, idx in readFileErrors {
          println("Could not read file '$path'")
          if idx != readFileErrors.length - 1 println() // spacer
        }

        return
      }
    }

    val allModules = project.modules.values().sortBy(m => m.id)

    if !verifyStdModule(allModules, 0, "_intrinsics") return
    if !verifyStdModule(allModules, 1, "libc") return
    if !verifyStdModule(allModules, 2, "prelude") return

    Jsonifier(allowPlaceholderNodes: printModulesOnError)
      .printModules(allModules[3:])
  } else {
    println("Missing required argument <file-name>")
  }
}

main()
