export enum JsonValue {
  Null
  Number(value: Either<Int, Float>)
  String(value: String)
  Boolean(value: Bool)
  Array(items: JsonValue[])
  Object(obj: JsonObject)

  func encode(self): String {
    match self {
      JsonValue.Null => "null"
      JsonValue.Number(value) => match value {
        Either.Left(int) => int.toString()
        Either.Right(float) => float.toString()
      }
      JsonValue.String(value) => "\"$value\""
      JsonValue.Boolean(value) => value.toString()
      JsonValue.Array(items) => {
        val itemStrs: String[] = Array.withCapacity(items.length)
        for item in items {
          itemStrs.push(item.encode())
        }
        "[${itemStrs.join(",")}]"
      }
      JsonValue.Object(obj) => {
        val itemStrs: String[] = Array.withCapacity(obj._map.size)
        for (k, v) in obj._map {
          itemStrs.push("\"$k\":${v.encode()}")
        }
        "{${itemStrs.join(",")}}"
      }
    }
  }

  func kind(self): JsonValueKind = match self {
    JsonValue.Null => JsonValueKind.Null
    JsonValue.Number => JsonValueKind.Number
    JsonValue.String => JsonValueKind.String
    JsonValue.Boolean => JsonValueKind.Boolean
    JsonValue.Array => JsonValueKind.Array
    JsonValue.Object => JsonValueKind.Object
  }

  func asNumber(self): Result<Either<Int, Float>, JsonError> = match self {
    JsonValue.Number(v) => Ok(v)
    else => Err(JsonError.TypeMismatch(expected: JsonValueKind.Number, actual: self.kind()))
  }

  func asString(self): Result<String, JsonError> = match self {
    JsonValue.String(v) => Ok(v)
    else => Err(JsonError.TypeMismatch(expected: JsonValueKind.String, actual: self.kind()))
  }

  func asBoolean(self): Result<Bool, JsonError> = match self {
    JsonValue.Boolean(v) => Ok(v)
    else => Err(JsonError.TypeMismatch(expected: JsonValueKind.Boolean, actual: self.kind()))
  }

  func asArray(self): Result<JsonValue[], JsonError> = match self {
    JsonValue.Array(v) => Ok(v)
    else => Err(JsonError.TypeMismatch(expected: JsonValueKind.Array, actual: self.kind()))
  }

  func asObject(self): Result<JsonObject, JsonError> = match self {
    JsonValue.Object(v) => Ok(v)
    else => Err(JsonError.TypeMismatch(expected: JsonValueKind.Object, actual: self.kind()))
  }
}

export enum JsonError {
  TypeMismatch(expected: JsonValueKind, actual: JsonValueKind)
  NoSuchKey(key: String)
}

export type JsonObject {
  _map: Map<String, JsonValue> = {}

  func set(self, key: String, value: JsonValue) {
    self._map[key] = value
  }

  func getValueRequired(self, key: String): Result<JsonValue, JsonError> =
    if self._map[key] |v| Ok(v) else Err(JsonError.NoSuchKey(key))
  func getValue(self, key: String): JsonValue? = self._map[key]

  func getNumberRequired(self, key: String): Result<Either<Int, Float>, JsonError> {
    match self._map[key] {
      None => Err(JsonError.NoSuchKey(key))
      JsonValue.Number(v) => Ok(v)
      else v => Err(JsonError.TypeMismatch(expected: JsonValueKind.Number, actual: v.kind()))
    }
  }

  func getNumber(self, key: String): Either<Int, Float>? =
    match self.getNumberRequired(key) { Ok(v) => Some(v), Err => None }

  func getStringRequired(self, key: String): Result<String, JsonError> {
    match self._map[key] {
      None => Err(JsonError.NoSuchKey(key))
      JsonValue.String(v) => Ok(v)
      else v => Err(JsonError.TypeMismatch(expected: JsonValueKind.String, actual: v.kind()))
    }
  }

  func getString(self, key: String): String? =
    match self.getStringRequired(key) { Ok(v) => Some(v), Err => None }

  func getBooleanRequired(self, key: String): Result<Bool, JsonError> {
    match self._map[key] {
      None => Err(JsonError.NoSuchKey(key))
      JsonValue.Boolean(v) => Ok(v)
      else v => Err(JsonError.TypeMismatch(expected: JsonValueKind.Boolean, actual: v.kind()))
    }
  }

  func getArrayRequired(self, key: String): Result<JsonValue[], JsonError> {
    match self._map[key] {
      None => Err(JsonError.NoSuchKey(key))
      JsonValue.Array(v) => Ok(v)
      else v => Err(JsonError.TypeMismatch(expected: JsonValueKind.Array, actual: v.kind()))
    }
  }

  func getObjectRequired(self, key: String): Result<JsonObject, JsonError> {
    match self._map[key] {
      None => Err(JsonError.NoSuchKey(key))
      JsonValue.Object(v) => Ok(v)
      else v => Err(JsonError.TypeMismatch(expected: JsonValueKind.Object, actual: v.kind()))
    }
  }

  func getObject(self, key: String): JsonObject? =
    match self.getObjectRequired(key) { Ok(v) => Some(v), Err => None }
}

export enum JsonValueKind {
  Null
  Number
  String
  Boolean
  Array
  Object
}

export enum JsonParseError {
  UnterminatedString
  InvalidCharacterInString
  UnexpectedEndOfNumber
  UnexpectedEof
  EofExpected
  CommaExpected
  CommaOrClosingBracketExpected
  ColonExpected
  ObjectPropertyExpected
  ValueExpected
}

export type JsonParser {
  _chars: CharsIterator

  func parseString(string: String): Result<JsonValue, JsonParseError> {
    val charsIter = string.chars()
    val parser = JsonParser(_chars: charsIter)

    val jsonValue = try parser._parseJsonValue()

    if charsIter.next() return Err(JsonParseError.EofExpected)
    return Ok(jsonValue)
  }

  func _parseJsonValue(self): Result<JsonValue, JsonParseError> {
    self._skipWhitespace()

    val jsonValue = match self._chars.peek() {
      None => return Err(JsonParseError.UnexpectedEof)
      '"' => {
        val str = try self._parseJsonString()
        JsonValue.String(str)
      }
      '[' => try self._parseJsonArray()
      '{' => try self._parseJsonObject()
      _ ch => {
        if ch == '-' || ch.isDigit() {
          try self._parseJsonNumber(ch)
        } else if ch == 'n' {
          try self._parseJsonNull()
        } else if ch == 't' {
          try self._parseJsonTrue()
        } else if ch == 'f' {
          try self._parseJsonFalse()
        } else {
          return Err(JsonParseError.ValueExpected)
        }
      }
    }

    self._skipWhitespace()

    Ok(jsonValue)
  }

  func _parseJsonArray(self): Result<JsonValue, JsonParseError> {
    self._chars.next() // Consume initial '['

    val items: JsonValue[] = []
    var closed = false
    var nextValueExpected = false

    while self._chars.peek() |ch| {
      if ch == ']' {
        closed = true
        self._chars.next() // consume ']'
        break
      }

      val item = try self._parseJsonValue()
      items.push(item)

      if self._chars.peek() |peekChar| {
        if peekChar == ',' {
          nextValueExpected = true
          self._chars.next() // consume ','
        } else if peekChar == ']' {
          closed = true
          nextValueExpected = false
          self._chars.next() // consume ']'
          break
        } else {
          return Err(JsonParseError.CommaExpected)
        }
      }
    }

    if !closed return Err(JsonParseError.CommaOrClosingBracketExpected)
    if nextValueExpected return Err(JsonParseError.ValueExpected)

    Ok(JsonValue.Array(items))
  }

  func _parseJsonObject(self): Result<JsonValue, JsonParseError> {
    self._chars.next() // Consume initial '{'

    val obj = JsonObject()
    var closed = false
    var nextValueExpected = false

    while self._chars.peek() {
      self._skipWhitespace()
      val key = match self._chars.peek() {
        '"' => try self._parseJsonString()
        '}' => {
          closed = true
          self._chars.next() // Consume '}'
          break
        }
        _ => return Err(JsonParseError.ObjectPropertyExpected)
      }
      self._skipWhitespace()

      match self._chars.peek() {
        ':' => self._chars.next() // consume ':'
        _ => return Err(JsonParseError.ColonExpected)
      }

      val value = try self._parseJsonValue()

      obj._map[key] = value

      if self._chars.peek() |peekChar| {
        if peekChar == ',' {
          nextValueExpected = true
          self._chars.next() // consume ','
        } else if peekChar == '}' {
          nextValueExpected = false
          closed = true
          self._chars.next() // consume '}'
          break
        } else {
          return Err(JsonParseError.CommaExpected)
        }
      }
    }

    if !closed return Err(JsonParseError.CommaOrClosingBracketExpected)
    if nextValueExpected return Err(JsonParseError.ObjectPropertyExpected)

    Ok(JsonValue.Object(obj))
  }

  func _parseJsonString(self): Result<String, JsonParseError> {
    self._chars.next() // Consume initial '"'

    val chars: Char[] = []
    var closed = false
    while self._chars.next() |ch| {
      if ch == '"' {
        closed = true
        break
      }

      val char = if ch == '\\' {
        val ch = try self._chars.next() else return Err(JsonParseError.UnterminatedString)
        match ch {
          '"' => '"'
          '\\' => '\\'
          // TODO: fix when \b and \f are parsed by the abra lexer
          'b' => Char.fromInt(0x8) // '\b'
          'f' => Char.fromInt(0xc) // '\f'
          'n' => '\n'
          'r' => '\r'
          't' => '\t'
          '/' => '/'
          'u' => {
            var num = 0
            // byte 1
            var ch = try self._chars.next() else return Err(JsonParseError.UnexpectedEof)
            num *= 16
            num += (try charAsHexDigit(ch) else return Err(JsonParseError.InvalidCharacterInString))
            // byte 2
            ch = try self._chars.next() else return Err(JsonParseError.UnexpectedEof)
            num *= 16
            num += (try charAsHexDigit(ch) else return Err(JsonParseError.InvalidCharacterInString))
            // byte 3
            ch = try self._chars.next() else return Err(JsonParseError.UnexpectedEof)
            num *= 16
            num += (try charAsHexDigit(ch) else return Err(JsonParseError.InvalidCharacterInString))
            // byte 4
            ch = try self._chars.next() else return Err(JsonParseError.UnexpectedEof)
            num *= 16
            num += (try charAsHexDigit(ch) else return Err(JsonParseError.InvalidCharacterInString))

            Char.fromInt(num)
          }
          _ => return Err(JsonParseError.InvalidCharacterInString)
        }
      } else if 0x20 <= ch.asInt() && ch.asInt() <= 0x10ffff {
        ch
      } else {
        return Err(JsonParseError.InvalidCharacterInString)
      }
      chars.push(char)
    }

    if !closed return Err(JsonParseError.UnterminatedString)
    Ok(String.fromChars(chars))
  }

  func _parseIntegerPart(self, ch: Char): Result<Int, JsonParseError> {
    if !ch.isDigit() return Err(JsonParseError.UnexpectedEndOfNumber)

    val integer = if ch == '0' {
      0
    } else {
      var num = ch.asInt() - '0'.asInt()
      while self._chars.peek() |next| {
        if !next.isDigit() break
        self._chars.next() // consume digit

        num *= 10
        num += (next.asInt() - '0'.asInt())
      }
      num
    }

    Ok(integer)
  }

  func _parseFracPart(self): Result<Float, JsonParseError> {
    val initial = try self._chars.next() else return Err(JsonParseError.UnexpectedEndOfNumber)
    if !initial.isDigit() return Err(JsonParseError.UnexpectedEndOfNumber)

    var frac = initial.asInt() - '0'.asInt()
    var pow = 1
    while self._chars.peek() |next| {
      if !next.isDigit() break
      self._chars.next() // consume digit

      pow += 1
      frac *= 10
      frac += (next.asInt() - '0'.asInt())
    }

    // FIXME(#516)
    Result.Ok(frac / (10**pow))
  }

  func _parseExpPart(self): Result<Int, JsonParseError> {
    var ch = try self._chars.next() else return Err(JsonParseError.UnexpectedEndOfNumber)
    val expSign = if ch == '-' { -1 } else { 1 }
    if ch == '-' || ch == '+' {
      ch = try self._chars.next() else return Err(JsonParseError.UnexpectedEndOfNumber)
    }

    if !ch.isDigit() return Err(JsonParseError.UnexpectedEndOfNumber)

    var exp = ch.asInt() - '0'.asInt()
    while self._chars.peek() |next| {
      if !next.isDigit() break
      self._chars.next() // consume digit

      exp *= 10
      exp += (next.asInt() - '0'.asInt())
    }

    Ok(expSign * exp)
  }

  func _parseJsonNumber(self, initial: Char): Result<JsonValue, JsonParseError> {
    self._chars.next() // Consume initial char (provided as a parameter)

    val sign = if initial == '-' { -1 } else { 1 }
    val ch = if initial == '-' {
      try self._chars.next() else return Err(JsonParseError.UnexpectedEof)
    } else {
      initial
    }

    val integerPart = try self._parseIntegerPart(ch)

    val float = match self._chars.peek() {
      '.' => {
        self._chars.next() // consume '.'
        val fracPart = try self._parseFracPart()
        integerPart + fracPart
      }
      'e' => integerPart.asFloat()
      'E' => integerPart.asFloat()
      _ => return Ok(JsonValue.Number(Either.Left(sign * integerPart)))
    }

    val res = match self._chars.peek() {
      'e' => {
        self._chars.next() // consume 'e'
        val exp = try self._parseExpPart()
        sign * float * (10**exp)
      }
      'E' => {
        self._chars.next() // consume 'E'
        val exp = try self._parseExpPart()
        sign * float * (10**exp)
      }
      _ => sign * float
    }

    Ok(JsonValue.Number(Either.Right(res)))
  }

  func _parseIdent(self, ident: String): Bool {
    self._chars.next() // consume first char

    val expectedChars = ident.chars()
    expectedChars.next() // skip first char, since we know it's correct

    for ch in expectedChars {
      if self._chars.peek() |peek| {
        if peek != ch {
          return false
        }

        self._chars.next() // consume next char
      } else {
        return false
      }
    }

    self._skipWhitespace()

    if self._chars.peek() |ch| {
      if !(ch == ']' || ch == '}' || ch == ',') return false
    }

    true
  }

  func _parseJsonNull(self): Result<JsonValue, JsonParseError> =
    if self._parseIdent("null") Ok(JsonValue.Null) else Err(JsonParseError.ValueExpected)

  func _parseJsonTrue(self): Result<JsonValue, JsonParseError> =
    if self._parseIdent("true") Ok(JsonValue.Boolean(true)) else Err(JsonParseError.ValueExpected)

  func _parseJsonFalse(self): Result<JsonValue, JsonParseError> =
    if self._parseIdent("false") Ok(JsonValue.Boolean(false)) else Err(JsonParseError.ValueExpected)

  func _skipWhitespace(self) {
    while self._chars.peek() |ch| {
      if ch == ' ' || ch == '\n' || ch == '\r' || ch == '\t' {
        self._chars.next() // consume ws
      } else {
        break
      }
    }
  }
}

func charAsHexDigit(ch: Char): Int? {
  if '0'.asInt() <= ch.asInt() && ch.asInt() <= '9'.asInt() return Some(ch.asInt() - '0'.asInt())
  if 'a'.asInt() <= ch.asInt() && ch.asInt() <= 'f'.asInt() return Some(ch.asInt() - 'a'.asInt() + 10)
  if 'A'.asInt() <= ch.asInt() && ch.asInt() <= 'F'.asInt() return Some(ch.asInt() - 'A'.asInt() + 10)

  None
}
