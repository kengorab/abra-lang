import "./_intrinsics" as intrinsics
import Pointer, Byte from "./_intrinsics"
import "libc" as libc
import "io" as io

var _args: String[]? = None
pub func args(): String[] {
  if _args |args| return args

  val argc = intrinsics.argc()
  val argv = intrinsics.argv()

  val args: String[] = Array.withCapacity(argc)
  for i in 0:argc {
    val str = argv.loadAt(i)
    val len = libc.strlen(str)
    args.push(String(length: len, _buffer: str))
  }

  _args = Some(args)
  args
}

pub func getEnvVar(name: String): String? {
  val str = libc.getenv(name._buffer)
  if str.isNullPtr() return None

  val len = libc.strlen(str)
  Some(String(length: len, _buffer: str))
}

pub type Uname {
  pub sysname: String
  pub nodename: String
  pub release: String
  pub version: String
  pub machine: String
}

var _uname: Uname? = None
pub func uname(): Uname {
  if _uname |uname| return uname

  // On macOS, each field in the utsname struct is a char[256]; on other platforms it's different, so
  // this can be wasteful of memory.
  var utsnameBuf = Pointer.malloc<Byte>(256 * 5)
  val res = libc.uname(utsnameBuf)
  if res != 0 { /* todo: handle error code */ }

  val sysnameLen = libc.strlen(utsnameBuf)
  val sysname = String.withLength(sysnameLen)
  sysname._buffer.copyFrom(0, utsnameBuf, 0, sysnameLen)

  // The utsname struct has 5 fields (6 on some platforms), of constant and equal sizes, but the size of
  // each field differs per platform. After extracting the first string, skip over the \0 padding bytes
  // until we reach the start of the next string. From that offset, we can determine the size of each field,
  // and extract the remaining fields more efficiently.
  var offset = sysnameLen
  while utsnameBuf.loadAt(offset).asInt() == 0 { offset += 1 }
  var cursor = offset

  val nodenameLen = libc.strlen(utsnameBuf)
  val nodename = String.withLength(nodenameLen)
  nodename._buffer.copyFrom(0, utsnameBuf, cursor, nodenameLen)
  cursor += sysnameLen

  val releaseLen = libc.strlen(utsnameBuf)
  val release = String.withLength(releaseLen)
  release._buffer.copyFrom(0, utsnameBuf, cursor, releaseLen)
  cursor += sysnameLen

  val versionLen = libc.strlen(utsnameBuf)
  val version = String.withLength(versionLen)
  version._buffer.copyFrom(0, utsnameBuf, cursor, versionLen)
  cursor += sysnameLen

  val machineLen = libc.strlen(utsnameBuf)
  val machine = String.withLength(machineLen)
  machine._buffer.copyFrom(0, utsnameBuf, cursor, machineLen)

  val uname = Uname(sysname: sysname, nodename: nodename, release: release, version: version, machine: machine)
  _uname = Some(uname)
  uname
}

// todo: don't duplicate this, but for now it doesn't matter
pub decorator noreturn { }

@noreturn
pub func exit(status = 1) = libc.exit(status)

pub func getStackTrace(message = "Stack trace:"): String {
  val frames = callstack()
  val lines = [message]
  // Skip first frame, which will be the call to `callstack()` itself
  for frame in frames[1:] {
    lines.push("  at ${frame.callee} (${frame.file}:${frame.line})")
  }
  lines.join("\n")
}

pub type StackFrame {
  callee: String
  file: String
  line: Int
}

pub func callstack(): StackFrame[] {
  val s = intrinsics.callstack()
  var sp = (intrinsics.callstackPtr() / 8).floor() - 1

  val moduleNames = getModuleNames()
  val functionNames = getFunctionNames()

  val stack = Array.withCapacity<StackFrame>(sp)
  while sp >= 0 {
    val frame = s.loadAt(sp)

    val line = frame && 0xffff

    val modId = (frame >> 16) && 0xff
    val modName = if modId == 0 {
      "<builtin>"
    } else if moduleNames[modId - 1] |name| {
      name
    } else {
      "unknown"
    }

    val fnId = (frame >> 32) && 0xff
    val fnName = if fnId == 0 {
      "<expression>"
    } else if functionNames[fnId - 1] |name| {
      name
    } else {
      "unknown"
    }

    stack.push(StackFrame(callee: fnName, file: modName, line: line))
    sp -= 1
  }

  stack
}

var _moduleNames: String[]? = None
func getModuleNames(): String[] {
  if _moduleNames |moduleNames| return moduleNames

  val moduleNames: String[] = []
  val buf = intrinsics.moduleNames()
  var idx = 0
  var len = 0
  while true {
    val byte = buf.loadAt(idx).asInt()
    if byte == 0 {
      if len == 0 break

      val str = String.withLength(len)
      str._buffer.copyFrom(0, buf, idx - len, len)
      moduleNames.push(str)

      idx += 1
      len = 0
      continue
    }

    idx += 1
    len += 1
  }

  _moduleNames = Some(moduleNames)
  moduleNames
}

var _functionNames: String[]? = None
func getFunctionNames(): String[] {
  if _functionNames |functionNames| return functionNames

  val functionNames: String[] = []
  val buf = intrinsics.functionNames()
  var idx = 0
  var len = 0
  while true {
    val byte = buf.loadAt(idx).asInt()
    if byte == 0 {
      if len == 0 break

      val str = String.withLength(len)
      str._buffer.copyFrom(0, buf, idx - len, len)
      functionNames.push(str)

      idx += 1
      len = 0
      continue
    }

    idx += 1
    len += 1
  }

  _functionNames = Some(functionNames)
  functionNames
}

type Stdin {
  _buf: Pointer<Byte> = Pointer.malloc(1024)

  pub func readAsString(self): String? {
    var nread = libc.read(libc.STDIN_FILENO, self._buf, 1024)
    if nread == 0 return None

    val str = String.withLength(nread)
    str._buffer.copyFrom(0, self._buf, 0, nread)
    return Some(str)
  }
}

var _stdin: Stdin? = None
pub func stdin(): Stdin {
  if _stdin |stdin| return stdin

  val stdin = Stdin()
  _stdin = Some(stdin)
  stdin
}

pub enum ExitStatus {
  Success
  Failure(code: Int)
  Signaled(signal: Int)

  pub func isSuccess(self): Bool = self == ExitStatus.Success
}

pub type CommandOutput {
  pub status: ExitStatus
  pub stdout: String
  pub stderr: String
}

pub type Command {
  pub program: String
  pub arguments: String[] = []

  pub func addArg(self, arg: String): Command {
    self.arguments.push(arg)
    self
  }

  pub func execAndCaptureOutput(self): CommandOutput {
    val stdoutPipe = try io.makePipe() else |e| unreachable(""+e)
    val stderrPipe = try io.makePipe() else |e| unreachable(""+e)

    val pid = libc.fork()
    if pid < 0 unreachable("fork failed")

    if pid == 0 {
      val arguments = [self.program._buffer]
      for arg in self.arguments {
        arguments.push(arg._buffer)
      }
      arguments.push(libc.NULL())

      libc.close(stdoutPipe.readerFd)
      if libc.dup2(stdoutPipe.writerFd, libc.STDOUT_FILENO) < 0 unreachable("failed to set up stdout redirect")
      libc.close(stdoutPipe.writerFd)

      libc.close(stderrPipe.readerFd)
      if libc.dup2(stderrPipe.writerFd, libc.STDERR_FILENO) < 0 unreachable("failed to set up stderr redirect")
      libc.close(stderrPipe.writerFd)

      libc.execvp(self.program._buffer, arguments._buffer)
      unreachable("current process is replaced by program execution")
    } else {
      libc.close(stdoutPipe.writerFd)
      libc.close(stderrPipe.writerFd)

      val stdout = io.BufferedReader(fd: stdoutPipe.readerFd)
      val stdoutOutput = (try stdout.readAllToString() else unreachable("failed to read from stdoutPipe write end")).trimEnd()

      val stderr = io.BufferedReader(fd: stderrPipe.readerFd)
      val stderrOutput = (try stderr.readAllToString() else unreachable("failed to read from stderrPipe write end")).trimEnd()

      libc.close(stdoutPipe.readerFd)
      libc.close(stderrPipe.readerFd)

      val status = Pointer.malloc<Int>(1)
      while true {
        if libc.wait(status) < 0 unreachable("failed to wait on child process")

        val wstatus = status.loadAt(0)
        if libc.WIFEXITED(wstatus) {
          val exitStatus = libc.WEXITSTATUS(wstatus)
          if exitStatus != 0 {
            return CommandOutput(status: ExitStatus.Failure(code: exitStatus), stdout: stdoutOutput, stderr: stderrOutput)
          }

          break
        }

        if libc.WIFSIGNALED(wstatus) {
          val signal = libc.WTERMSIG(wstatus)
          return CommandOutput(status: ExitStatus.Signaled(signal: signal), stdout: stdoutOutput, stderr: stderrOutput)
        }
      }

      CommandOutput(status: ExitStatus.Success, stdout: stdoutOutput, stderr: stderrOutput)
    }
  }
}
