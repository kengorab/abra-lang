import "./_intrinsics" as intrinsics
import Pointer, Byte from "./_intrinsics"
import "libc" as libc

func stdoutWrite(str = "") {
  if !str.isEmpty() libc.write(libc.STDOUT_FILENO, str._buffer, str.length)
}

func stdoutWriteln(str = "") {
  stdoutWrite(str)
  stdoutWrite("\n")
}

//func print(*items: Any[]) {
//  for i in range(0, items.length) {
//    val item = items._buffer.offset(i).load()
//    stdoutWrite(item.toString())
//
//    if i != items.length - 1 {
//      stdoutWrite(" ")
//    }
//  }
//}
//
//func println(*items: Any[]) {
//  print(items: items)
//  stdoutWrite("\n")
//}

pub enum Option<V> {
  Some(value: V)
  None
}

func Some<T>(value: T): Option<T> = Option.Some(value)

pub enum Result<V, E> {
  Ok(value: V)
  Err(error: E)

  pub func map<U>(self, fn: (V) => U): Result<U, E> = match self { Ok(v) => Ok(fn(v)), Err(e) => Err(e) }
  pub func mapErr<F>(self, fn: (E) => F): Result<V, F> = match self { Ok(v) => Ok(v), Err(e) => Err(fn(e)) }
}

func Ok<V, E>(value: V): Result<V, E> = Result.Ok(value)
func Err<V, E>(error: E): Result<V, E> = Result.Err(error)

pub enum Either<L, R> {
  Left(left: L)
  Right(right: R)
}

type RangeIterator {
  start: Int
  end: Int
  stepBy: Int
  _i: Int = 0

  pub func next(self): Int? {
    val offset = self._i * self.stepBy
    if self.start + offset >= self.end {
      None
    } else {
      self._i += 1
      Some(self.start + offset)
    }
  }
}

pub func range(start: Int, end: Int, stepBy = 1): RangeIterator = RangeIterator(start: start, end: end, stepBy: stepBy)

type Int {
  pub func asByte(self): Byte = Byte.fromInt(self)

  pub func asFloat(self): Float = intrinsics.intAsFloat(self)

  pub func abs(self): Int = if self < 0 { -self } else { self }

  pub func asBase(self, base: Int): String? {
    if self == 0 return Some("0")

    if !((2 <= base && base <= 36) || base == 62) return None

    // TODO: Extract to constants on String (when static members are a thing)
    val digits = "0123456789abcdefghijklmnopqrstuvwxyz"
    val digitsBase62 = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"

    val isNeg = self < 0
    var number = self.abs()

    var maxPower = 1
    while base ** maxPower <= number {
      maxPower += 1
    }

    if isNeg { maxPower += 1 }
    val str = String.withLength(maxPower)
    var i = maxPower - 1

    while number != 0 {
      val rem = number % base
      val D = if base == 62 digitsBase62 else digits
      str._buffer.offset(i).store(D._buffer.offset(rem).load())
      i -= 1
      number = (number / base).asInt()
    }

    if isNeg {
      str._buffer.offset(i).store(Byte.fromInt(45)) // '-'
    }

    Some(str)
  }

  pub func binary(self): String = "0b" + (self.asBase(2) ?: "")

  pub func hex(self): String = "0x" + (self.asBase(16) ?: "")

  pub func isEven(self): Bool = self % 2 == 0

  pub func isOdd(self): Bool = self % 2 != 0

  pub func isBetween(self, lower: Int, upper: Int, inclusive = false): Bool {
    if inclusive {
      lower <= self && self <= upper
    } else {
      lower < self && self < upper
    }
  }

  pub func nextPowerOf2(self): Int {
    var pow = 1
    while pow < self {
      pow = pow << 1
    }
    pow
  }

  pub func unsignedToString(self): String = intrinsics.u64ToString(self)
}

type Float {
  pub func asInt(self): Int = intrinsics.floatAsInt(self)

  pub func abs(self): Float = if self < 0.0 { -self } else { self }

  pub func floor(self): Int = intrinsics.floor(self)

  pub func ceil(self): Int = intrinsics.ceil(self)

  pub func round(self): Int = intrinsics.round(self)

  pub func withPrecision(self, precision: Int): Float {
    if precision < 0 return self
    if precision == 0 return intrinsics.round(self).asFloat()

    val factor = 10 ** precision
    intrinsics.round(self * factor) / factor
  }
}

type Bool {
  // No methods for Bool
}

type Char {
  pub func fromInt(value: Int): Char = intrinsics.intAsChar(value)

  pub func toString(self): String {
    val byteVals = self.bytes()
    if byteVals.isEmpty() return "ï¿½"

    val str = String.withLength(byteVals.length)

    for b, idx in byteVals {
      str._buffer.offset(idx).store(b.asByte())
    }

    str
  }

  pub func asInt(self): Int = intrinsics.charAsInt(self)

  pub func bytes(self): Int[] {
    val value = self.asInt()

    if !(value.isBetween(0, 0xD7FF, true) || value.isBetween(0xE000, 0x10FFFF, true)) return []

    if value.isBetween(0, 0x007F, true) {
      [value]
    } else if value.isBetween(0x0080, 0x07FF, true) {
      val b1 = 0b11000000 || ((value && 0b11111000000)) >> 6
      val b2 = 0b10000000 || (value && 0b00000111111)
      [b1, b2]
    } else if value.isBetween(0x0800, 0xFFFF, true) {
      val b1 = 0b11100000 || ((value && 0b1111000000000000) >> 12)
      val b2 = 0b10000000 || ((value && 0b0000111111000000) >> 6)
      val b3 = 0b10000000 || (value && 0b0000000000111111)
      [b1, b2, b3]
    } else if value.isBetween(0x10000, 0x10FFFF, true) {
      val b1 = 0b11110000 || ((value && 0b111000000000000000000)) >> 18
      val b2 = 0b10000000 || ((value && 0b000111111000000000000)) >> 12
      val b3 = 0b10000000 || ((value && 0b000000000111111000000)) >> 6
      val b4 = 0b10000000 || (value && 0b000000000000000111111)
      [b1, b2, b3, b4]
    } else {
      []
    }
  }

  pub func isDigit(self): Bool {
    val ch = self.asInt()
    48 <= ch && ch <= 57
  }

  pub func isAlpha(self): Bool {
    val ch = self.asInt()
    (65 <= ch && ch <= 90) || (97 <= ch && ch <= 122)
  }

  pub func isAlphanumeric(self): Bool {
    val ch = self.asInt()
    (48 <= ch && ch <= 57) || (65 <= ch && ch <= 90) || (97 <= ch && ch <= 122)
  }
}

type CharsIterator {
  _bytes: Pointer<Byte>
  _numBytes: Int
  _i: Int = 0
  _peekChar: Char? = None

  pub func peek(self): Char? {
    if self._peekChar return self._peekChar

    val peekChar = self._decodeChar()
    self._peekChar = peekChar
    peekChar
  }

  pub func next(self): Char? {
    if self._peekChar {
      val peekChar = self._peekChar
      self._peekChar = None
      return peekChar
    }

    self._decodeChar()
  }

  func _decodeChar(self): Char? {
    if self._i >= self._numBytes return None

    val b1 = self._bytes.offset(self._i).load().asInt()
    self._i += 1
    if b1 < 128 return Some(Char.fromInt(b1))

    // Begin multi-byte cases, obtain first continuation byte
    if self._i >= self._numBytes unreachable("invalid utf-8 encoding: continuation byte expected given first byte ${b1.hex()}")
    val b2 = self._bytes.offset(self._i).load().asInt()
    self._i += 1

    // 3-byte case
    if b1 >= 0b11100000 {
      if self._i >= self._numBytes unreachable("invalid utf-8 encoding: continuation byte expected given first byte ${b1.hex()}")
      val b3 = self._bytes.offset(self._i).load().asInt()
      self._i += 1

      // 4-byte case
      if b1 >= 0b11110000 {
        if self._i >= self._numBytes unreachable("invalid utf-8 encoding: continuation byte expected given first byte ${b1.hex()}")
        val b4 = self._bytes.offset(self._i).load().asInt()
        self._i += 1

        val ch = ((b1 && 0b00000111) << 18) || ((b2 && 0b00111111) << 12) || ((b3 && 0b00111111) << 6) || (b4 && 0b00111111)
        return Some(Char.fromInt(ch))
      }

      val ch = ((b1 && 0b00001111) << 12) || ((b2 && 0b00111111) << 6) || (b3 && 0b00111111)
      return Some(Char.fromInt(ch))
    }

    val ch = ((b1 && 0b00011111) << 6) || (b2 && 0b00111111)
    Some(Char.fromInt(ch))
  }
}

type String {
  pub length: Int
  _buffer: Pointer<Byte>

  pub func withLength(length: Int): String {
    // Allocate length + 1 bytes; each String ends in a \0 byte. Even though we know the length, and memory-based
    // operations on a String instance should always use the length field, it should still always be the case that
    // `libc.strlen(self._buffer)` is equal to `self.length`.
    String(length: length, _buffer: Pointer.malloc(length + 1))
  }

  pub func random(length: Int, choices = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"): String {
    // TODO: this implementation is pretty bad, and it also relies on using `%` with libc.rand() which allows for skew.
    //       But it's fine for now.

    val str = String.withLength(length)

    for i in range(0, length) {
      val ch = choices._buffer.offset(libc.rand() % choices.length).load()
      str._buffer.offset(i).store(ch)
    }

    str
  }

  pub func fromChars(chars: Char[]): String {
    val bytes: Int[] = []
    for ch in chars {
      for b in ch.bytes() bytes.push(b)
    }

    if bytes.length != chars.length todo("bytelength field on String")

    val str = String.withLength(bytes.length)
    for b, idx in bytes {
      str._buffer.offset(idx).store(b.asByte())
    }

    str
  }

  pub func hash(self): Int {
    var hash = 31 * self.length
    for i in range(0, self.length) {
      val byte = self._buffer.offset(i).load()
      hash = hash + 31 * byte.asInt()
    }
    hash
  }

  pub func eq(self, other: String): Bool {
    if self.length != other.length { return false }

    for i in range(0, self.length) {
      val selfCh = self._buffer.offset(i).load().asInt()
      val otherCh = other._buffer.offset(i).load().asInt()
      if selfCh != otherCh { return false }
    }

    true
  }

  pub func byteAt(self, offset: Int): Byte = self._buffer.offset(offset).load()

  pub func isEmpty(self): Bool = self.length == 0

  pub func toLower(self): String {
    val str = String.withLength(self.length)
    for i in range(0, self.length) {
      val ch = self._buffer.offset(i).load().asInt()
      val lowerCh = if 65 <= ch && ch <= 90 {
        ch + 32
      } else {
        ch
      }
      str._buffer.offset(i).store(Byte.fromInt(lowerCh))
    }

    str
  }

  pub func toUpper(self): String {
    val str = String.withLength(self.length)
    for i in range(0, self.length) {
      val ch = self._buffer.offset(i).load().asInt()
      val upperCh = if 97 <= ch && ch <= 122 {
        ch - 32
      } else {
        ch
      }
      str._buffer.offset(i).store(Byte.fromInt(upperCh))
    }

    str
  }

  pub func isDigit(self): Bool {
    // TODO: This method shouldn't be an instance method of String, but we don't have Chars yet so it'll have to do
    if self.length != 1 return false

    val ch = self._buffer.offset(0).load().asInt()
    48 <= ch && ch <= 57
  }

  pub func isAlpha(self): Bool {
    // TODO: This method shouldn't be an instance method of String, but we don't have Chars yet so it'll have to do
    if self.length != 1 return false

    val ch = self._buffer.offset(0).load().asInt()
    (65 <= ch && ch <= 90) || (97 <= ch && ch <= 122)
  }

  pub func isAlphanumeric(self): Bool {
    // TODO: This method shouldn't be an instance method of String, but we don't have Chars yet so it'll have to do

    if self.length != 1 return false

    val ch = self._buffer.offset(0).load().asInt()
    (48 <= ch && ch <= 57) || (65 <= ch && ch <= 90) || (97 <= ch && ch <= 122)
  }

  pub func padLeft(self, totalSize: Int, padding = " "): String = todo("String#padLeft")

  pub func trim(self): String {
    var i = 0
    while i < self.length {
      val char = Char.fromInt(self._buffer.offset(i).load().asInt())
      if char == ' ' || char == '\n' || char == '\t' || char == '\r' {
        i += 1
      } else {
        break
      }
    }

    var j = self.length - 1
    while j >= 0 {
      val char = Char.fromInt(self._buffer.offset(j).load().asInt())
      if char == ' ' || char == '\n' || char == '\t' || char == '\r' {
        j -= 1
      } else {
        break
      }
    }

    self.getRange(i, j + 1)
  }

  pub func trimStart(self, pattern = ""): String = todo("String#trimStart")
  pub func trimEnd(self, pattern = ""): String = todo("String#trimEnd")

  pub func split(self, by = ""): String[] {
    if by.isEmpty() {
      val arr: String[] = Array.withCapacity(self.length)
      var i = 0
      while i < self.length {
        arr.push(self.get(i))
        i += 1
      }

      return arr
    }

    val arr: String[] = []

    var chunkStart = 0
    var i = 0
    while i < self.length {
      val ch = self._buffer.offset(i).load().asInt()

      val doSplit = if by.length <= self.length - i && ch == by._buffer.offset(0).load().asInt() {
        var j = 0
        while j < by.length {
          if self._buffer.offset(i + j).load().asInt() != by._buffer.offset(j).load().asInt() {
            break
          }
          j += 1
        }

        j == by.length
      } else {
        false
      }

      if doSplit {
        val str = self.getRange(chunkStart, i)
        arr.push(str)
        i += by.length
        chunkStart = i
      } else {
        i += 1
      }
    }

    val str = self.getRange(chunkStart, self.length)
    arr.push(str)

    arr
  }

  pub func splitAt(self, index: Int): (String, String) = todo("String#splitAt")

  pub func lines(self): String[] = self.split(by: "\n")

  pub func parseInt(self, radix = 10): Int? {
    if radix != 10 todo("parsing non-decimal integer")

    var num = 0
    for ch in self.chars() {
      if !ch.isDigit() break

      num *= 10
      num += (ch.asInt() - '0'.asInt())
    }

    Some(num)
  }

  pub func parseFloat(self): Float? = todo("String#parseFloat")

  pub func startsWith(self, prefix: String): Bool {
    if self.length < prefix.length return false
    if prefix.isEmpty() return true

    var i = 0
    while i < prefix.length {
      val selfCh = self._buffer.offset(i).load().asInt()
      val otherCh = prefix._buffer.offset(i).load().asInt()
      if selfCh != otherCh return false
      i += 1
    }

    true
  }

  pub func endsWith(self, suffix: String): Bool {
    if self.length < suffix.length return false
    if suffix.isEmpty() return true

    val selfOffset = self.length - suffix.length
    var i = 0
    while i < suffix.length {
      val selfCh = self._buffer.offset(selfOffset + i).load().asInt()
      val otherCh = suffix._buffer.offset(i).load().asInt()
      if selfCh != otherCh return false
      i += 1
    }

    true
  }

  pub func replaceAll(self, pattern: String, replacement: String): String {
    if pattern.isEmpty() && replacement.isEmpty() return self

    var cursor = 0
    var replacementIndices: Int[] = []
    if pattern.isEmpty() {
      while cursor < self.length {
        replacementIndices.push(cursor)
        cursor += 1
      }
      replacementIndices.push(cursor)
    } else {
      while cursor < self.length {
        if self.getRange(cursor, cursor + pattern.length) == pattern {
          replacementIndices.push(cursor)
          cursor += pattern.length
        } else {
          cursor += 1
        }
      }
    }

    val numReplacements = replacementIndices.length
    if numReplacements == 0 return self

    val newStringLength = self.length + (numReplacements * (replacement.length - pattern.length))
    val newString = String.withLength(newStringLength)

    val selfBuf = self._buffer
    var resCursor = 0
    var selfCursor = 0
    for idx in replacementIndices {
      if selfCursor < idx {
        newString._buffer.offset(resCursor).copyFrom(selfBuf.offset(selfCursor), idx - selfCursor)
        resCursor += (idx - selfCursor)
      }
      selfCursor = idx + pattern.length
      if replacement.length != 0 {
        newString._buffer.offset(resCursor).copyFrom(replacement._buffer, replacement.length)
      }
      resCursor += replacement.length
    }

    if selfCursor < self.length {
      newString._buffer.offset(resCursor).copyFrom(selfBuf.offset(selfCursor), self.length - selfCursor)
    }

    newString
  }

  pub func chars(self): CharsIterator = CharsIterator(_bytes: self._buffer, _numBytes: self.length)

  pub func get(self, index: Int): String {
    var idx = if index < 0 index + self.length else index
    if idx >= self.length || idx < 0 { return "" }

    val str = String.withLength(1)
    str._buffer.copyFrom(self._buffer.offset(idx), 1)
    str
  }

  pub func getRange(self, startIndex = 0, endIndex = self.length): String {
    val start = if startIndex < 0 startIndex + self.length else startIndex
    val end = if endIndex > self.length self.length else endIndex
    val length = end - start
    val subString = String.withLength(length)
    subString._buffer.copyFrom(self._buffer.offset(start), length)

    subString
  }

  pub func repeat(self, times: Int): String {
    if times <= 0 return ""

    val str = String.withLength(self.length * times)
    for i in range(0, times) {
      str._buffer.offset(self.length * i).copyFrom(self._buffer, self.length)
    }
    str
  }
}

type ArrayIterator<T> {
  array: Array<T>
  _i: Int = 0

  pub func next(self): T? {
    if self.array[self._i] |item| {
      self._i += 1
      Some(item)
    } else {
      None
    }
  }
}

type Array<T> {
  pub length: Int
  _buffer: Pointer<T> = Pointer.null()
  _capacity: Int = 0

  pub func withCapacity<T>(initialCapacity: Int): T[] {
    val capacity = if initialCapacity == 0 16 else initialCapacity
    Array(length: 0, _buffer: Pointer.malloc(capacity), _capacity: capacity)
  }

  pub func fill<T>(length: Int, value: T): T[] {
    val buffer = Pointer.malloc<T>(length)
    for i in range(0, length) {
      buffer.offset(i).store(value)
    }

    Array(length: length, _buffer: buffer, _capacity: length)
  }

  pub func fillBy<T>(length: Int, fn: (Int) => T): T[] {
    val buffer = Pointer.malloc<T>(length)
    for i in range(0, length) {
      val item = fn(i)
      buffer.offset(i).store(item)
    }

    Array(length: length, _buffer: buffer, _capacity: length)
  }

  pub func toString(self): String {
    if self.isEmpty() return "[]"

    val reprs: String[] = Array.withCapacity(self.length)
    var len = 2 // account for '[' and ']'
    var i = 0
    while i < self.length {
      val item = self._buffer.offset(i).load()
      val repr = item.toString()
      reprs.push(repr)
      len += repr.length
      if i != self.length - 1 {
        len += 2 // account for ", " unless last item
      }
      i += 1
    }

    val str = String.withLength(len)
    var offset = 0
    str._buffer.offset(offset).store(Byte.fromInt(91)) // '['
    offset += 1

    i = 0
    while i < self.length {
      val repr = reprs._buffer.offset(i).load()
      str._buffer.offset(offset).copyFrom(repr._buffer, repr.length)
      offset += repr.length

      if i != self.length - 1 {
        str._buffer.offset(offset).store(Byte.fromInt(44)) // ','
        offset += 1
        str._buffer.offset(offset).store(Byte.fromInt(32)) // ' '
        offset += 1
      }

      i += 1
    }

    str._buffer.offset(offset).store(Byte.fromInt(93)) // ']'

    str
  }

  pub func hash(self): Int {
    var hash = 31 * self.length
    for i in range(0, self.length) {
      val item = self._buffer.offset(i).load()
      hash = hash + 31 * item.hash()
    }
    hash
  }

  pub func eq(self, other: Array<T>): Bool {
    if self.length != other.length return false

    for i in range(0, self.length) {
      val selfItem = self._buffer.offset(i).load()
      val otherItem = other._buffer.offset(i).load()

      if selfItem != otherItem { return false }
    }

    true
  }

  pub func getCapacity(self): Int = self._capacity

  pub func isEmpty(self): Bool = self.length == 0

  pub func iterator(self): ArrayIterator<T> = ArrayIterator(array: self)

  pub func push(self, item: T) {
    if self.length == self._capacity {
      self._capacity *= 2

      self._buffer = Pointer.realloc(self._buffer, self._capacity)
    }

    self._buffer.offset(self.length).store(item)
    self.length += 1
  }

  pub func pop(self): T? {
    if self.length == 0 {
      None
    } else {
      self.length -= 1
      Some(self._buffer.offset(self.length).load())
    }
  }

  pub func popFront(self): T? = todo("Array#popFront")
  pub func splitAt(self, index: Int): (T[], T[]) = todo("Array#splitAt")

  pub func concat(self, other: T[]): T[] {
    val newArray: T[] = Array.withCapacity(self.length + other.length)
    newArray._buffer.copyFrom(self._buffer, self.length)
    newArray._buffer
      .offset(self.length)
      .copyFrom(other._buffer, other.length)
    newArray.length = self.length + other.length
    newArray
  }

  pub func map<U>(self, fn: (T, Int) => U): U[] {
    val newArray: U[] = Array.withCapacity(self.length)
    for i in range(0, self.length) {
      val item = self._buffer.offset(i).load()
      val result = fn(item, i)
      newArray.push(result)
    }

    newArray
  }

  pub func flatMap<U>(self, fn: (T, Int) => U[]): U[] {
    val newArray: U[] = Array.withCapacity(self.length)
    for i in range(0, self.length) {
      val item = self._buffer.offset(i).load()
      val result = fn(item, i)
      for resultItem in result {
        newArray.push(resultItem)
      }
    }

    newArray
  }

  pub func filter(self, fn: (T, Int) => Bool): T[] {
    val newArray: T[] = Array.withCapacity(self.length)
    for i in range(0, self.length) {
      val item = self._buffer.offset(i).load()
      if fn(item, i) {
        newArray.push(item)
      }
    }

    newArray
  }

  pub func reduce<U>(self, initialValue: U, fn: (U, T, Int) => U): U {
    var acc = initialValue
    for i in range(0, self.length) {
      val item = self._buffer.offset(i).load()
      acc = fn(acc, item, i)
    }

    acc
  }

  pub func forEach(self, fn: (T, Int) => Unit) {
    for i in range(0, self.length) {
      val item = self._buffer.offset(i).load()
      fn(item, i)
    }
  }

  pub func join(self, joiner = ""): String {
    val reprs: String[] = Array.withCapacity(self.length)
    var length = 0
    for i in range(0, self.length) {
      val item = self._buffer.offset(i).load()
      val repr = item.toString()
      reprs.push(repr)
      length += repr.length
      if i != self.length - 1 {
        length += joiner.length
      }
    }

    val str = String.withLength(length)
    var offset = 0
    for i in range(0, reprs.length) {
      val repr = reprs._buffer.offset(i).load()
      str._buffer.offset(offset).copyFrom(repr._buffer, repr.length)
      offset += repr.length
      if i != reprs.length - 1 {
        str._buffer.offset(offset).copyFrom(joiner._buffer, joiner.length)
        offset += joiner.length
      }
    }

    str
  }

  pub func contains(self, item: T): Bool {
    for i in range(0, self.length) {
      val selfItem = self._buffer.offset(i).load()
      if selfItem == item return true
    }

    false
  }

  pub func find(self, fn: (T) => Bool): T? {
    for i in range(0, self.length) {
      val item = self._buffer.offset(i).load()
      if fn(item) return Some(item)
    }

    None
  }

  pub func findIndex(self, fn: (T) => Bool): (T, Int)? {
    for i in range(0, self.length) {
      val item = self._buffer.offset(i).load()
      if fn(item) return Some((item, i))
    }

    None
  }

  pub func any(self, fn: (T) => Bool): Bool {
    for i in range(0, self.length) {
      val item = self._buffer.offset(i).load()
      if fn(item) return true
    }

    false
  }

  pub func all(self, fn: (T) => Bool): Bool {
    for i in range(0, self.length) {
      val item = self._buffer.offset(i).load()
      if !fn(item) return false
    }

    true
  }

  func none(self, fn: (T) => Bool): Bool = todo("Array#none")

  // Implementation of quicksort using dual-pivot (Hoare) partitioning. The items are an array of tuples, the first elem
  // of which represents the integer value which will be used as the sort-value; the second elem is the original value
  // from which the sort-value was derived. Once sorting is complete, the original values will be extracted out of the
  // sorted array.
  func _quicksort<T>(items: (Int, T)[], lo: Int, hi: Int) {
    if lo >= 0 && hi >= 0 && lo < hi {
      val pivot = Array._qspartition(items, lo, hi)
      Array._quicksort(items, lo, pivot)
      Array._quicksort(items, pivot + 1, hi)
    }
  }
  func _qspartition<T>(items: (Int, T)[], lo: Int, hi: Int): Int {
    val pivot = items._buffer.offset(lo).load()[0]
    var i = lo - 1
    var j = hi + 1

    while true {
      i += 1
      while items._buffer.offset(i).load()[0] < pivot { i += 1 }

      j -= 1
      while items._buffer.offset(j).load()[0] > pivot { j -= 1 }

      if i >= j return j

      val tmp = items._buffer.offset(i).load()
      items._buffer.offset(i).store(items._buffer.offset(j).load())
      items._buffer.offset(j).store(tmp)
    }

    // unreachable, but the typechecker doesn't know that
    -1
  }

  pub func sortBy(self, fn: (T) => Int, reverse = false): T[] {
    val factor = if reverse { -1 } else { 1 }

    val arr: (Int, T)[] = Array.withCapacity(self.length)
    var i = 0
    while i < self.length {
      val item = self._buffer.offset(i).load()
      val tuple = (factor * fn(item), item)
      arr.push(tuple)

      i += 1
    }

    Array._quicksort(arr, 0, arr.length - 1)

    val res: T[] = Array.withCapacity(self.length)
    i = 0
    while i < self.length {
      res.push(arr._buffer.offset(i).load()[1])

      i += 1
    }

    res
  }

  pub func dedupe(self): T[] = todo("Array#dedupe")
  pub func dedupeBy<U>(self, fn: (T) => U): T[] = todo("Array#dedupeBy")
  pub func partition<U>(self, fn: (T) => U): Map<U, T[]> = todo("Array#partition")
  pub func tally(self): Map<T, Int> = todo("Array#tally")
  pub func tallyBy<U>(self, fn: (T) => U): Map<U, Int> = todo("Array#tallyBy")

  pub func keyBy<U>(self, fn: (T) => U): Map<U, T> {
    val map: Map<U, T> = Map.new()

    for i in range(0, self.length) {
      val item = self._buffer.offset(i).load()
      val key = fn(item)
      map[key] = item
    }

    map
  }

  pub func indexBy<U>(self, fn: (T) => U): Map<U, T[]> {
    val map: Map<U, T[]> = Map.new()

    for i in range(0, self.length) {
      val item = self._buffer.offset(i).load()
      val key = fn(item)
      if map[key] |arr| {
        arr.push(item)
      } else {
        map[key] = [item]
      }
    }

    map
  }

  pub func asSet(self): Set<T> {
    val set: Set<T> = Set.new()

    for i in range(0, self.length) {
      val item = self._buffer.offset(i).load()
      set.insert(item)
    }

    set
  }

  pub func get(self, index: Int): T? {
    val idx = if index < 0 index + self.length else index
    if idx >= self.length || idx < 0 {
      None
    } else {
      Some(self._buffer.offset(idx).load())
    }
  }

  pub func getOr(self, index: Int, default: T): T = todo("Array#getOr")
  pub func getOrElse(self, index: Int, getDefault: () => T): T = todo("Array#getOrElse")

  pub func getRange(self, startIndex = 0, endIndex = self.length): T[] {
    val start = if startIndex < 0 startIndex + self.length else startIndex
    val end = if endIndex > self.length
      self.length
    else if endIndex < 0
      endIndex + self.length
    else
      endIndex
    val length = end - start
    val subArray: T[] = Array.withCapacity(length)
    subArray.length = length
    subArray._buffer.copyFrom(self._buffer.offset(start), length)

    subArray
  }

  pub func set(self, index: Int, value: T): T? {
    val idx = if index < 0 index + self.length else index
    if idx >= self.length || idx < 0 {
      None
    } else {
      val old = self.get(index)
      self._buffer.offset(idx).store(value)
      old
    }
  }

  pub func update(self, index: Int, updater: (T) => T) = todo("Array#update")
  pub func reversed(self): T[] = todo("Array#reversed")
}

type SetIterator<T> {
  _mapIterator: MapIterator<T, Bool>

  pub func next(self): T? {
    if self._mapIterator.next() |item| {
      Some(item[0])
    } else {
      None
    }
  }
}

type Set<T> {
  pub size: Int
  _map: Map<T, Bool> = Map.new()

  pub func new<T>(initialCapacity = 16): Set<T> {
    Set<T>(size: 0, _map: Map.new(initialCapacity))
  }

  pub func toString(self): String {
    if self.isEmpty() return "#{}"

    val reprs: String[] = Array.withCapacity(self._map.size)
    for item in self {
      reprs.push(item.toString())
    }

    val items = reprs.join(", ")
    "#{$items}"
  }

  pub func eq(self, other: Set<T>): Bool {
    self._map == other._map
  }

  pub func isEmpty(self): Bool {
    self._map.isEmpty()
  }

  pub func iterator(self): SetIterator<T> = SetIterator(_mapIterator: self._map.iterator())

  pub func contains(self, item: T): Bool {
    self._map.containsKey(item)
  }

  pub func insert(self, item: T) {
    self._map.insert(item, true)
    self.size = self._map.size
  }

  pub func forEach(self, fn: (T) => Unit) {
    self._map.forEach(key => fn(key))
  }

  func remove(self, item: T): T? = todo("Set#remove")

  pub func map<U>(self, fn: (T) => U): U[] {
    val arr: U[] = Array.withCapacity(self.size)
    for item in self {
      arr.push(fn(item))
    }

    arr
  }

  pub func filter(self, fn: (T) => Bool): Set<T> {
    val newSet: Set<T> = Set.new()
    for item in self {
      if fn(item) newSet.insert(item)
    }

    newSet
  }

  pub func reduce<U>(self, initialValue: U, fn: (U, T) => U): U = todo("Set#reduce")

  pub func asArray(self): T[] {
    val arr: T[] = Array.withCapacity(self.size)
    for item in self {
      arr.push(item)
    }

    arr
  }

  pub func join(self, joiner = ""): String {
    self.asArray().join(joiner)
  }

  pub func union(self, other: Set<T>): Set<T> {
    val newSet: Set<T> = Set.new()

    for item in self { newSet.insert(item) }
    for item in other { newSet.insert(item) }

    newSet
  }

  pub func difference(self, other: Set<T>): Set<T> {
    val newSet: Set<T> = Set.new()
    for item in self {
      if !other.contains(item) newSet.insert(item)
    }

    newSet
  }

  pub func intersection(self, other: Set<T>): Set<T> {
    val newSet: Set<T> = Set.new()
    for item in self {
      if other.contains(item) newSet.insert(item)
    }

    newSet
  }
}

type MapEntry<K, V> {
  key: K
  value: V
  next: MapEntry<K, V>? = None
  _empty: Bool = false

  func empty<K, V>(): MapEntry<K, V> {
    MapEntry(
      key: intrinsics.uninitialized(),
      value: intrinsics.uninitialized(),
      _empty: true,
    )
  }

  func toString(self): String {
    if self._empty return "MapEntry(key: <uninitialized>, value: <uninitialized>, next: ${self.next}, _empty: true)"

    "MapEntry(key: ${self.key}, value: ${self.value}, next: ${self.next}, _empty: false)"
  }

  func eq(self, other: MapEntry<K, V>): Bool {
    if self._empty return other._empty

    self.key == other.key && self.value == other.value && self.next == other.next
  }

  func hash(self): Int {
    if self._empty return self._empty.hash()

    self.key.hash() + self.value.hash()
  }
}

type MapIterator<K, V> {
  map: Map<K, V>
  _i: Int = -1
  _cursor: MapEntry<K, V>? = None

  pub func next(self): (K, V)? {
    while self._i < self.map._entries.length && !self._cursor {
      self._i += 1
      if self.map._entries[self._i] |entry| {
        if entry._empty continue

        self._cursor = self.map._entries[self._i]
      }
    }

    if self._cursor |cur| {
      self._cursor = cur.next
      Some((cur.key, cur.value))
    } else {
      None
    }
  }
}

type Map<K, V> {
  pub size: Int
  _entries: MapEntry<K, V>[] = []
  _capacity: Int = 16
  _loadFactor: Float = 0.75

  pub func new<K, V>(initialCapacity = 16): Map<K, V> {
    // Find a power of 2 >= initialCapacity, if non-default value provided
    val capacity = if initialCapacity != 16 {
      initialCapacity.nextPowerOf2()
    } else {
      initialCapacity
    }

    val entries: MapEntry<K, V>[] = Array.withCapacity(capacity)
    for _ in range(0, capacity) {
      entries.push(MapEntry.empty())
    }

    Map(size: 0, _capacity: capacity, _entries: entries)
  }

  pub func fromPairs<K, V>(pairs: (K, V)[]): Map<K, V> {
    val map: Map<K, V> = Map.new(pairs.length)
    for pair in pairs {
      map.insert(pair[0], pair[1])
    }
    map
  }

  pub func toString(self): String {
    if self.isEmpty() return "{}"

    val reprs: String[] = Array.withCapacity(self.size)
    for i in range(0, self._entries.length) {
      if self._entries[i] |bucket| {
        if bucket._empty continue

        var cursor: MapEntry<K, V>? = Some(bucket)
        while cursor |cur| {
          reprs.push("${cur.key}: ${cur.value}")
          cursor = cur.next
        }
      }
    }

    val items = reprs.join(", ")
    "{ $items }"
  }

  pub func eq(self, other: Map<K, V>): Bool {
    if self.size != other.size return false

    for i in range(0, self._entries.length) {
      if self._entries[i] |bucket| {
        if bucket._empty continue

        var cursor: MapEntry<K, V>? = Some(bucket)

        while cursor |cur| {
          if other.get(cur.key) |otherValue| {
            if otherValue != cur.value return false
          } else {
            return false
          }
          cursor = cur.next
        }
      }
    }

    true
  }

  pub func getCapacity(self): Int = self._capacity

  pub func isEmpty(self): Bool = self.size == 0

  pub func forEach(self, fn: (K, V) => Unit) {
    for i in range(0, self._entries.length) {
      if self._entries[i] |bucket| {
        if bucket._empty continue

        var cursor: MapEntry<K, V>? = Some(bucket)
        while cursor |cur| {
          fn(cur.key, cur.value)
          cursor = cur.next
        }
      }
    }
  }

  pub func iterator(self): MapIterator<K, V> = MapIterator(map: self)

  pub func keys(self): Set<K> {
    val keys: Set<K> = #{}

    for pair in self {
      keys.insert(pair[0])
    }

    keys
  }

  pub func values(self): V[] {
    val values: V[] = []

    for pair in self {
      values.push(pair[1])
    }

    values
  }

  pub func entries(self): Set<(K, V)> {
    val entries: Set<(K, V)> = Set.new()
    for pair in self {
      entries.insert(pair)
    }

    entries
  }

  pub func _getKeyHash(self, key: K, numEntries = self._entries._capacity): Int = key.hash() && (numEntries - 1)

  pub func containsKey(self, key: K): Bool = if self._getEntry(key) true else false

  pub func mapValues<U>(self, fn: (K, V) => U): Map<K, U> {
    val newMap: Map<K, U> = Map.new()
    for i in range(0, self._entries.length) {
      if self._entries[i] |bucket| {
        if bucket._empty continue

        var cursor: MapEntry<K, V>? = Some(bucket)
        while cursor |cur| {
          newMap.insert(cur.key, fn(cur.key, cur.value))
          cursor = cur.next
        }
      }
    }

    newMap
  }

  pub func insert(self, key: K, value: V): V? {
    val (oldValue, valueAdded) = self._insertInto(key, value, self._entries)
    if valueAdded { self.size += 1 }

    if self._needsResize() self._resize()

    oldValue
  }

  pub func _needsResize(self): Bool = self.size > self._capacity * self._loadFactor

  pub func _insertInto(self, key: K, value: V, entries: MapEntry<K, V>[]): (V?, Bool) {
    val hash = self._getKeyHash(key, entries._capacity)

    if entries[hash] |bucket| {
      if bucket._empty {
        bucket._empty = false
        bucket.key = key
        bucket.value = value

        return (None, true)
      }

      var cursor: MapEntry<K, V>? = Some(bucket)
      while cursor |cur| {
        if cur.key == key {
          val old = cur.value
          cur.value = value
          return (Some(old), false)
        } else if cur.next |next| {
          cursor = Some(next)
        } else {
          cur.next = Some(MapEntry(key: key, value: value))
          return (None, true)
        }
      }

      // Should be unreachable since loop will always eventually result in a return
      (None, false)
    } else {
      entries[hash] = MapEntry(key: key, value: value)
      (None, true)
    }
  }

  pub func _resize(self) {
    val newCapacity = self._capacity * 2

    val newEntries: MapEntry<K, V>[] = Array.withCapacity(newCapacity)
    for _ in range(0, newCapacity) {
      newEntries.push(MapEntry.empty())
    }

    for entry in self {
      val key = entry[0]
      val value = entry[1]
      self._insertInto(key, value, newEntries)
    }

    self._capacity = newCapacity
    self._entries = newEntries
  }

  pub func _getEntry(self, key: K): MapEntry<K, V>? {
    val hash = self._getKeyHash(key)

    val bucketRootEntry = try self._entries[hash]
    if bucketRootEntry._empty return None

    var cursor = Some(bucketRootEntry)
    while cursor |entry| {
      if entry.key == key {
        return Some(entry)
      } else {
        cursor = entry.next
      }
    }

    None
  }

  pub func get(self, key: K): V? {
    if self._getEntry(key) |entry| {
      Some(entry.value)
    } else {
      None
    }
  }

  pub func getOr(self, key: K, default: V): V {
    self.get(key) ?: default
  }

  pub func getOrElse(self, key: K, getDefault: () => V): V {
    self.get(key) ?: getDefault()
  }

  pub func getOrInsert(self, key: K, getDefault: () => V): V {
    try self.get(key) else {
      val default = getDefault()
      self.insert(key, default)
      default
    }
  }

  pub func update(self, key: K, updater: (V) => V): V? {
    if self._getEntry(key) |entry| {
      val oldVal = entry.value
      entry.value = updater(oldVal)
      Some(oldVal)
    } else {
      None
    }
  }

  pub func remove(self, key: K): V? {
    val hash = self._getKeyHash(key)

    val bucketRootEntry = try self._entries[hash]
    if bucketRootEntry._empty return None

    if bucketRootEntry.key == key {
      self._entries[hash] = bucketRootEntry.next ?: MapEntry.empty()
      self.size -= 1
      return Some(bucketRootEntry.value)
    }

    var prev = bucketRootEntry
    var cursor = bucketRootEntry.next
    while cursor |entry| {
      if entry.key == key {
        prev.next = entry.next
        self.size -= 1
        return Some(entry.value)
      } else {
        prev = entry
        cursor = entry.next
      }
    }

    None
  }
}

pub decorator noreturn { }

@noreturn
pub func unreachable(message = "") {
  stdoutWriteln("Encountered unreachable code: $message")
  libc.exit(1)
}

@noreturn
pub func todo(message = "") {
  stdoutWriteln("Encountered unimplemented code: $message")
  libc.exit(1)
}
