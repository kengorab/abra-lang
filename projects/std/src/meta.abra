pub decorator macro { }

pub type InjectedCode {
  pub chunks: String[] = []
  pub imports: Map<String, String> = {}

  pub func new(): InjectedCode = InjectedCode()

  pub func addImport(self, module: String): String {
    if self.imports[module] |alias| return alias

    val alias = "_${String.random(24)}"
    self.imports[module] = alias
    alias
  }

  pub func append(self, str: String): InjectedCode {
    self.chunks.push(str)
    self
  }

  pub func appendExpr(self, expr: Expr): InjectedCode {
    self.chunks.push(expr.stringify())
    self
  }
}

pub type Expr {
  stringify: () => String
}

@macro
pub func stringify(expr: Expr): InjectedCode =
  InjectedCode.new()
    .append("\"")
    .appendExpr(expr)
    .append("\"")