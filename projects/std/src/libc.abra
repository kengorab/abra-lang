import Pointer, Byte, intrinsic from "./_intrinsics"

pub decorator external { name: String }

pub func NULL<T>(): Pointer<T> = Pointer.null()

pub val EFAULT = 14
pub val EMFILE = 24
pub val ENFILE = 23
@external("pipe")
pub func pipe(fds: Pointer<Int>): Int

@external("dup2")
pub func dup2(fd1: Int, fd2: Int): Int

@external("wait")
pub func wait(status: Pointer<Int>): Int

@external("fork")
pub func fork(): Int

@external("execvp")
pub func execvp(file: Pointer<Byte>, args: Pointer<Pointer<Byte>>): Int

@external("getenv")
pub func getenv(name: Pointer<Byte>): Pointer<Byte>

@intrinsic("errno")
pub func errno(): Int

@external("strerror")
pub func strerror(errno: Int): Pointer<Byte>

pub val O_RDONLY = 0
pub val O_WRONLY = 1
pub val O_RDWR   = 2
pub val O_CREAT  = 512
pub val O_TRUNC  = 1024

@external("open")
pub func open(pathname: Pointer<Byte>, flags: Int, mode: Int): Int

@external("close")
pub func close(fd: Int): Int

pub val SEEK_SET = 0
pub val SEEK_CUR = 1
pub val SEEK_END = 2

@external("lseek")
pub func lseek(fd: Int, offset: Int, whence: Int): Int

@external("read")
pub func read(fd: Int, buf: Pointer<Byte>, count: Int): Int

@external("stat")
pub func stat(pathname: Pointer<Byte>, statbuf: Pointer<Byte>): Int

pub val STDIN_FILENO  = 0
pub val STDOUT_FILENO = 1
pub val STDERR_FILENO = 2

@external("write")
pub func write(fd: Int, buf: Pointer<Byte>, count: Int): Int

pub val PATH_MAX = 4096

@external("getcwd")
pub func getcwd(buf: Pointer<Byte>, count: Int): Pointer<Byte>

@external("strlen")
pub func strlen(s: Pointer<Byte>): Int

@external("uname")
pub func uname(utsnameBuf: Pointer<Byte>): Int

@external("umask")
pub func umask(cmask: Int): Int

@external("rand")
pub func rand(): Int

@external("sleep")
pub func sleep(secs: Int): Unit

@external("fchmod")
pub func fchmod(fildes: Int, mode: Int): Int

@external("time")
pub func time(seed: Int): Int

@external("exit")
pub func exit(status: Int): Unit

func WSTATUS(status: Int): Int = status && 0x7f

// #define WIFEXITED(x)    (_WSTATUS(x) == 0)
pub func WIFEXITED(status: Int): Bool = WSTATUS(status) == 0

// #define WEXITSTATUS(x)  ((_W_INT(x) >> 8) & 0x000000ff)
pub func WEXITSTATUS(status: Int): Int = (status >> 8) && 0xff

// #define WIFSIGNALED(x)  (_WSTATUS(x) != _WSTOPPED && _WSTATUS(x) != 0)
pub func WIFSIGNALED(status: Int): Bool = WSTATUS(status) != 0x7f && WSTATUS(status) != 0

// #define WTERMSIG(x)     (_WSTATUS(x))
pub func WTERMSIG(status: Int): Int = WSTATUS(status)
