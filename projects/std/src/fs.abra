import Pointer, Byte from "./_intrinsics"
import "libc" as libc

pub enum FileIOError {
  CouldNotOpen(message: String)
  CouldNotClose(message: String)
  CouldNotSeek(message: String)
  CouldNotRead(message: String)
}

pub func readFile(path: String): Result<String, FileIOError> {
  val fd = libc.open(path._buffer, libc.O_RDONLY, 0)
  if fd == -1 {
    val errMsg = _strerror(libc.errno())
    return Err(error: FileIOError.CouldNotOpen(message: "Could not open '$path': $errMsg"))
  }

  val len = libc.lseek(fd, 0, libc.SEEK_END)
  if len == -1 {
    val errMsg = _strerror(libc.errno())
    return Err(error: FileIOError.CouldNotSeek(message: "Could not seek '$path': $errMsg"))
  }
  if libc.lseek(fd, 0, libc.SEEK_SET) == -1 {
    val errMsg = _strerror(libc.errno())
    return Err(error: FileIOError.CouldNotSeek(message: "Could not seek '$path': $errMsg"))
  }

  val str = String.withLength(len)
  if libc.read(fd, str._buffer, len) == -1 {
    val errMsg = _strerror(libc.errno())
    return Err(error: FileIOError.CouldNotRead(message: "Could not read '$path': $errMsg"))
  }
  if libc.close(fd) == -1 {
    val errMsg = _strerror(libc.errno())
    return Err(error: FileIOError.CouldNotClose(message: "Could not close '$path': $errMsg"))
  }

  Ok(value: str)
}

pub enum AccessMode {
  ReadOnly
  WriteOnly
  ReadWrite

  func _toUnderlying(self): Int = match self {
    AccessMode.ReadOnly => libc.O_RDONLY
    AccessMode.WriteOnly => libc.O_WRONLY
    AccessMode.ReadWrite => libc.O_RDWR
  }
}

pub type File {
  _fd: Int
  accessMode: AccessMode
  path: String

  pub func close(self): Result<Int, FileIOError> {
    if libc.close(self._fd) == -1 {
      val errMsg = _strerror(libc.errno())
      return Err(error: FileIOError.CouldNotClose(message: "Could not close '${self.path}': $errMsg"))
    }

    Ok(self._fd)
  }

  pub func write(self, str: String) {
    // TODO: handle error here (and also in prelude:stdoutWrite)
    libc.write(self._fd, str._buffer, str.length)
  }

  pub func writeln(self, str: String = "") {
    if !str.isEmpty() libc.write(self._fd, str._buffer, str.length)
    libc.write(self._fd, "\n"._buffer, 1)
  }
}

pub func openFile(path: String, accessMode: AccessMode): Result<File, FileIOError> {
  val oflag = accessMode._toUnderlying()
  val fd = libc.open(path._buffer, oflag, 0)
  if fd == -1 {
    val errMsg = _strerror(libc.errno())
    return Err(error: FileIOError.CouldNotOpen(message: "Could not open '$path': $errMsg"))
  }

  Ok(File(_fd: fd, accessMode: accessMode, path: path))
}

pub func createFile(path: String, accessMode: AccessMode): Result<File, FileIOError> {
  var oflag = accessMode._toUnderlying() || libc.O_CREAT

  val mode = 420 // 420 is 0644, but octal numbers aren't supported yet...
  val fd = libc.open(path._buffer, oflag, mode)
  if fd == -1 {
    val errMsg = _strerror(libc.errno())
    return Err(error: FileIOError.CouldNotOpen(message: "Could not open '$path': $errMsg"))
  }

  Ok(File(_fd: fd, accessMode: accessMode, path: path))
}

pub func getCurrentWorkingDirectory(): String {
  val buf = Pointer.malloc<Byte>(libc.PATH_MAX)

  libc.getcwd(buf, libc.PATH_MAX)
  val len = libc.strlen(buf)

  val str = String.withLength(len)
  str._buffer.copyFrom(0, buf, 0, len)
  str
}

func _strerror(errno: Int): String {
  val buf = libc.strerror(errno)
  val len = libc.strlen(buf)
  val str = String.withLength(len)
  str._buffer.copyFrom(0, buf, 0, len)
  str
}
