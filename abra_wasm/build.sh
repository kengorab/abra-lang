rm -rf pkg
wasm-pack build -s kengorab --target $WASM_PACK_TARGET

cp -R ts/* pkg/.

if [[ $WASM_PACK_TARGET == "web" ]]
then
  # Comment out the import.meta.url.replace line, since it's not supported in all browsers.
  # The type signature of the init function (see below) requires that the moduleName parameter
  # be non-null anyway, so the check is irrelevant anyway (as long as the consumer is using typescript).
  echo "Modifying abra_wasm.js to remove import.meta..."
  sed 's/^.*import\.meta/\/\/&/' pkg/abra_wasm.js > pkg/abra_wasm_.js
  mv pkg/abra_wasm_.js pkg/abra_wasm.js

  # When generating the web bindings, add the init function to the type declaration file. This function
  # is included in the abra_wasm.d.ts file generated by wasm-pack, but is overwritten by the more
  # fully fleshed-out typings file. We do need to conditionally add this init function though, since
  # it's only generated for the web bindings; for other targets (such as nodejs), this function is
  # not generated, since it's not needed.
  echo "Adding typing for the init function..."
  echo "\nexport default function init(moduleName: string): Promise<any>;" >> pkg/abra_wasm.d.ts
fi

echo "Adding the registry parameter to the package.json..."
node -e "\
  const { writeFileSync } = require('fs');
  const packageJson = require('./pkg/package.json');

  packageJson.publishConfig = { registry: 'https://npm.pkg.github.com/' };
  writeFileSync('./pkg/package.json', JSON.stringify(packageJson, null, 2), { encoding: 'utf-8' });
"

echo "Done!"
