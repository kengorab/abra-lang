type Person { name: String }
enum Color {
  Red
  RGB(r: Int, g: Int, b: Int)
}

//func test(value: Int | String | Float? | (Bool, Int) | Person | Color): (String, String) {
//  match value {
//    None v => ("case 0", v + "")
//    1 v => ("case 1", v + "")
//    2 v => ("case 2", v + "")
//    "three" v => ("case 3", v + "")
//    "four" v => ("case 4", v + "")
//    (true, 1) v => ("case 5", v + "")
//    (false, 2) v => ("case 6", v + "")
//    Person v => ("case 7", v + "")
//    Color v => ("case 8", v + "")
//    _ v => ("wildcard", v + "")
//  }
//}
//println(test(Color.RGB(r: 1, g: 2, b: 3)))

val c = Color.RGB(r: 1, g: 2, b: 3)
match c {
  Color.Red => println("Red")
  Color.RGB(1, 3, 2) => println("RGB 1")
  Color.RGB(r, g, 3) c2 => println("RGB 2", r, g, c2)
  _ => println("catchall")
}


/* TODO: Function hoisting
val hello = "Hello"

type Person {
  name: String

  func greet(self) {
    sayHello(hello)
  }
}

func sayHello(msg: String) = println(msg)

val me = Person(name: "Ken")
me.greet()
*/
