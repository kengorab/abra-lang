//val arr1 = [1, 2, 3]
//arr1.get(0)

//echo<Int>(123)
//echo<Float>(12.3)
//echo<Bool>(true)
//echo<String>("hello")
//echo<String[]>(["hello"])

// // A value of an optional (nullable) type must be a 64-bit value. The value of None is 0x8000000000000000.
// // If underlying type is a pointer (object), use pointer tag to denote None-ness by setting lowest bit to 1
// val s: String = "abc"   // 0x0000600001AD4040 (ordinary String value)
// val s: String? = "abc"  // 0x0000600001AD4040 <--- highest bit is set to 0
// val s: String? = None   // 0x8000000000000000 <--- highest bit is set to 1 to denote `None`
//
// // If type is a primitive then we need to do some things differently.
// // If value is Int (32-bit):
// val i: Int = 123        // 0x0000007B (ordinary Int (32-bit) value)
// val i: Int? = 123       // 0x000000000000007B <--- 32-bit value extended to 64-bits, highest bit 0
// val i: Int? = None      // 0x8000000000000000 <--- 32-bit value extended to 64-bits, highest bit 1
//
// // If value is Float, we can use NaN boxing to encode a None value (alongside NaN, and +-Inf)
// // If value is Bool (1-bit), we behave like Int - extend to 64 bits, set top bit to 1 if None

//val a = "hello"
//echo<String>(a)

val s = String.withLength(3)
s._buffer.offset(0).store(Byte.fromInt(65))
s._buffer.offset(1).store(Byte.fromInt(66))
s._buffer.offset(2).store(Byte.fromInt(67))
echo<Bool>(s.isEmpty())

val s2 = ""
echo<Bool>(s2.isEmpty())
