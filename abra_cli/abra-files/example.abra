//type Foo<T> {
//  func make<T>(): Foo<T> = Foo()
//}

//val f: Foo<Float> = Foo.make<Int>()
//val _: Int = f

//func make<T>(): T[] = []
//val arr: Float[] = make<Int>()

//func make<T>(t: T): T[] = []
//val arr = make<Int>("f")

// TODO: So should this
func makeArray<U>(): U[] = []
type Foo<T> {
  a: T[] = makeArray()
}
