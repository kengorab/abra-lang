//val a = 16
//val fn = (i: Int, x = 4) => i + x + a

//func makeCounter(start = 0): ((Int) => Int, (Int) => Int) {
//  var counter = start
//
//  val incr = (by: Int) => counter += by
//  val decr = (by: Int) => counter -= by
//
//  (incr, decr)
//}
//
//val (incr, decr) = makeCounter()
//println(incr(1), incr(1), decr(2), incr(1), incr(2), decr(1), decr(2))

func forEach<T>(v1: T, v2: T, v3: T, fn: (T) => Unit) {
  fn(v1)
  fn(v2)
  fn(v3)
}

val factor = 2
func double(v1: Int, v2: Int, v3: Int): Int[] {
  val arr: Int[] = []

  forEach(v1, v2, v3, x => arr[x] = x * factor)

  arr
}

println(double(0, 1, 2))

type Counter {
  count: Int = 0
  incr: (Int) => Int

  func up(self): Int {
    self.count = self.incr(self.count)
  }
}

var incrAmount = 1
val c = Counter(incr: x => x + incrAmount)
println(c.up(), c.up(), c.up())
incrAmount = 5
println(c.up(), c.up(), c.up())


/* TODO: Function hoisting
val hello = "Hello"

type Person {
  name: String

  func greet(self) {
    sayHello(hello)
  }
}

func sayHello(msg: String) = println(msg)

val me = Person(name: "Ken")
me.greet()
*/
