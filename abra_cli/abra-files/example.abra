//val arr = [("a", true), ("b", false), ("c", true)]
//println(arr.enumerate())
//val map = { a: 1, b: 2 }
//println(map.enumerate())
//val set = #{"a", "b", "c"}
//println(set.enumerate())

//for (v, b), idx in arr {
//  println("item:", v, b, ", idx:", idx)
//}
//for item, idx in arr {
//  println("item:", item, "idx:", idx)
//}

func makeIterator<T>(arr: T[]): () => (T, Int)? {
  var idx = 0

  () => if arr[idx] |item| {
    idx += 1
    (item, idx - 1)
  } else {
    None
  }
}

val arr = ["a", "b", "c"]
val iter = makeIterator(arr)
println(iter(), iter(), iter())
arr[3] = "d"
arr[4] = "e"
println(iter(), iter(), iter(), iter(), iter())















/* TODO: Function hoisting
val hello = "Hello"

type Person {
  name: String

  func greet(self) {
    sayHello(hello)
  }
}

func sayHello(msg: String) = println(msg)

val me = Person(name: "Ken")
me.greet()
*/
