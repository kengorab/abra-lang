// TODO: This shouldn't stackoverflow
//println([])

////enum Optional<T> {
////  Some(value: T)
////  None_
////}
//
//func Some<T>(value: T): Option<T> = Option.Some(value: value)
////val None_ = Option.None_
//
//func arrayGet<T>(arr: T[], idx: Int): Option<T> {
//  if arr[idx] |item| Option.Some(value: item) else Option.None_
//}
//
//val arr = [1, 2, 3]
////for x in arr {
////  println(x)
////}
//val one = arr[0] //arrayGet(arr, 0)
//println(one)
////val _: Int? = one

//enum Color {
//  Red
//  Blue
//  Green
//  RGB(r: Int, g: Int, b: Int)
//}
//
//val colors = [Color.Red, Color.Blue, Color.Green, Color.RGB(r: 1, g: 2, b: 3)]
//
//val i = match colors[4] {
//  Color.Red => 0
//  Color.Blue => 1
//  Color.Green => 2
//  Color.RGB => 3
//  None => 4
//}
//println(i)

//export val asdf = 1
//[Option.None_, Option.Some(123)]
//var a: Int? = Option.None_
//a ?: 123
//val _ = if true { 123 }

val x = if true {
  Option.None_
} else {
  Option.Some(123)
}
println(x)
