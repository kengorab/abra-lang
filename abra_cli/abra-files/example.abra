type Node<T> {
  value: T
  next: Node<T>? = None
}

type LinkedList<T> {
  count: Int = 0
  head: Node<T>? = None

  func push(self, item: T): LinkedList<T> {
    if self.head |head| {
      var node = head
      while node.next |n| { node = n }
      node.next = Node(value: item)
    } else {
      self.head = Node(value: item)
    }

    self
  }

  func toString(self): String {
    var str = "["
    if self.head |head| {
      var node = head

      while node.next |n| {
        str = str + node.value + ", "
        node = n
      }

      str += node.value
    }
    str + "]"
  }
}

val list: LinkedList<String> = LinkedList()
list.push("a")
  .push("b")
  .push("c")
  .push("d")
  .toString()
