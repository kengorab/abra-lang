import Value from "./types"
import ns from "./core"

export type Env {
  outer: Env? = None
  data: Map<String, Value> = {}

  func root(): Env = Env(data: ns)

  func set(self, key: String, value: Value) {
    self.data[key] = value
  } 

  func find(self, key: String): Value? {
    // TODO: This is because of how Nones are treated when typechecking match-arms
    // match self.data[key] {
    //   Value v => v
    //   None => match self.outer?.find(key) {
    //     Value v => v
    //     _ => None
    //   }
    // }
    if self.data[key] |v| {
      v
    } else {
      self.outer?.find(key)
    }
  }

  func get(self, key: String): Value? {
    // TODO: Address this in some way - cannot perform typeof for a top-level enum (variants only)
    // match self.find(key) {
    //   Value v => v
    //   None => {
    //     println("ERROR")
    //     Value.Nil
    //   }
    // }

    // if self.find(key) |v| {
    //   v
    // } else {
    //   println("ERROR")
    //   Value.Nil
    // }
    self.find(key) 
  }
}
