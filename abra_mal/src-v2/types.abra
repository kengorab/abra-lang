export type Error {
  error: String
  value: Value? = None
}

export type AtomInner { _inner: Value }
export type FnValue {
  body: Value,
  params: String[],
  env: Env,
  isMacro: Bool,
  fn: (Value[]) => Result<Value, Error>
}

export enum Value {
  Nil
  Int(value: Int)
  Str(value: String)
  Bool(value: Bool)
  Symbol(value: String)
  Keyword(value: String)
  Atom(value: AtomInner)
  List(values: Value[])
  Vector(values: Value[])
  Hash(values: Map<Value, Value>)
  BuiltinFn(value: (Value[]) => Result<Value, Error>)
  Fn(value: FnValue)
}

export type Env {
  outer: Env? = None
  data: Map<String, Value> = {}

  func initFnEnv(self, params: String[], args: Value[]): Bool {
    var i = 0
    for param in params {
      if param == "&" {
        val varargName = if params[i + 1] |name| {
          name
        } else {
          return false
        }
        self.set(varargName, Value.List(values: args[i:]))
        break
      } else {
        self.set(param, args[i] ?: Value.Nil)
      }
      i += 1
    }
    true
  }

  func set(self, key: String, value: Value) {
    self.data[key] = value
  }

  func find(self, key: String): Value? {
    if self.data[key] |v| {
      v
    } else {
      self.outer?.find(key)
    }
  }

  func get(self, key: String): Value? = self.find(key)
}
