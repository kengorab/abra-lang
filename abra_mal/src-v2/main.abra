//import prompt from "io"
import Env, Value, FnValue, Error from "./types"
import Reader from "./reader"
import prStr from "./printer"
import ns from "./core"

func read(input: String): Value = Reader.readStr(input)

func quasiquoteInner(items: Value[]): Result<Value, Error> {
  var result: Value[] = []

  for elt in items.reversed() {
    match elt {
      Value.List(items) => {
        match items[0] {
          Value.Symbol("splice-unquote") => {
            val v = if items[1] |v| v
            else return Result.Err(Error(error: "splice-unquote expects 1 argument"))

            result = [Value.Symbol("concat"), v, Value.List(result)]
            continue
          }
          _ => {}
        }
      }
      _ => {}
    }

    val qqResult = try quasiquote(elt)
    result = [Value.Symbol("cons"), qqResult, Value.List(result)]
  }

  Result.Ok(Value.List(result))
}

func quasiquote(ast: Value): Result<Value, Error> {
  val value = match ast {
    Value.Vector(items) => {
      return quasiquoteInner(items)
        .map(v => Value.List([Value.Symbol("vec"), v]))
    }
    Value.List(items) => {
      match items[0] {
        Value.Symbol("unquote") => {
          if items[1] |item| item
          else return Result.Err(Error(error: "unquote expects 1 argument"))
        }
        _ => return quasiquoteInner(items)
      }
    }
    Value.Hash h => Value.List([Value.Symbol("quote"), h])
    Value.Symbol s => Value.List([Value.Symbol("quote"), s])
    _ item => item
  }

  Result.Ok(value)
}

func isMacroCall(ast: Value, env: Env): Bool {
  match ast {
    Value.List(items) => {
      match items[0] {
        Value.Symbol(sym) => match env.find(sym) {
          Value.Fn(fnVal) => fnVal.isMacro
          _ => false
        }
        _ => false
      }
    }
    _ => false
  }
}

func macroExpand(_ast: Value, env: Env): Result<Value, Error> {
  var ast = _ast

  while isMacroCall(ast, env) {
    match ast {
      Value.List(items) => {
        match items[0] {
          Value.Symbol(sym) => {
            if env.find(sym) |value| {
              match value {
                Value.Fn(macroFn) => {
                  ast = try macroFn.fn(items[1:])
                }
                _ => return Result.Err(Error(error: "macro $sym was not a function"))
              }
            } else {
              return Result.Err(Error(error: "no macro named $sym"))
            }
          }
          _ => return Result.Err(Error(error: "expected symbol"))
        }
      }
      _ => return Result.Err(Error(error: "expected list"))
    }
  }

  Result.Ok(ast)
}

func eval(_input: Value, _env: Env): Result<Value, Error> {
  var input = _input
  var env = _env
 
  while true {
    input = try macroExpand(input, env)

    match input {
      Value.List(values) => {
        if values.isEmpty() return Result.Ok(input)

        match values[0] {
          Value.Symbol("def!") => {
            val [name, value] = values[1:]
            return match name {
              Value.Symbol(sym) => {
                val v = try eval(value ?: Value.Nil, env)
                env.set(sym, v)
                Result.Ok(v)
              }
              _ => Result.Err(Error(error: "def! names must be symbols"))
            }
          } 
          Value.Symbol("defmacro!") => {
            val [nameVal, value] = values[1:]
            val name = match nameVal {
              Value.Symbol(sym) => sym
              _ => return Result.Err(Error(error: "defmacro! names must be symbols"))
            }

            val v = try eval(value ?: Value.Nil, env)
            return match v {
              Value.Fn(fnVal) => {
                fnVal.isMacro = true
                env.set(name, v)
                Result.Ok(v)
              }
              _ => Result.Err(Error(error: "defmacro! values must be functions"))
            }
          }
          Value.Symbol("let*") => {
            val letEnv = Env(outer: env)
            val bindings = match values[1] {
              Value.List(values) => values
              Value.Vector(values) => values
              _ => return Result.Err(Error(error: "let* bindings must be a list/vector"))
            }
            for i in range(0, bindings.length, 2) {
              match bindings[i] {
                Value.Symbol(key) => {
                  val value = try eval(bindings[i + 1] ?: Value.Nil, letEnv)
                  letEnv.set(key, value)
                }
                _ => return Result.Err(Error(error: "let* bindings must be symbols"))
              }
            }

            input = values[2] ?: Value.Nil
            env = letEnv
            continue
          } 
          Value.Symbol("do") => {
            for item in values[1:-1] eval(item, env)
            if values[-1] |last| {
              input = last
              continue
            } else return Result.Ok(Value.Nil)
          }
          Value.Symbol("if") => {
            val [condExpr, thenBlock, elseBlock] = values[1:]
            val cond = match try eval(condExpr ?: Value.Nil, env) {
              Value.Bool(b) => b,
              Value.Nil => false,
              _ => true
            }
            input = if cond thenBlock ?: Value.Nil else elseBlock ?: Value.Nil 
            continue
          } 
          Value.Symbol("fn*") => {
            val [paramsValue, body] = values[1:]

            val params = match paramsValue {
              Value.List(vals) => vals
              Value.Vector(vals) => vals
              _ => return Result.Err(Error(error: "fn* params must be a list/vector"))
            }
            val paramNames: String[] = []
            for param in params {
              match param {
                Value.Symbol(sym) => paramNames.push(sym)
                _ => return Result.Err(Error(error: "fn* params must be symbols"))
              }
            }
            val f = Value.Fn(FnValue(
              body: body ?: Value.Nil,
              params: paramNames,
              env: env,
              isMacro: false,
              fn: args => {
                val fnEnv = Env(outer: env)
                fnEnv.initFnEnv(paramNames, args)
                eval(body ?: Value.Nil, fnEnv)
              }
            ))
            return Result.Ok(f)
          }
          Value.Symbol("quote") => {
            return if values[1] |value| {
              Result.Ok(value)
            } else {
              Result.Err(Error(error: "quote expects 1 argument"))
            }
          }
          Value.Symbol("quasiquote") => {
            if values[1] |value| {
              input = try quasiquote(value)
              continue
            } else {
              Result.Err(Error(error: "quasiquote expects 1 argument"))
            }
          }
          Value.Symbol("quasiquoteexpand") => {
            if values[1] |value| {
              return quasiquote(value)
            } else {
              Result.Err(Error(error: "quasiquoteexpand expects 1 argument"))
            }
          }
          Value.Symbol("macroexpand") => {
            if values[1] |value| {
              return macroExpand(value, env)
            } else {
              Result.Err(Error(error: "macroexpand expects 1 argument"))
            }
          }
          Value.Symbol("try*") => {
            val [tryVal, catchVal] = values[1:]

            val tryBlock = if tryVal |tryVal| tryVal
            else return Result.Err(Error(error: "try* expects block as first argument"))

            val (errName, catchBlock) = match catchVal {
              Value.List(items) => {
                match items[0] {
                  Value.Symbol("catch*") => {
                    val errName = match items[1] {
                      Value.Symbol(sym) => sym
                      _ => return Result.Err(Error(error: "catch* expects symbol as first argument"))
                    }

                    (errName, items[2])
                  }
                  _ => return Result.Err(Error(error: "try* expects catch* block as second argument"))
                }
              }
              _ => ("", None)
            }

            match eval(tryBlock, env) {
              Result.Ok res => return res
              Result.Err(e) err => {
                if catchBlock |catchBlock| {
                  val errVal = if e.value |v| v else Value.Str(e.error)
                  val catchEnv = Env(outer: env)
                  catchEnv.set(errName, errVal)
                  return eval(catchBlock, catchEnv)
                } else {
                  return err
                }
              }
            }
          }
          _ => {
            return match try evalAst(input, env) {
              Value.List(values) => {
                val [fn, *args] = values
                match fn {
                  Value.BuiltinFn(fn) => fn(args)
                  Value.Fn(fnVal) => {
                    val fnEnv = Env(outer: fnVal.env)
                    fnEnv.initFnEnv(fnVal.params, args)
                    input = fnVal.body
                    env = fnEnv
                    continue
                  }
                  None => Result.Err(Error(error: "Unreachable"))
                  _ v => Result.Err(Error(error: "Could not evaluate ${pr(v)} as function"))
                }
              }
              _ => Result.Err(Error(error: "Unreachable?"))
            }
          }
        }
      }
      _ => return evalAst(input, env) 
    }
  }

  Result.Err(Error(error: "Unreachable"))
}

func evalAst(ast: Value, env: Env): Result<Value, Error> {
  match ast {
    Value.Symbol(sym) => match env.get(sym) {
      None => Result.Err(Error(error: "'$sym' not found"))
      _ v => Result.Ok(v)
    }
    Value.List(items) => {
      val values: Value[] = []

      for item in items {
        val v = try eval(item, env)
        values.push(v)
      }
      Result.Ok(Value.List(values))
    }
    Value.Vector(items) => {
      val values: Value[] = []
      for item in items {
        val v = try eval(item, env)
        values.push(v)
      }
      Result.Ok(Value.Vector(values))
    }
    Value.Hash(map) => {
      val newMap: Map<Value, Value> = {}
      for key, item in map {
        val v = try eval(item, env)
        newMap[key] = v
      }
      Result.Ok(Value.Hash(newMap))
    }
    _ => Result.Ok(ast)
  }
}

func pr(input: Value): String = prStr(input, true)

func rep(input: String, env: Env): String {
  match eval(read(input), env) {
    Result.Ok(v) => pr(v)
    Result.Err(e) => {
      val msg = if e.value |v| pr(v) else e.error
      "Error: $msg"
    }
  }
}

val replEnv = Env(data: ns)
replEnv.set("eval", Value.BuiltinFn(args => {
  if args[0] |ast| {
    eval(ast, replEnv)
  } else {
    Result.Ok(Value.Nil)
  }
}))

rep("(def! not (fn* (a) (if a false true)))", replEnv)
rep("(def! load-file (fn* (f) (eval (read-string (str \"(do \" (slurp f) \"\nnil)\")))))", replEnv)

val [fileName, *args] = process.args
replEnv.set("*ARGV*", Value.List(
  args.map(arg => Value.Str(arg))
))

rep("(defmacro! cond (fn* (& xs) (if (> (count xs) 0) (list 'if (first xs) (if (> (count xs) 1) (nth xs 1) (throw \"odd number of forms to cond\")) (cons 'cond (rest (rest xs)))))))", replEnv)

if fileName |fileName| {
  rep("(load-file \"$fileName\")", replEnv)
//} else {
//  while true {
//    val input = prompt("user> ")
//    println(rep(input, replEnv))
//  }
}
